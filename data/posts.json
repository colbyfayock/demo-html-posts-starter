[
  {
    "id": "cG9zdDo2ODA=",
    "content": "\n<p>Browsers ship with a ton of ways to make your web app your own. With CSS, HTML, and JavaScript, we can do whatever we want within the walls of the browser tab. But it doesn&#8217;t include a ton of ways to customize the outside of that experience except tools like favicons, which are almost as old as the web itself! How can we take advantage of favicons in the modern world of React and Next.js?</p>\n\n\n\n<!--more-->\n\n\n\n<h2>What is a favicon?</h2>\n\n\n\n<p>If you haven&#8217;t heard of the term favicon, you&#8217;ve likely already seen one, just maybe never knew what it&#8217;s called.</p>\n\n\n\n<p>Favicons are the little images (icons) that appears in the browser tab when you&#8217;re visiting a website.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"47\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/browser-tabs-favicons.jpg?resize=640%2C47\" alt=\"Browser tabs with arrows pointing to favicons\" class=\"wp-image-681\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/browser-tabs-favicons.jpg?resize=1024%2C75 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/browser-tabs-favicons.jpg?resize=300%2C22 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/browser-tabs-favicons.jpg?resize=768%2C56 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/browser-tabs-favicons.jpg?resize=1536%2C113 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/browser-tabs-favicons.jpg?w=1988 1988w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/browser-tabs-favicons.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/browser-tabs-favicons.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Several browser tabs with favicons</figcaption></figure>\n\n\n\n<p>It was <a href=\"https://en.wikipedia.org/wiki/Favicon\">originally added to IE5 by Microsoft</a>, the idea being that whenever you bookmarked a page, it would include the icon.</p>\n\n\n\n<p>The goal is to provide an easy way to distinguish a website from others. If you have a few bookmarks or tabs open, being able to see that big Google logo helps you to recognize and switch to it quicker.</p>\n\n\n\n<p>But sites like Gmail in the screenshot above have taken that a step further, where not only can you use a favicon for a simple logo, but you can use it for easily identifiable information, such as how many messages are unread.</p>\n\n\n\n<h2>How does Next.js use favicons?</h2>\n\n\n\n<p>There&#8217;s really nothing &#8220;special&#8221; about using a favicon with Next.js.</p>\n\n\n\n<p>Favicons are a <a href=\"https://www.w3.org/2005/10/howto-favicon\">web standard</a>, so pertaining to Next.js, it&#8217;s really just about how to add it to the page using the standardized method and making sure it properly renders with the rest of the page&#8217;s HTML.</p>\n\n\n\n<h2>Step 0: Creating a new Next.js app with Create Next App</h2>\n\n\n\n<p>We’re going to start off with a new Next.js app using <a href=\"https://nextjs.org/docs/api-reference/create-next-app\">Create Next App</a>.</p>\n\n\n\n<p>Inside of your terminal, run:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn create next-app my-favicon-app\n# or\nnpx create-next-app my-favicon-app</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: feel free to use a different value than <code>my-favicon-app</code> as your project name!</p></blockquote>\n\n\n\n<p>Once installation has finished, you can navigate to that directory and start up your development server:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd my-favicon-app\n\nyarn dev\n# or\nnpm run dev</code></pre>\n\n\n\n<p>And once loaded, you should now be able to open up your new app at <a href=\"http://localhost:3000/\">http://localhost:3000</a>!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"217\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/01/new-nextjs-app.jpg?resize=640%2C217\" alt=\"New web app showing Welcome to NExt.js\" class=\"wp-image-45\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/01/new-nextjs-app.jpg?resize=1024%2C347 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/01/new-nextjs-app.jpg?resize=300%2C102 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/01/new-nextjs-app.jpg?resize=768%2C260 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/01/new-nextjs-app.jpg?resize=1536%2C521 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/01/new-nextjs-app.jpg?resize=2048%2C695 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/01/new-nextjs-app.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/01/new-nextjs-app.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>New Next.js app</figcaption></figure>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-favicon-app/commit/e91531de6978f5b0fffd4d93f3c2484dc09fb708\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 1: Adding a custom favicon to a Next.js app with Favicon Generator</h2>\n\n\n\n<p>When we create a new Next.js application with Create Next App, we actually get a favicon by default.</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-default-favicon.jpg?w=300\" alt=\"Browser tab showing Next.js default favicon\" class=\"wp-image-682\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-default-favicon.jpg?w=520 520w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-default-favicon.jpg?resize=300%2C98 300w\" sizes=\"(max-width: 520px) 100vw, 520px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Default Next.js favicon</figcaption></figure>\n\n\n\n<p>The only issue, that&#8217;s the Vercel logo! But luckily, it shows that out of the box, favicons &#8220;just work&#8221; with Next.js.</p>\n\n\n\n<p>If we look inside of <code>pages/index.js</code> our homepage, we can see that this is getting added using the <a href=\"https://nextjs.org/docs/api-reference/next/head\">Next.js Head component</a>, which along with our favicons, can help manage other <a href=\"https://www.youtube.com/watch?v=8BrZeaw3sLQ\">important SEO metadata</a>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Head&gt;\n  &lt;title&gt;Create Next App&lt;/title&gt;\n  &lt;meta name=\"description\" content=\"Generated by create next app\" /&gt;\n  &lt;link rel=\"icon\" href=\"/favicon.ico\" /&gt;\n&lt;/Head&gt;</code></pre>\n\n\n\n<p>So we&#8217;re already a good chunk of the way there.</p>\n\n\n\n<p>Now the standard favicon file that&#8217;s been around for ages is the favicon.ico file. This isn&#8217;t a typical image file that we can just export from anywhere.</p>\n\n\n\n<p>Luckily, there are a wide variety of options of how we can generate ICOs from images online. My favorite as of writing this is <a href=\"https://realfavicongenerator.net/\">Favicon Generator</a>.</p>\n\n\n\n<p>To start, we need an image to use. We can really use any image we want with Favicon Generator, as it gives some options for how we can tweak it even if it&#8217;s not square, but the image should ideally be square and easily visible when tiny.</p>\n\n\n\n<p>If you want to follow along, you can use my favicon from <a href=\"https://spacejelly.dev/\">spacejelly.dev</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-1024x1024-2-1024x1024.png?w=400\" alt=\"spacejelly.dev favicon\" class=\"wp-image-684\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-1024x1024-2.png?w=1024 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-1024x1024-2.png?resize=300%2C300 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-1024x1024-2.png?resize=150%2C150 150w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-1024x1024-2.png?resize=768%2C768 768w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>spacejelly.dev favicon</figcaption></figure>\n\n\n\n<p><em>Download at <a href=\"https://spacejelly.dev/favicon-1024x1024.png\">https://spacejelly.dev/favicon-1024&#215;1024.png</a></em></p>\n\n\n\n<p>Notice I&#8217;m using a PNG with a circle in it. The cool thing is we can use transparency to avoid having to use square images (though square images are totally fine!).</p>\n\n\n\n<p>Now heading over to Favicon Generator at <a href=\"realfavicongenerator.net\">realfavicongenerator.net</a>, the first thing you&#8217;ll see at the top of the page is a button that says Select your Favicon Image.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"244\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-select-image.jpg?resize=640%2C244\" alt=\"Favicon Generator highlighting Select your Favicon image button\" class=\"wp-image-685\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-select-image-scaled.jpg?resize=1024%2C391 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-select-image-scaled.jpg?resize=300%2C114 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-select-image-scaled.jpg?resize=768%2C293 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-select-image-scaled.jpg?resize=1536%2C586 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-select-image-scaled.jpg?resize=2048%2C781 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-select-image-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-select-image-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Selecting an image on Favicon Generator</figcaption></figure>\n\n\n\n<p>Once you do, Favicon Generator will load up a preview for how your favicon will look on your site with a few different examples. It even gives you options for how you can change how it looks, like adding a background or changing app settings.</p>\n\n\n\n<p>Now as a quick aside here, different native devices allow you to specify settings for how your website or app will appear on the web.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"271\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-android-app-icon.jpg?resize=640%2C271\" alt=\"Favicon Generator showing preview of Android Chrome app icon\" class=\"wp-image-686\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-android-app-icon-scaled.jpg?resize=1024%2C434 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-android-app-icon-scaled.jpg?resize=300%2C127 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-android-app-icon-scaled.jpg?resize=768%2C326 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-android-app-icon-scaled.jpg?resize=1536%2C651 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-android-app-icon-scaled.jpg?resize=2048%2C868 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-android-app-icon-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-android-app-icon-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Android Chrome settings on Favicon Generator</figcaption></figure>\n\n\n\n<p>Android Chrome for instance allows you to set a &#8220;theme&#8221; color, which changes how your website looks when someone opens it on their device.</p>\n\n\n\n<p>Feel free to update these settings to your liking, but we&#8217;ll be focusing on the icon itself for now.</p>\n\n\n\n<p>Once you&#8217;re ready, head down to the bottom of the page and click Generate your Favicons and HTML code.</p>\n\n\n\n<p>Favicon Generator will build your icons to a ZIP that you can download and provide you with a snippet of HTML that you can add right into your app.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"235\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-install-favicon.jpg?resize=640%2C235\" alt=\"Favicon Generator installation instructions including downloading favicon package and HTML snippet\" class=\"wp-image-687\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-install-favicon-scaled.jpg?resize=1024%2C376 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-install-favicon-scaled.jpg?resize=300%2C110 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-install-favicon-scaled.jpg?resize=768%2C282 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-install-favicon-scaled.jpg?resize=1536%2C565 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-install-favicon-scaled.jpg?resize=2048%2C753 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-install-favicon-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-generator-install-favicon-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Generated favicon settings</figcaption></figure>\n\n\n\n<p>Go ahead and click Favicon package and unzip the file.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"235\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/mac-drag-favicon-to-nextjs-public.jpg?resize=640%2C235\" alt=\"Mac Finder showing arrow to drag favicons to Next.js public folder\" class=\"wp-image-689\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/mac-drag-favicon-to-nextjs-public-scaled.jpg?resize=1024%2C376 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/mac-drag-favicon-to-nextjs-public-scaled.jpg?resize=300%2C110 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/mac-drag-favicon-to-nextjs-public-scaled.jpg?resize=768%2C282 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/mac-drag-favicon-to-nextjs-public-scaled.jpg?resize=1536%2C565 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/mac-drag-favicon-to-nextjs-public-scaled.jpg?resize=2048%2C753 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/mac-drag-favicon-to-nextjs-public-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/mac-drag-favicon-to-nextjs-public-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Dragging favicon files to the public folder</figcaption></figure>\n\n\n\n<p>Then drag all of those files into your public directory including replacing the favicon.ico file with the new one.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: The public directory is used in Next.js to serve static files. For instance, dragging favicon.ico into public will make favicon.ico available at yourwebsite.com/favicon.ico.</p></blockquote>\n\n\n\n<p>Now that our image files are all ready, let&#8217;s head back to Favicon Generator and copy our code snippet and paste it into the Head component of our app.</p>\n\n\n\n<p>After pasting, be sure to update the snippet to conform to JSX standards, meaning, adding a closing tag to all of the lines or self-closing each one.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Head&gt;\n  &lt;title&gt;Create Next App&lt;/title&gt;\n  &lt;meta name=\"description\" content=\"Generated by create next app\" /&gt;\n  &lt;link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\" /&gt;\n  &lt;link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\" /&gt;\n  &lt;link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\" /&gt;\n  &lt;link rel=\"manifest\" href=\"/site.webmanifest\" /&gt;\n  &lt;link rel=\"mask-icon\" href=\"/safari-pinned-tab.svg\" color=\"#5bbad5\" /&gt;\n  &lt;meta name=\"msapplication-TileColor\" content=\"#da532c\" /&gt;\n  &lt;meta name=\"theme-color\" content=\"#ffffff\" /&gt;\n&lt;/Head&gt;</code></pre>\n\n\n\n<p>You&#8217;ll also notice that the new snippet doesn&#8217;t include the favicon.io file. By default, browsers will look for a favicon.ico file in the root of the project. This means that we don&#8217;t necessarily need to include it.</p>\n\n\n\n<p>But now, finally, if we open back up our app in our browser, we should now see our new favicon in our browser tab!</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/browser-tab-custom-favicon.jpg?w=300\" alt=\"Browser tab showing custom favicon\" class=\"wp-image-690\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/browser-tab-custom-favicon.jpg?w=596 596w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/browser-tab-custom-favicon.jpg?resize=300%2C95 300w\" sizes=\"(max-width: 596px) 100vw, 596px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Updated favicon in browser tab</figcaption></figure>\n\n\n\n<p>Now to dig into the additional tags we added, we can take a quick glance at what they&#8217;re doing.</p>\n\n\n\n<p>The easiest way to check this out is in Chrome under the Application tab in the Developer Tools.</p>\n\n\n\n<p>If we start from the top, we&#8217;ll see there&#8217;s not much info, but the reason for that is we didn&#8217;t fill any of that out in our <code>site.webmanifest</code> file, but if we scroll down, we can see all of the app icons that we&#8217;re referencing in that file.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"239\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-devtools-web-manifest.jpg?resize=640%2C239\" alt=\"Next.js app with dev tools open showing web manifest with app icons\" class=\"wp-image-691\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-devtools-web-manifest-scaled.jpg?resize=1024%2C382 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-devtools-web-manifest-scaled.jpg?resize=300%2C112 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-devtools-web-manifest-scaled.jpg?resize=768%2C287 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-devtools-web-manifest-scaled.jpg?resize=1536%2C573 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-devtools-web-manifest-scaled.jpg?resize=2048%2C764 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-devtools-web-manifest-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-devtools-web-manifest-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">App icons showing in application manifest</figcaption></figure>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Tip: you can <a href=\"https://web.dev/add-manifest/\">fill out the rest</a> of <code>site.webmanifest</code> which helps gives more context to your web app.</p></blockquote>\n\n\n\n<p>On top of that, if we navigate to our web app on our mobile devices that support adding bookmarks to the homescreen like iOS, we can see that we can now add it and our app icon shows up right on the homescreen for us!</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: you likely can&#8217;t go to localhost:3000 directly on a mobile devices if the server isn&#8217;t running there. You can use tools like <a href=\"https://formulae.brew.sh/cask/ngrok\">ngrok</a> to test with a public address or simply test when the site is deployed.</p></blockquote>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"266\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/adding-web-app-to-home-screen.jpg?resize=640%2C266\" alt=\"iOS showing adding web app to homescreen with custom shortcut app icon\" class=\"wp-image-692\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/adding-web-app-to-home-screen.jpg?resize=1024%2C425 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/adding-web-app-to-home-screen.jpg?resize=300%2C125 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/adding-web-app-to-home-screen.jpg?resize=768%2C319 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/adding-web-app-to-home-screen.jpg?resize=1536%2C637 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/adding-web-app-to-home-screen.jpg?w=2000 2000w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/adding-web-app-to-home-screen.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/adding-web-app-to-home-screen.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Adding the web app to the home screen in iOS</figcaption></figure>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-favicon-app/commit/5ab26c8525980fba823e3c016b6703c9bec97ca9\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 2: Using _app.js to set global favicon and app icons in Next.js</h2>\n\n\n\n<p>Our favicon and app icons are looking great, but we have one issue. It&#8217;s only applying to the homepage.</p>\n\n\n\n<p>Now technically, as I mentioned in Step 1, because the file is in the root of our project, browsers will automatically see that favicon.ico and load it, so if we create a new page, it would still kind of work.</p>\n\n\n\n<p>But we don&#8217;t necessarily want to use the ICO file, we want to load the PNG files, which are high resolution and will look nicer.</p>\n\n\n\n<p>To move our favicon to a globally available spot, we can use the <a href=\"https://nextjs.org/docs/advanced-features/custom-app\">App file</a>, which is a Next.js-specific file that wraps the component tree of all pages.</p>\n\n\n\n<p>If we open up <code>pages/_app.js</code>, we won&#8217;t see much in there, but let&#8217;s move everything inside of our Head component in our homepage to that file.</p>\n\n\n\n<p>To start, at the top of <code>pages/_app.js</code> import the Head component:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import Head from 'next/head';</code></pre>\n\n\n\n<p>Then, we want to add our Head component and favicon tags to the component tree. We can do that by creating a <a href=\"https://reactjs.org/docs/fragments.html\">React Fragment</a>, which we can then put our Head.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>function MyApp({ Component, pageProps }) {\n  return (\n    &lt;&gt;\n      &lt;Head&gt;\n        &lt;title&gt;Create Next App&lt;/title&gt;\n        &lt;meta name=\"description\" content=\"Generated by create next app\" /&gt;\n        &lt;link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\" /&gt;\n        &lt;link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\" /&gt;\n        &lt;link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\" /&gt;\n        &lt;link rel=\"manifest\" href=\"/site.webmanifest\" /&gt;\n        &lt;link rel=\"mask-icon\" href=\"/safari-pinned-tab.svg\" color=\"#5bbad5\" /&gt;\n        &lt;meta name=\"msapplication-TileColor\" content=\"#da532c\" /&gt;\n        &lt;meta name=\"theme-color\" content=\"#ffffff\" /&gt;\n      &lt;/Head&gt;\n      &lt;Component {...pageProps} /&gt;\n    &lt;/&gt;\n  );\n}</code></pre>\n\n\n\n<p>You&#8217;ll notice I also moved the title and description to our App file. The added benefit here is that we can then have a global default value for our title and description, so that no matter what, we always have one set.</p>\n\n\n\n<p>At this point, if you reload the homepage, nothing should be different, however to test this out, we can create a quick new page.</p>\n\n\n\n<p>Let&#8217;s duplicate our <code>pages/index.js</code> file to something like <code>pages/admin.js</code>. Feel free to update it to however you&#8217;d like, but I added the title of Admin and I additionally added a link using the Next.js Link component back to the homepage.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: <a href=\"https://github.com/colbyfayock/my-favicon-app/commit/cb94ca59d117c5723717a626e4f0e8d607e892a2#diff-c87d5ad69b8a991139a2cf14291b9a37ccf9fbe2473223f048edfb9f0f20f0d2R1\">See my code in the commit!</a></p></blockquote>\n\n\n\n<p>On the homepage, we can similarly add a link to the Admin page (or the new page you created) so that we have a way to navigate to it.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: <a href=\"https://github.com/colbyfayock/my-favicon-app/commit/cb94ca59d117c5723717a626e4f0e8d607e892a2#diff-7c97c1ad17c63f34774324965f81661cea32f533a65c39ab03576069972e4d0eR14\">See my code in the commit!</a></p></blockquote>\n\n\n\n<p>But now, if we navigate over to our Admin page, we can see the favicon working! And if we open up the developer tools to check the source, we can see that without adding the Head component and tags to our Admin page, we have our favicons!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"184\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-devtools-favicon-html.jpg?resize=640%2C184\" alt=\"Next.js with dev tools open showing HTML with favicon\" class=\"wp-image-693\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-devtools-favicon-html-scaled.jpg?resize=1024%2C294 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-devtools-favicon-html-scaled.jpg?resize=300%2C86 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-devtools-favicon-html-scaled.jpg?resize=768%2C220 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-devtools-favicon-html-scaled.jpg?resize=1536%2C441 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-devtools-favicon-html-scaled.jpg?resize=2048%2C587 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-devtools-favicon-html-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-devtools-favicon-html-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Favicon tags showing in developer tools source</figcaption></figure>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-favicon-app/commit/cb94ca59d117c5723717a626e4f0e8d607e892a2\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 3: Adding unique favicons to different pages</h2>\n\n\n\n<p>We have global favicons working well, but what if we wanted to change our favicon depending on the page we&#8217;re on?</p>\n\n\n\n<p>The nice thing about the Head component is we can use it anywhere in our application and override the global instance of it.</p>\n\n\n\n<p>To test this out, I created a new icon that you can follow along with.</p>\n\n\n\n<p></p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-admin-1024x1024-1-1024x1024.png?w=400\" alt=\"Favicon variation of spacejelly.dev with lock for admin\" class=\"wp-image-695\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-admin-1024x1024-1.png?w=1024 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-admin-1024x1024-1.png?resize=300%2C300 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-admin-1024x1024-1.png?resize=150%2C150 150w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-admin-1024x1024-1.png?resize=768%2C768 768w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Admin variation of a favicon</figcaption></figure>\n\n\n\n<p><em>Download at https://github.com/colbyfayock/my-favicon-app/blob/main/public/favicon-admin-1024&#215;1024.png</em></p>\n\n\n\n<p>We&#8217;re going to use this icon for our admin page.</p>\n\n\n\n<p>Like before, we can head over to our <a href=\"https://realfavicongenerator.net/\">Favicon Generator</a> and load this up, getting our variations.</p>\n\n\n\n<p>This time however, when we unpack the files, the only 2 that we&#8217;re going to use in this example are:</p>\n\n\n\n<ul><li>favicon-16&#215;16.png</li><li>favicon-32&#215;32.png</li></ul>\n\n\n\n<p>Now we already have files named that way, so we can name them a different variation so that we can avoid conflicts when referencing them.</p>\n\n\n\n<ul><li>favicon-admin-16&#215;16.png</li><li>favicon-admin-32&#215;32.png</li></ul>\n\n\n\n<p>We&#8217;ll want to drop these in our <code>public</code> folder like earlier.</p>\n\n\n\n<p>Now let&#8217;s head over to <code>pages/admin.js</code> and inside, we should already have the Head component imported at the top.</p>\n\n\n\n<p>That means we can add our head component right at the top of the component:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Head&gt;\n  &lt;title&gt;Admin&lt;/title&gt;\n  &lt;link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-admin-32x32.png\" /&gt;\n  &lt;link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-admin-16x16.png\" /&gt;\n&lt;/Head&gt;</code></pre>\n\n\n\n<p>If we open up our app then navigate to our Admin page, we should now see the updated favicon!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"207\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-favicon-page-updated-html.jpg?resize=640%2C207\" alt=\"Next.js app with dev tools showing updated HTML with favicon variant\" class=\"wp-image-696\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-favicon-page-updated-html-scaled.jpg?resize=1024%2C331 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-favicon-page-updated-html-scaled.jpg?resize=300%2C97 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-favicon-page-updated-html-scaled.jpg?resize=768%2C248 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-favicon-page-updated-html-scaled.jpg?resize=1536%2C496 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-favicon-page-updated-html-scaled.jpg?resize=2048%2C662 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-favicon-page-updated-html-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-favicon-page-updated-html-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Updated icon for Admin page</figcaption></figure>\n\n\n\n<p>Now we have one problem though. If we click back to the homepage, we notice that the favicon actually doesn&#8217;t revert back to the original! 😱</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"229\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-favicon-stale.jpg?resize=640%2C229\" alt=\"Next.js homepage with devtools showing stale favicon\" class=\"wp-image-698\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-favicon-stale-scaled.jpg?resize=1024%2C366 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-favicon-stale-scaled.jpg?resize=300%2C107 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-favicon-stale-scaled.jpg?resize=768%2C274 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-favicon-stale-scaled.jpg?resize=1536%2C549 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-favicon-stale-scaled.jpg?resize=2048%2C731 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-favicon-stale-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-favicon-stale-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Homepage showing the wrong favicon</figcaption></figure>\n\n\n\n<p>I don&#8217;t know this for a fact, but my guess is that when the favicon is added to the page, it updates, but removing it, doesn&#8217;t &#8220;update&#8221; the page, causing it to stay to the Admin variation.</p>\n\n\n\n<p>To fix this, since we&#8217;re only updating those two specific icons, we can simply re-add those back to the homepage.</p>\n\n\n\n<p>Inside of <code>pages/index.js</code> add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Head&gt;\n  &lt;title&gt;Home&lt;/title&gt;\n  &lt;link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\" /&gt;\n  &lt;link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\" /&gt;\n&lt;/Head&gt;</code></pre>\n\n\n\n<p>And now if we refresh the page and navigate back and forth, we can see we&#8217;re back to our original favicon.</p>\n\n\n\n<p>Now part of the reason this is happening is due to us using the <code>_app.js</code> file to add the global favicons. That &#8220;component&#8221; isn&#8217;t going to refresh on page change, meaning, the favicons in that file are going to be stale as we navigate around.</p>\n\n\n\n<p>This is totally okay if we only plan on having a single favicon across the site, but we we saw here, it can lead to troubles if we need that to be dynamically updated.</p>\n\n\n\n<p>We&#8217;re not going to cover this here, but if you plan on using dynamic icons, I recommend alternatively using a <a href=\"https://github.com/colbyfayock/spacejelly.dev/blob/main/src/components/Layout/Layout.js#L39\">Layout component</a> that wraps the content of each page along the lines of:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const Layout = ({ children }) =&gt; {\n  return (\n    &lt;&gt;\n      &lt;Head&gt;\n        &lt;link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\" /&gt;\n        &lt;link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\" /&gt;\n      &lt;/Head&gt;\n      { children }\n    &lt;/&gt;\n  )\n}\n\n&lt;Layout&gt;\n  &lt;Head&gt;\n    &lt;title&gt;Admin&lt;/title&gt;\n    &lt;link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-admin-32x32.png\" /&gt;\n    &lt;link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-admin-16x16.png\" /&gt;\n  &lt;/Head&gt;\n  &lt;h1&gt;Admin&lt;/h1&gt;\n&lt;/Layout&gt;</code></pre>\n\n\n\n<p>It lends itself a bit better to managing dynamic page content like in our use case here or if you need to handle other dynamic bits when composing your global page layout.</p>\n\n\n\n<p>But in the meantime, we successfully set up our favicon to change when navigating to different pages of our web app!</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-favicon-app/commit/26e522e9542b31e34709e7507890b05f91c26cc2\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 4: Dynamically updating favicons based on user interaction</h2>\n\n\n\n<p>Changing the favicon on page change is one thing, but how about dynamically updating that icon on the same page?</p>\n\n\n\n<p>Given we&#8217;re in React-land and the way the Head component works, we can apply the exact same concepts we would to any other React component.</p>\n\n\n\n<p>To test this out, we&#8217;re going to use React state along with a button to trigger an update.</p>\n\n\n\n<p>First, at the top of <code>pages/index.js</code> , let&#8217;s import <code>useState</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { useState } from 'react';</code></pre>\n\n\n\n<p>Next, let&#8217;s define a new instance of state along with a function that we&#8217;ll use to update that state when we click our button:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const &#91;favicon, setFavicon] = useState('');\nconsole.log(`favicon state: ${favicon}`);\nfunction handleOnClick() {\n  setFavicon('favorite');\n  setTimeout(() =&gt; setFavicon(''), 3000);\n}</code></pre>\n\n\n\n<p>Here&#8217;s what we&#8217;re doing:</p>\n\n\n\n<ul><li>Creating a new instance of state called <code>favicon</code></li><li>That state has a default of an empty string, as we&#8217;ll use this later for a dynamic string value</li><li>We&#8217;re logging out that value so we can test and make sure it&#8217;s working</li><li>We&#8217;re defining a <code>handleOnClick</code> function that when fired, will update the state to a string called <code>favorite</code> then 3 seconds later set it back to an empty string</li></ul>\n\n\n\n<p>And finally, we can add the button to trigger this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p&gt;\n  &lt;button onClick={handleOnClick} style={{\n    color: 'white',\n    backgroundColor: 'blueviolet',\n    padding: '.6em .8em',\n    border: 0,\n    cursor: 'pointer'\n  }}&gt;\n    ❤️ Smash that Like button!\n  &lt;/button&gt;\n&lt;/p&gt;</code></pre>\n\n\n\n<p>If we open that up in the browser and look in our web log, we should see an empty console log statement, but when we click the button, we should see a string of <code>favorite</code> followed 3 seconds later by another empty log statement.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"192\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-custom-button-onclick-console-log.jpg?resize=640%2C192\" alt=\"Next.js app with dev tools showing console logs with favicon state on click\" class=\"wp-image-699\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-custom-button-onclick-console-log-scaled.jpg?resize=1024%2C307 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-custom-button-onclick-console-log-scaled.jpg?resize=300%2C90 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-custom-button-onclick-console-log-scaled.jpg?resize=768%2C230 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-custom-button-onclick-console-log-scaled.jpg?resize=1536%2C461 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-custom-button-onclick-console-log-scaled.jpg?resize=2048%2C614 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-custom-button-onclick-console-log-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-custom-button-onclick-console-log-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Console logs showing active state</figcaption></figure>\n\n\n\n<p>So now, let&#8217;s use that to dynamically change our favicon!</p>\n\n\n\n<p>To do this, we&#8217;re going to create yet another favicon.</p>\n\n\n\n<p>Here&#8217;s the image I&#8217;ll use, which you can feel free to convert over at Favicon Generator like the previous examples.</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-favorite-1024x1024-2-1024x1024.png?w=400\" alt=\"\" class=\"wp-image-700\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-favorite-1024x1024-2.png?w=1024 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-favorite-1024x1024-2.png?resize=300%2C300 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-favorite-1024x1024-2.png?resize=150%2C150 150w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/09/favicon-favorite-1024x1024-2.png?resize=768%2C768 768w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Heart variation of favicon</figcaption></figure>\n\n\n\n<p><em>Download at https://github.com/colbyfayock/my-favicon-app/blob/main/public/favicon-favorite-1024&#215;1024.png</em></p>\n\n\n\n<p>Now similar to before, we want to use the two files, <code>favicon-16x16.png</code> and <code>favicon-32x32.png</code> but we want to rename them to:</p>\n\n\n\n<ul><li>favicon-favorite-16&#215;16.png</li><li>favicon-favorite-32&#215;32.png</li></ul>\n\n\n\n<p>When ready, drop those in the <code>public</code> directory.</p>\n\n\n\n<p>Next, we&#8217;re going to update our favicons in the Head component with the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Head&gt;\n  &lt;title&gt;Home&lt;/title&gt;\n  &lt;link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={favicon ? `/favicon-${favicon}-32x32.png` : `/favicon-32x32.png`} /&gt;\n  &lt;link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={favicon ? `/favicon-${favicon}-16x16.png` : `/favicon-16x16.png`} /&gt;\n&lt;/Head&gt;</code></pre>\n\n\n\n<p>What we&#8217;re doing here is dynamically setting the value of our favicons, so that when there is no favicon state, we return it like we did previously, but when there is a state, we include it as part of the path to the favicon.</p>\n\n\n\n<p>But now, when we go ahead and smash that Like button (click the button), we can now see it updates the favicon dynamically!</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"640\" height=\"209\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/09/nextjs-dynamic-favicon-onclick.gif?resize=640%2C209\" alt=\"\" class=\"wp-image-701\" data-recalc-dims=\"1\"/><figcaption><meta charset=\"utf-8\">Updating the favicon on button click</figcaption></figure>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-favicon-app/commit/e95c1c5f5c20af840ed58f3be11d0b6b1f269658\">Follow along with the commit!</a></p>\n\n\n\n<h2>What else can we do?</h2>\n\n\n\n<h3>Shared layout</h3>\n\n\n\n<p>As I mentioned in Step 3, using the <code>_app.js</code> file for dynamic content has it&#8217;s drawbacks.</p>\n\n\n\n<p>I like to recommend using a shared Layout component that gets used to wrap all pages. It also gives a bit more flexibility with controlling the Layout from the page, such as changing headers on a specific page.</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/spacejelly.dev/blob/main/src/components/Layout/Layout.js\">Check out</a> how I used a shared Layout component for spacejelly.dev!</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/spacejelly.dev/blob/main/src/components/Layout/Layout.js\">https://github.com/colbyfayock/spacejelly.dev/blob/main/src/components/Layout/Layout.js</a></p>\n\n\n\n<h3>Optimize images</h3>\n\n\n\n<p>While the images are small, it&#8217;s always a good idea to optimize the images, especially transparent PNGs, to make sure you&#8217;re delivering as little data as possible for your visitors to download. It also makes it faster!</p>\n\n\n\n<p>You can use tools like <a href=\"https://tinypng.com/\">TinyPNG</a> to make sure you&#8217;re serving your images as small as possible without sacrificing quality.</p>\n",
    "title": "How to Add Custom Dynamic Favicons in React & Next.js",
    "slug": "how-to-add-custom-dynamic-favicons-in-react-next-js"
  },
  {
    "id": "cG9zdDo2NjI=",
    "content": "\n<p>Automation typically includes purely code-based tasks that don&#8217;t even think about a browser, but some tasks need to interact and use the browser as a human would like performing a search on a site. How can we leverage tools that can automate the browser and pack it into a serverless API endpoint to make easily accessible?</p>\n\n\n\n<!--more-->\n\n\n\n<h2>What is Puppeteer?</h2>\n\n\n\n<p><a href=\"https://pptr.dev/\">Puppeteer</a> is a JavaScript library from Google that allows developers to control Chrome via an API.</p>\n\n\n\n<p>A common use case is using Puppeteer for testing, where we can make sure that actions we perform in the browser work as we expect them to.</p>\n\n\n\n<p>But we can also use it to automate tasks that we want to programmatically perform in the browser. For instance, we can use Puppeteer to launch a website in Chrome and get it&#8217;s lighthouse score (<a href=\"https://github.com/puppeteer/examples\">see the example</a> from the Puppeteer team).</p>\n\n\n\n<h2>How can we use Puppeteer in a serverless function on Netlify?</h2>\n\n\n\n<p>Puppeteer works both with opening a visible browser UI and &#8220;headless&#8221;, meaning, it will run as a process without actually launching the UI.</p>\n\n\n\n<p>This makes it great for running in places you might not have a browser UI to open like CI environments and like you might have guessed, serverless functions.</p>\n\n\n\n<p>So we can take advantage of this capability allowing us to build API endpoints that can perform an action using Puppeteer.</p>\n\n\n\n<h2>What are we going to build?</h2>\n\n\n\n<p>We&#8217;re going to use Netlify to create a new serverless function that we&#8217;re able to POST a request to via an API endpoint.</p>\n\n\n\n<p>In this, we&#8217;ll learn how we can take advantage of packages like <a href=\"https://github.com/alixaxel/chrome-aws-lambda\">chrome-aws-lambda</a> and Puppeteer itself to package all of this up in a serverless function that can run on request.</p>\n\n\n\n<p>We&#8217;ll use the Netlify CLI to work with our functions, but it should work pretty similarly however you run and package up your functions.</p>\n\n\n\n<h2>Step 0: Creating a new node project</h2>\n\n\n\n<p>For this project, we&#8217;re going to start from scratch, as there&#8217;s not much boilerplate needed for this.</p>\n\n\n\n<p>The nice thing is because there&#8217;s not much boilerplate, this should really transfer to any project, so you should have no problem following along within your pre-existing project.</p>\n\n\n\n<p>So to get started, let&#8217;s create a new directory for our project and navigate to it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mkdir my-puppeteer-function\ncd my-puppeteer-function</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: feel free to use a different name for your project!</p></blockquote>\n\n\n\n<p>We&#8217;re then going to initialize a new node project so that we can install the packages we need to get ourselves productive.</p>\n\n\n\n<p>To create a new node project, run:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm init</code></pre>\n\n\n\n<p>This will go through a bunch of questions asking you how you want to set up your project. Feel free to hit enter for all of them and use the default as they&#8217;re not really important for this walkthrough.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Tip: You can always update these values in your <code>package.json</code>!</p></blockquote>\n\n\n\n<p>At this point, we now have a new node project where we can start to get productive with our new project.</p>\n\n\n\n<p>I&#8217;d also recommend <a href=\"https://docs.github.com/en/github/importing-your-projects-to-github/importing-source-code-to-github/adding-an-existing-project-to-github-using-the-command-line\">setting up the project as a GitHub repository</a>. When doing that, you want to make sure you add a <code>.gitignore</code> file in the root including your <code>node_modules</code> to avoid committing those.</p>\n\n\n\n<p>To do that, create a <code>.gitignore</code> file in the root, and simply add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>node_modules</code></pre>\n\n\n\n<p>And now we should be ready to dig in!</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-puppeteer-function/commit/e8f1ef45acb5b2cc28b9b2625248d2a8770ece83\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 1: Installing and configuring the Netlify CLI</h2>\n\n\n\n<p>As I mentioned earlier, we&#8217;re going to use the Netlify CLI to manage our function. This will include installing the CLI as a global package via npm or yarn. If you want to a void this route, you can also try checking out <a href=\"https://github.com/netlify/netlify-lambda\">netlify-lambda</a> which you can install as a local package, but it may work a bit differently.</p>\n\n\n\n<p>You can find the full <a href=\"https://docs.netlify.com/cli/get-started/\">instructions and documentation</a> over on Netlify, but to start off, we want to install the CLI package:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install netlify-cli -g</code></pre>\n\n\n\n<p>Once installed, you should be able to run the following command and see a list of available options:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>netlify</code></pre>\n\n\n\n<p>While this alone will allow you to start using the CLI, I also recommend you log in using your existing Netlify account.</p>\n\n\n\n<p>This will allow you to more easily link your project up later whenever you want to deploy your function.</p>\n\n\n\n<p>You can do this by running:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>netlify login</code></pre>\n\n\n\n<p>Where Netlify makes this process super easy, opening up a new browser window, where you can authorize with your account, where you&#8217;ll then be authorized with the CLI.</p>\n\n\n\n<p>You can also try running the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>netlify dev</code></pre>\n\n\n\n<p>Which should start a local server, but you&#8217;ll notice it won&#8217;t do anything yet, as we have nothing in the project, which is where we&#8217;ll start next!</p>\n\n\n\n<h2>Step 2: Creating a new serverless function</h2>\n\n\n\n<p>Now to start digging into the code, we want to set up a new serverless function.</p>\n\n\n\n<p>We have to parts to this:</p>\n\n\n\n<ul><li>The function itself including the file and the function handler</li><li>The Netlify configuration file (<code>netlify.toml</code>) which simply allows us to point to a directory where we want to create our functions</li></ul>\n\n\n\n<p>Starting off with creating the function file itself, let&#8217;s create a new folder called <code>functions</code> in the root of our project and inside, add a new file called <code>meta.js</code> (our first example will be grabbing some metadata from a webpage).</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: prefer a different directory name than &#8220;functions&#8221; feel free to use something else, just be sure to use that same name in the rest of the walkthrough.</p></blockquote>\n\n\n\n<p>Inside <code>functions/meta.js</code> add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>exports.handler = async function(event, context) {\n  return {\n    statusCode: 200,\n    body: JSON.stringify({\n      status: 'Ok'\n    })\n  };\n}</code></pre>\n\n\n\n<p>This creates a new asynchronous function that will serve as our &#8220;handler&#8221; which essentially runs whenever we hit the endpoint.</p>\n\n\n\n<p>Inside, we&#8217;re returning a 200 status code, meaning it was a successful request, and a body with a simple status that says &#8220;Ok&#8221;.</p>\n\n\n\n<p>Now before we can use it, we need to create our configuration file.</p>\n\n\n\n<p>Create a new file called <code>.netlify.toml</code> in the root of the project.</p>\n\n\n\n<p>Inside <code>.netlify.toml</code> add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;build]\n  functions = \"functions\"</code></pre>\n\n\n\n<p>This tells Netlify that we want to create our functions in the folder called &#8220;functions&#8221;!</p>\n\n\n\n<p>And now the moment we&#8217;ve been waiting for.</p>\n\n\n\n<p>We can start up our development server and see this work!</p>\n\n\n\n<p>Run the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>netlify dev</code></pre>\n\n\n\n<p>You should see a few lines in the terminal stating that the CLI found your functions and started a server at the specified port (default is 8888).</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"479\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/netlify-dev-local-server.jpg?resize=640%2C479\" alt=\"Terminal showing local server using netlify dev\" class=\"wp-image-665\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/netlify-dev-local-server.jpg?resize=1024%2C767 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/netlify-dev-local-server.jpg?resize=300%2C225 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/netlify-dev-local-server.jpg?resize=768%2C575 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/netlify-dev-local-server.jpg?resize=1536%2C1151 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/netlify-dev-local-server.jpg?w=1786 1786w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/netlify-dev-local-server.jpg?w=1280 1280w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Starting a local development server with Netlify CLI</figcaption></figure>\n\n\n\n<p>Netlify will even try to open that in the browser, though it won&#8217;t find anything as we don&#8217;t have any projects to show.</p>\n\n\n\n<p>However, if we try going to <a href=\"http://localhost:8888/.netlify/functions/meta\">http://localhost:8888/.netlify/functions/meta</a>, we should see a JSON response in our browser!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"74\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-ok.jpg?resize=640%2C74\" alt=\"JSON api endpoint response showing Ok\" class=\"wp-image-666\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-ok-scaled.jpg?resize=1024%2C119 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-ok-scaled.jpg?resize=300%2C35 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-ok-scaled.jpg?resize=768%2C89 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-ok-scaled.jpg?resize=1536%2C178 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-ok-scaled.jpg?resize=2048%2C238 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-ok-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-ok-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Successful request to serverless function endpoint</figcaption></figure>\n\n\n\n<p>While this doesn&#8217;t seem like a whole lot, we just created a new API endpoint where we can start writing custom code!</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-puppeteer-function/commit/60efb7d81f17704595b9d39dfbac81ec4f636ef4\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 3: Installing Chrome and Puppeteer to use in a serverless function</h2>\n\n\n\n<p>We have our new serverless function, we were able to see it running in the browser, now we need to install the tools required to run Chrome and Puppeteer inside.</p>\n\n\n\n<p>We&#8217;re going to use two dependencies for this:</p>\n\n\n\n<ul><li><a href=\"https://www.npmjs.com/package/chrome-aws-lambda\">chrome-aws-lambda</a></li><li><a href=\"https://www.npmjs.com/package/puppeteer-core\">puppeteer-core</a></li></ul>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Psst: technically we&#8217;re going to use a third, but we&#8217;ll see why a bit later!</p></blockquote>\n\n\n\n<p>Our serverless functions don&#8217;t have Chrome available by default and we don&#8217;t really have a mechanism to &#8220;install&#8221; it either. chrome-aws-lambda packages up the Chromium Binary so that we can use it as a node package along with the other dependencies of our project.</p>\n\n\n\n<p>puppeteer-core is the driving functionality of Puppeteer, but the big difference between it and the standard <a href=\"https://github.com/puppeteer/puppeteer\">puppeteer</a> package is it doesn&#8217;t come with browsers. Because we need to provide our own via chrome-aws-lambda, we don&#8217;t want to try to add the extra browsers to our bundle, as we&#8217;re limited by file size in a serverless function.</p>\n\n\n\n<p>So now that we know why we&#8217;re using these packages, let&#8217;s install them.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn add chrome-aws-lambda puppeteer-core\n# or\nnpm install chrome-aws-lambda puppeteer-core</code></pre>\n\n\n\n<p>And once complete, we&#8217;re ready to dig into the actual code!</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-puppeteer-function/commit/747406a2fa148230603854ba219e4fc717bc04e8\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 4: Setting up a new browser with Puppeteer to get a page&#8217;s title and SEO metadata</h2>\n\n\n\n<p>To get started, we need to first import our dependencies.</p>\n\n\n\n<p>At the top of <code>functions/meta.js</code> add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const chromium = require('chrome-aws-lambda');\nconst puppeteer = require('puppeteer-core');</code></pre>\n\n\n\n<p>Next, the way Puppeteer works, is we create an instance of a browser by associating it with the installed copy of the browser (Chromium) and launching it.</p>\n\n\n\n<p>Add the following at the top of the handler function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const browser = await puppeteer.launch({\n  args: chromium.args,\n  executablePath: await chromium.executablePath,\n  headless: true,\n});\n\nawait browser.close();</code></pre>\n\n\n\n<p>We&#8217;re using Puppeteer&#8217;s <code>launch</code> method to pass in flags from our instance of Chromium, an executable path (where the browser app launches from) which the chromium package is able to find and determine, along with the headless flag set to <code>true</code> as we don&#8217;t want to try to launch a UI.</p>\n\n\n\n<p>Notice at the end, we&#8217;re also using the <code>close</code> method. We want to make sure we&#8217;re always cleaning up our browser to avoid hanging requests and wasted resources.</p>\n\n\n\n<p>Now before we go further, let&#8217;s just make sure things are working. When we start this up, we&#8217;re not going to see anything actually &#8220;happen&#8221; as it&#8217;s running headlessly and we&#8217;re not doing anything with it, but we don&#8217;t want to see any errors either</p>\n\n\n\n<p>In your terminal, run:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>netlify dev</code></pre>\n\n\n\n<p>Then try opening up the function in your browser at <a href=\"http://localhost:8888/.netlify/functions/meta\">http://localhost:8888/.netlify/functions/meta</a>.</p>\n\n\n\n<p>Uh oh, you&#8217;ll notice that we actually get an error!</p>\n\n\n\n<p>Unfortunately, chrome-aws-lambda doesn&#8217;t &#8220;just work&#8221; when trying to run locally. While this <em>should</em> work if you deploy it as is to Netlify, it won&#8217;t do us much good if we can&#8217;t test it locally while we develop it.</p>\n\n\n\n<p>The good news though, is we can override our executable path when running locally to use our existing Chrome installation by using an environment variable!</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: chrome-aws-lambda has a <a href=\"https://github.com/alixaxel/chrome-aws-lambda/wiki/HOWTO:-Local-Development\">workaround to run projects locally</a> installing puppeteer as a dev dependency, I didn&#8217;t have much luck getting that to work myself.</p></blockquote>\n\n\n\n<p>To start, we&#8217;re going to use the popular dotenv package which make this easy to set up. In your terminal run:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn add dotenv\n# or\nnpm install dotenv</code></pre>\n\n\n\n<p>Next, inside of <code>functions/meta.js</code>, update the <code>executablePath</code> to:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>executablePath: process.env.CHROME_EXECUTABLE_PATH || await chromium.executablePath,</code></pre>\n\n\n\n<p>This is telling Puppeteer that we want to we first want to try to see if we have an environment variable set (locally) and if we don&#8217;t (production) try to find the path to Chromium.</p>\n\n\n\n<p>Now we need to set that environment variable.</p>\n\n\n\n<p>In the root of your project, create a new file called <code>.env</code> and add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>CHROME_EXECUTABLE_PATH=\"/path/to/chrome\"</code></pre>\n\n\n\n<p>Now is can be the tricky part, finding this path.</p>\n\n\n\n<p>Luckily, Chrome makes this somewhat easy. If we go to <a href=\"chrome://version/\">chrome://version/</a> in our browser, we should be able to find a field called Executable Path, which is exactly what we need!</p>\n\n\n\n<p>Here&#8217;s what this looks like for me on my Mac:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"59\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/chrome-executable-path.jpg?resize=640%2C59\" alt=\"\" class=\"wp-image-667\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/chrome-executable-path-scaled.jpg?resize=1024%2C94 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/chrome-executable-path-scaled.jpg?resize=300%2C28 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/chrome-executable-path-scaled.jpg?resize=768%2C71 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/chrome-executable-path-scaled.jpg?resize=1536%2C141 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/chrome-executable-path-scaled.jpg?resize=2048%2C189 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/chrome-executable-path-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/chrome-executable-path-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Chrome&#8217;s Executable Path</figcaption></figure>\n\n\n\n<p>So now, we can plug that value into our environment variable:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>CHROME_EXECUTABLE_PATH=\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</code></pre>\n\n\n\n<p>And if we restart our development server so that variable kicks in, we should now be able to refresh the endpoint in our browser ans see our &#8220;Ok&#8221; status again!</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: before we move on, make sure to also add <code>.env</code> to your .gitignore file as we don&#8217;t want to push this to the repository.</p></blockquote>\n\n\n\n<p>Now with our browser, we can start our Puppeteer interactions by creating a new page and navigating to our website of choice.</p>\n\n\n\n<p>Add the following below the browser constant:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const page = await browser.newPage();\n\nawait page.goto('https://spacejelly.dev/');</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: feel free to customize the URL to whatever you&#8217;d like!</p></blockquote>\n\n\n\n<p>If we try to run it, we still won&#8217;t see anything happen. Let&#8217;s fix that by finding the page title and returning it with our data.</p>\n\n\n\n<p>After we navigate to our website of choice, add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const title = await page.title();</code></pre>\n\n\n\n<p>And inside of our return statement, add the following as a new property under the <code>status</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>body: JSON.stringify({\n  status: 'Ok',\n  page: {\n    title\n  }\n})</code></pre>\n\n\n\n<p>This will tell Puppeteer to get the page&#8217;s title and then return it in our response.</p>\n\n\n\n<p>And now if we refresh the page in our browser, we should see our page title!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"89\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-page-title.jpg?resize=640%2C89\" alt=\"Endpoint response in the browser showing JSON with page title\" class=\"wp-image-668\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-page-title-scaled.jpg?resize=1024%2C142 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-page-title-scaled.jpg?resize=300%2C42 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-page-title-scaled.jpg?resize=768%2C107 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-page-title-scaled.jpg?resize=1536%2C214 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-page-title-scaled.jpg?resize=2048%2C285 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-page-title-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-page-title-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Meta function returning page title using Puppeteer</figcaption></figure>\n\n\n\n<p>We can even extend this as much as we want using the Puppeteer API. For instance, if we also wanted to grab the meta description, under the title we could add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const description = await page.$eval('meta&#91;name=\"description\"]', element =&gt; element.content);</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: there&#8217;s no native API to get the description like there is the title, so we need to find the tag and evaluate it manually</p></blockquote>\n\n\n\n<p>And like before, return it in our data:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>page: {\n  title,\n  description\n}</code></pre>\n\n\n\n<p>Where if we refresh our browser, we should now see both the title and the description!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"91\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-page-metadata.jpg?resize=640%2C91\" alt=\"Endpoint response in the browser showing JSON with page metadata\" class=\"wp-image-669\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-page-metadata-scaled.jpg?resize=1024%2C145 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-page-metadata-scaled.jpg?resize=300%2C42 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-page-metadata-scaled.jpg?resize=768%2C108 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-page-metadata-scaled.jpg?resize=1536%2C217 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-page-metadata-scaled.jpg?resize=2048%2C289 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-page-metadata-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-page-metadata-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Meta description in the endpoint response</figcaption></figure>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-puppeteer-function/commit/829ed59a6c369a1dc10975f40cf8bc54e5e21613\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 5: Using a website&#8217;s search to find content</h2>\n\n\n\n<p>The cool thing about Puppeteer is we have a ton of capabilities with it. We can interact with pages and really do a lot of things an actual human would do on a webpage.</p>\n\n\n\n<p>To test this out, let&#8217;s try an example of making a search on spacejelly.dev and grabbing the list of results.</p>\n\n\n\n<p>We&#8217;re going to start offur m by duplicating our current endpoint and creating a new one to work with.</p>\n\n\n\n<p>In your project, copy <code>functions/meta.js</code> to a new file <code>functions/results.js</code>.</p>\n\n\n\n<p>Most of the shell of the file will be the same, as we&#8217;re going to create a new browser just like we did with our metadata, only this time, instead of grabbing the title and description, we&#8217;re going to search the page!</p>\n\n\n\n<p>To start, inside <code>functions/results.js</code> replace the title and description lines with:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>await page.focus('#search-query')\nawait page.keyboard.type('api');\n\nconst results = await page.$$eval('#search-query + div a', (links) =&gt; {\n  return links.map(link =&gt; {\n    return {\n      text: link.innerText,\n      href: link.href\n    }\n  });\n});</code></pre>\n\n\n\n<p>This will focus the browser on the search input then type the query &#8220;api&#8221;, which will pop up the search results clientside.</p>\n\n\n\n<p>Once that&#8217;s available, we can find those results and evalute them, grabbing the text inside of the link and the location, storing it in a <code>results</code> variable.</p>\n\n\n\n<p>So finally, let&#8217;s return that with our data. In our return statement, add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>return {\n  statusCode: 200,\n  body: JSON.stringify({\n    status: 'Ok',\n    results\n  })\n};</code></pre>\n\n\n\n<p>And now with our development server running, if we hit the endpoint, we should see our results!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"215\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-search-results.jpg?resize=640%2C215\" alt=\"Endpoint response in the browser showing JSON with page metadata\" class=\"wp-image-670\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-search-results-scaled.jpg?resize=1024%2C344 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-search-results-scaled.jpg?resize=300%2C101 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-search-results-scaled.jpg?resize=768%2C258 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-search-results-scaled.jpg?resize=1536%2C516 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-search-results-scaled.jpg?resize=2048%2C688 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-search-results-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/api-json-response-search-results-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Search results in the response data</figcaption></figure>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-puppeteer-function/commit/e80b70a3513bc919463debf223dceab7340a0433\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 6: Deploying the functions to Netlify</h2>\n\n\n\n<p>Finally, we want to see this work on production, so let&#8217;s get it deployed to Netlify.</p>\n\n\n\n<p>Because we&#8217;re using the Netlify CLI, this is actually pretty easy to do right from our terminal!</p>\n\n\n\n<p>To start, run:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>netlify deploy</code></pre>\n\n\n\n<p>It will first ask if you want to link to an existing project or create a new one. If you&#8217;re following along, you&#8217;d likely want to create a new one. If you&#8217;re in an existing project, you&#8217;d probably want to follow along with what you already have.</p>\n\n\n\n<p>You&#8217;ll then select your Netlify account&#8217;s team and a site name. You&#8217;ll also be asked for a Publish Directory which again, if you&#8217;re following along, you can use the default directory of <code>.</code>, so just hit Enter.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"338\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/terminal-netlify-deploy.jpg?resize=640%2C338\" alt=\"\" class=\"wp-image-671\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/terminal-netlify-deploy.jpg?resize=1024%2C541 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/terminal-netlify-deploy.jpg?resize=300%2C158 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/terminal-netlify-deploy.jpg?resize=768%2C405 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/terminal-netlify-deploy.jpg?resize=1536%2C811 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/terminal-netlify-deploy.jpg?w=1792 1792w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/terminal-netlify-deploy.jpg?w=1280 1280w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Logs when deploying a preview to Netlify</figcaption></figure>\n\n\n\n<p>At this point, Netlify only deployed a Preview, which you can check out at the Website Draft URL.</p>\n\n\n\n<p>To see that, we can take that URL and append the path to the function. In my example shown in the screenshot above, that would look like:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>https:&#47;&#47;6127137f71ef564eb08211ac--my-puppeteer-function.netlify.app/.netlify/functions/meta</code></pre>\n\n\n\n<p>This should work just like it did locally!</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: I deleted my deployment, so the above link won&#8217;t actually work!</p></blockquote>\n\n\n\n<p>And if we&#8217;re ready to go, we can deploy that to production using:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>netlify deploy --prod</code></pre>\n\n\n\n<p>Where once finished, we can now see our new serverless function using Puppeteer and Chrome deployed to Netlify!</p>\n\n\n\n<h2>What can you do next?</h2>\n\n\n\n<h3>Moar Puppeteer</h3>\n\n\n\n<p>There&#8217;s a lot to try out with the Puppeteer library. If you can do it in a browser yourself, likely you can figure out a way to do it with Puppeteer.</p>\n\n\n\n<p>This makes it really great for things like tests where maybe you want to make sure a particular part of the website is working and you want to do that via an endpoint. Or if you want to do some web scraping to grab live data from a website. (Make sure to be ethical! 🧐)</p>\n\n\n\n<p><a href=\"https://pptr.dev/\">https://pptr.dev/</a></p>\n",
    "title": "How to Use Puppeteer to Automate Chrome in an API with Netlify Serverless Functions",
    "slug": "how-to-use-puppeteer-to-automate-chrome-in-an-api-with-netlify-serverless-functions"
  },
  {
    "id": "cG9zdDo2NDM=",
    "content": "\n<p>Tests are critical part of any codebase, making sure our application is behaving as expected, but how does that apply to testing APIs like Next.js serverless functions?</p>\n\n\n\n<p>While there are great tools like Postman that can make actual requests to an endpoint, how can we test the code that actually gets executed inside of the function?</p>\n\n\n\n<!--more-->\n\n\n\n<h2>What is Jest?</h2>\n\n\n\n<p><a href=\"https://jestjs.io/\">Jest</a> is a JavaScript testing framework built by the team at Facebook. It&#8217;s become popularized in the world of React and generally in the JavaScript community.</p>\n\n\n\n<p>Typically when writing tests, you need a tool to run the test. Additionally, you need to write test assertions, meaning, you need to <em>expect</em> that your code is working a certain way.</p>\n\n\n\n<p>This is where Jest comes in, handling running tests along with a wide variety of features on top.</p>\n\n\n\n<h2>What are Next.js API routes?</h2>\n\n\n\n<p><a href=\"https://nextjs.org/\">Next.js</a>, the web and React framework, supports the ability to build serverless functions which correspond to an <a href=\"https://nextjs.org/docs/api-routes/introduction\">API route</a>.</p>\n\n\n\n<p>One popular example of where you might see a serverless function is the service <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a>, where the goal is to create a function with typical input and output that allows developers to run code that&#8217;s more commonly seen serverside.</p>\n\n\n\n<h2>Why is testing serverless functions important?</h2>\n\n\n\n<p>Just like any other function, serverless functions can contain important business logic that is critical to your product&#8217;s operations.</p>\n\n\n\n<p>I like to use an example of an ecommerce store, where if you&#8217;re using an API to allow your customers to work through checkout clientside, you need to make sure your order logic and calculations are working as expected. If not, you run the risk of costing your business money!</p>\n\n\n\n<p>Because serverless functions are interfaced with as APIs, its common to see these functions tested with API tools like <a href=\"https://www.postman.com/\">Postman</a>, which <a href=\"https://www.youtube.com/watch?v=KFuaybrXCdw\">works great</a>, but because with Next.js we&#8217;re really creating an exported function, we can pull that right into a Jest test and keep it close to the rest of our code.</p>\n\n\n\n<h2>What are we going to build?</h2>\n\n\n\n<p>We&#8217;re going to work through how we can use Jest to test Next.js serverless functions.</p>\n\n\n\n<p>To start off, we&#8217;re going to start up a simple example of what a serverless function and API endpoint could look like for an ecommerce store and how we can make sure that endpoint is running calculations properly. To do that</p>\n\n\n\n<p>We&#8217;ll also take this a step further and abstract some of that logic into individual functions outside of the endpoint. While we have the option of always testing the entire input and output of the serverless function itself, being able to create focused logic and tests can help to ensure that logic will still work while other code inevitably moves around it.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: this tutorial won&#8217;t work through testing components with Jest, our focus will be on serverless functions and abstractions used by them.</p></blockquote>\n\n\n\n<h2>Step 0: Creating a new Next.js app and serverless function</h2>\n\n\n\n<p>We&#8217;re going to spin up a new Next.js application using a <a href=\"https://github.com/colbyfayock/demo-next-function-starter\">Starter I created</a> for this walkthrough that includes some UI that can help us test out our API.</p>\n\n\n\n<p>To get started, open up your terminal and run:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn create next-app my-next-jest -e https://github.com/colbyfayock/demo-next-function-starter\n# or\nnpx create-next-app my-next-jest -e https://github.com/colbyfayock/demo-next-function-starter</code></pre>\n\n\n\n<p>This will create a new project inside of the directory <code>my-next-jest</code>.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: feel free to change <code>my-next-jest</code> to the directory and project name of your choice!</p></blockquote>\n\n\n\n<p>Once everything is installed, navigate to that new directory:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd my-next-jest</code></pre>\n\n\n\n<p>Then, start up the new project by running:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn dev\n# or\nnpm run dev</code></pre>\n\n\n\n<p>Which will start up a local development server at <a href=\"http://localhost:3000/\">http://localhost:3000</a> where you can now access your new Next.js app!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"363\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/example-cart-app.jpg?resize=640%2C363\" alt=\"Demo application with two columns for testing shopping cart\" class=\"wp-image-644\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/example-cart-app-scaled.jpg?resize=1024%2C580 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/example-cart-app-scaled.jpg?resize=300%2C170 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/example-cart-app-scaled.jpg?resize=768%2C435 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/example-cart-app-scaled.jpg?resize=1536%2C870 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/example-cart-app-scaled.jpg?resize=2048%2C1160 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/example-cart-app-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/example-cart-app-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">New Next.js app with demo UI</figcaption></figure>\n\n\n\n<p>Before we move on, let&#8217;s get a bit familiar with what we just created.</p>\n\n\n\n<p>In the browser, we can see we have two columns.</p>\n\n\n\n<p>The left column includes some forms that allow you to add additional items along with another form that allows you to configure a discount and tax value.</p>\n\n\n\n<p>On the right, we have a list of the items along with a <strong>Calculate Order</strong> button where when clicked, reaches out to an API along with all the order details to calculate the subtotal and total price for the order.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"318\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-network-requests.jpg?resize=640%2C318\" alt=\"Demo app with network tab open showing network request\" class=\"wp-image-646\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-network-requests-scaled.jpg?resize=1024%2C509 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-network-requests-scaled.jpg?resize=300%2C149 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-network-requests-scaled.jpg?resize=768%2C382 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-network-requests-scaled.jpg?resize=1536%2C763 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-network-requests-scaled.jpg?resize=2048%2C1018 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-network-requests-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-network-requests-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Network tab showing request to cart endpoint</figcaption></figure>\n\n\n\n<p>While we&#8217;re not going to really get into the app itself, this cart endpoint is what we&#8217;ll use to learn how to write tests with Jest, and you can use the application to poke around and see what&#8217;s happening.</p>\n\n\n\n<p>You can find the code for this endpoint at <code>pages/api/cart.js</code> which you can get familiar with before we move on!</p>\n\n\n\n<h2>Step 1: Installing and configuring Jest</h2>\n\n\n\n<p>There isn&#8217;t much to do to get started with using Jest.</p>\n\n\n\n<p>First, let&#8217;s install Jest by running:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn add jest -D\n# or\nnpm install jest --save-dev</code></pre>\n\n\n\n<p>Next, a common way to run tests is to set up an npm script.</p>\n\n\n\n<p>Inside <code>package.json</code>, add a new property under <code>scripts</code> for our tests:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"test\": \"jest\"</code></pre>\n\n\n\n<p>At this point, we don&#8217;t have any tests, so if you run the test command, it will state that it can&#8217;t find any matches.</p>\n\n\n\n<p>Before we write our first test though, let&#8217;s do one more optional thing for convenience.</p>\n\n\n\n<p>When writing my functions, I like to use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\">import</a> syntax instead of using a require statement. The problem with that though, is if you try to use import in a Jest test, it will fail to parse it.</p>\n\n\n\n<p>To fix this, we can add a quick tweak to our <a href=\"https://babeljs.io/\">Babel</a> config.</p>\n\n\n\n<p>In the root of the project, add a new file called <code>.babelrc</code> and add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n  \"presets\": &#91;\"next/babel\"],\n  \"env\": {\n    \"test\": {\n      \"plugins\": &#91;\"@babel/plugin-transform-modules-commonjs\"]\n    }\n  }\n}</code></pre>\n\n\n\n<p>The first thing we do is add our Next.js Babel preset. By default, Next.js uses this preset and we don&#8217;t even need a configuration. But because we&#8217;re creating a new config, we need to add that back, otherwise, our config will override the Next.js config.</p>\n\n\n\n<p>We&#8217;re then creating a specific rule for our test environment, where we&#8217;re importing a plugin that will transform our code so that it can recognize how to use the import keyword.</p>\n\n\n\n<p>That means, we also need to install this plugin by running:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn add @babel/plugin-transform-modules-commonjs -D\n# or\nnpm install @babel/plugin-transform-modules-commonjs --save-dev</code></pre>\n\n\n\n<p>But now, Jest is ready for us to get started writing tests!</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-next-jest/commit/8108d67fc94148f6fc3301346a54d52088e3282f\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 2: Creating our first test with Jest</h2>\n\n\n\n<p>Before we actually write a test for our functions, let&#8217;s stub a generic test out so we can understand how this will work.</p>\n\n\n\n<p>First, let&#8217;s start off by creating our testing directory. Inside the root of the project add a new directory called <code>tests</code>.</p>\n\n\n\n<p>Because we&#8217;ll reuse this generic test for our serverless functions, let&#8217;s also organize it as such. Create a new directory <code>api</code> inside of the <code>tests</code> directory.</p>\n\n\n\n<p>Now finally, create a new file <code>cart.test.js</code> inside of <code>tests/api</code> and add the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>test('calculates order total', () =&gt; {\n  const price = 5.00;\n  const quantity = 2;\n  expect(price * quantity).toEqual(10);\n});</code></pre>\n\n\n\n<p>Before walking through what this does, let&#8217;s head over to our terminal and run:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn test\n# or\nnpm test</code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"284\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-passing-test.jpg?resize=640%2C284\" alt=\"Running Jest with one passing test\" class=\"wp-image-648\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-passing-test.jpg?resize=1024%2C454 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-passing-test.jpg?resize=300%2C133 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-passing-test.jpg?resize=768%2C340 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-passing-test.jpg?resize=1536%2C681 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-passing-test.jpg?w=1796 1796w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-passing-test.jpg?w=1280 1280w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Successfully running a test</figcaption></figure>\n\n\n\n<p>We can see that Jest went through and ran our test. Now back to our code, here&#8217;s what&#8217;s happening:</p>\n\n\n\n<ul><li>We first use the <code>test</code> function which allows us declare a new test</li><li>We pass a phrase, particularly &#8220;calculates order total&#8221; which is our way of explaining what the test should actually be testing</li><li>Inside of that function&#8217;s callback, which is where the test itself runs, we set up a few variables for our sample test</li><li>We then use the <code>expect</code> function which allows us to write an <a href=\"https://en.wikipedia.org/wiki/Test_assertion\">assertion</a> which is basically saying that whatever we pass into that <code>expect</code> function, the following chained method should describe its value</li><li>So then using <code>.toEqual</code>, we&#8217;re saying we expect that the value of our price multiplied by our quantity should equal 10</li></ul>\n\n\n\n<p>If we change any of those values, such as changing the quantity to 3, we can see that we get a failure.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"681\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-test.jpg?resize=640%2C681\" alt=\"Running Jest with a failing test\" class=\"wp-image-649\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-test.jpg?resize=962%2C1024 962w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-test.jpg?resize=282%2C300 282w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-test.jpg?resize=768%2C818 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-test.jpg?resize=1443%2C1536 1443w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-test.jpg?w=1794 1794w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-test.jpg?w=1280 1280w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Failed test run</figcaption></figure>\n\n\n\n<p>Now this is a very static example just to show how this works, but we can see what happens when this isn&#8217;t working as expected.</p>\n\n\n\n<p>As we&#8217;ll see in the next step, the goal will be not to write tests about our static calculations, but to test functions that we create as part of our application. We want to make sure that whenever we run the functions we write, that they&#8217;re working as we expect them to!</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-next-jest/commit/65b7228772cfd48fd733c2942ca3b49061d69f45\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 3: Testing Next.js serverless functions with Jest</h2>\n\n\n\n<p>Now that we have our basic test, let&#8217;s use it to actually test the serverless function in our app.</p>\n\n\n\n<p>If we open up our serverless function at <code>pages/api/cart.js</code>, we notice a few things:</p>\n\n\n\n<ul><li>The function is made up of several calculations</li><li>Those calculations are based on data that are parsed from a body</li><li>That calculated data is returned</li><li>Most importantly, the entire thing is a function that we&#8217;re exporting</li></ul>\n\n\n\n<p>The nice thing about serverless functions is what&#8217;s in its name—its a function.</p>\n\n\n\n<p>That means, we can import this function and write a test just like we would any other test.</p>\n\n\n\n<p>So to get started, let&#8217;s first update our test. Inside <code>tests/api/cart.test.js</code>, import our function at the top of the file:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import cart from '../../pages/api/cart';</code></pre>\n\n\n\n<p>We ultimately want to invoke this function. So we can start off by updating our test:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>test('calculates order total', () =&gt; {\n  cart();\n});</code></pre>\n\n\n\n<p>Now typically, we would want to save the output of an invoked function and test against that, but if we look at the function&#8217;s code, we&#8217;re not actually returning anything.</p>\n\n\n\n<p>Instead, the function uses a callback at the end, notifying the function handler that it&#8217;s completed along with the returned data and status code. Particularly, it calls the <code>status</code> method and chained <code>json</code> method off of the <code>res</code> object.</p>\n\n\n\n<p>What we can do is create a <a href=\"https://jestjs.io/docs/mock-functions\">mock</a> of those functions using Jest, which importantly, will allow us to see when that mocked function was called along with the data that it was called with.</p>\n\n\n\n<p>To start, let&#8217;s build our our two arguments:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>test('calculates order total', () =&gt; {\n  const req = {};\n\n  const res = {};\n\n  cart(req, res);\n});</code></pre>\n\n\n\n<p>Starting with our <code>req</code> object, if we look in our function, the only thing we&#8217;re using is the body property, which is where the data that&#8217;s passed to the function is stored as a string.</p>\n\n\n\n<p>Knowing that we&#8217;re passing three variables (discount, tax, and items), we can recreate that data to simulate a body getting passed to the function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const req = {\n  body: JSON.stringify({\n    discount: .2,\n    tax: .06,\n    items: &#91;\n      {\n        id: 1,\n        price: 19.99,\n        quantity: 2\n      },\n      {\n        id: 2,\n        price: 43.49,\n        quantity: 1\n      }\n    ]\n  })\n}</code></pre>\n\n\n\n<p>Notice here we&#8217;re also using <code>JSON.stringify</code> on the body, as the function expects it to be a string, which it later parses. This is how the serverless function actually works in practice via an API endpoint.</p>\n\n\n\n<p>Moving on to the <code>res</code> object, the important part happens at the end, when we&#8217;re using it to respond to the request.</p>\n\n\n\n<p>Now if we were to build it as a simple object like the above, that might look like:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const res = {\n  status: () =&gt; ({\n    json: () =&gt; {}\n  })\n}</code></pre>\n\n\n\n<p>But we have two important things to consider:</p>\n\n\n\n<ul><li>We need to use the Jest mock functionality so that we can listen to its invocation</li><li>We need to be able to reference the <code>json</code> property and by nesting it inside of mock functions, we lose the ability to do that</li></ul>\n\n\n\n<p>So instead, we&#8217;re going to create a series of mocked functions to build our <code>res</code> object:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const json = jest.fn();\n\nconst status = jest.fn(() =&gt; {\n  return {\n    json\n  }\n})\n\nconst res = {\n  status\n}</code></pre>\n\n\n\n<p>If we see we&#8217;re using <code>jest.fn()</code> as the value, which is how we can mock a function using Jest.</p>\n\n\n\n<p>Now at this point, if we try running this test, we&#8217;ll notice that it passes, but it&#8217;s not really showing the entire picture. We don&#8217;t have any assertions, so there&#8217;s nothing to actually test against!</p>\n\n\n\n<p>Like I mentioned a little earlier, when using the Jest mock functionality, we gain the ability to see when and how that function was called. This is stored in the variable that we set the mock function to.</p>\n\n\n\n<p>We can see what that looks like by adding a console log statement at the end of the test:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cart(req, res);\n\nconsole.log(json.mock);\nconsole.log(json.mock.calls);</code></pre>\n\n\n\n<p>In the above, I&#8217;m intentionally logging out two levels deep so that we can see the output of each.</p>\n\n\n\n<p>When we run our tests, we should see them both:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"667\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-mock-data-console-log.jpg?resize=640%2C667\" alt=\"Console log showing mocked data after function invocation\" class=\"wp-image-650\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-mock-data-console-log.jpg?resize=982%2C1024 982w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-mock-data-console-log.jpg?resize=288%2C300 288w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-mock-data-console-log.jpg?resize=768%2C801 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-mock-data-console-log.jpg?resize=1473%2C1536 1473w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-mock-data-console-log.jpg?w=1788 1788w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-mock-data-console-log.jpg?w=1280 1280w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Inspecting a mocked Jest function</figcaption></figure>\n\n\n\n<p>The first log shows that we get a variety of information from our mocked function including when it was called along with the results.</p>\n\n\n\n<p>But for our test, we&#8217;re more interested in what it was called with, which is what leads us to the <code>calls</code> property.</p>\n\n\n\n<p>As we can see, the value of <code>json.mock.calls</code> is an array, which represents each time our mocked function was called, which in our case was just once. So we can drill down through the two levels of an array where we can access the data that&#8217;s returned from our function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n  items: &#91;Array],\n  discount: 0.2,\n  tax: 0.06,\n  subtotal: 83.47,\n  total: 70.78255999999999\n}</code></pre>\n\n\n\n<p>We can see that we have both our <code>subtotal</code> and <code>total</code> values calculated from the input that we passed in to our function!</p>\n\n\n\n<p>So let&#8217;s write an assertion for this to make sure it doesn&#8217;t break.</p>\n\n\n\n<p>Let&#8217;s verify that we&#8217;re always getting the correct subtotal:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cart(req, res);\n\nexpect(json.mock.calls&#91;0]&#91;0].subtotal).toEqual(83.47);</code></pre>\n\n\n\n<p>If we again run our tests, we can see that it still works!</p>\n\n\n\n<p>But let&#8217;s make sure that if something <em>breaks</em> that it&#8217;s going to actually continue working.</p>\n\n\n\n<p>Inside of <code>pages/api/cart.js</code> let&#8217;s break our function by changing the <code>subtotal</code> calculation line:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const subtotal = items.reduce((subtotal, { price, quantity }) =&gt; {\n  return subtotal + price;\n}, 0);</code></pre>\n\n\n\n<p>We&#8217;re no longer taking into consideration the quantity of the items! 😱</p>\n\n\n\n<p>But now let&#8217;s run our test and see what happens:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"634\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-test-subtotal.jpg?resize=640%2C634\" alt=\"Running Jest with a failed test for the subtotal value\" class=\"wp-image-651\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-test-subtotal.jpg?resize=1024%2C1015 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-test-subtotal.jpg?resize=300%2C297 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-test-subtotal.jpg?resize=150%2C150 150w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-test-subtotal.jpg?resize=768%2C761 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-test-subtotal.jpg?resize=1536%2C1522 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-test-subtotal.jpg?w=1792 1792w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-test-subtotal.jpg?w=1280 1280w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Failing test with incorrect value</figcaption></figure>\n\n\n\n<p>Phew, we can see that our test caught our error, so we can make sure to look back at our code where we can see exactly where we have an issue!</p>\n\n\n\n<p>But rest assured, when we undo and fix our subtotal calculation, we&#8217;re running smoothly with our API working exactly as expected.</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-next-jest/commit/667b1bdbe550c67bb811a982771b8a0cefb9e4d1\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 4: Abstracting and testing serverless function logic</h2>\n\n\n\n<p>Now finally, as our code grows, we&#8217;ll eventually want to abstract it to make it a little more manageable.</p>\n\n\n\n<p>Additionally, as we abstract it and write tests for those abstractions, we&#8217;ll be able to have a little more insight into what exactly was broken when all of those tests start to fail.</p>\n\n\n\n<p>So to get started, let&#8217;s first abstract a small piece of our code. In the last step, we tested what happened when we broke the subtotal calculation, so let&#8217;s abstract that and try it again!</p>\n\n\n\n<p>To start, let&#8217;s create a new directory in the root of our project called <code>lib</code> and inside it create a file called <code>orders.js</code>.</p>\n\n\n\n<p>Next, let&#8217;s create a new function and move our subtotal calculation. So inside <code>lib/orders.js</code> add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export function calculateSubtotalFromItems(items) {\n  return items.reduce((subtotal, { price, quantity }) =&gt; {\n    return subtotal + ( price * quantity );\n  }, 0);\n}</code></pre>\n\n\n\n<p>Back inside of our serverless function, we can now use that function. At the top of <code>pages/api/cart.js</code> add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { calculateSubtotalFromItems } from '../../lib/orders';</code></pre>\n\n\n\n<p>Then we can replace our <code>subtotal</code> constant:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const subtotal = calculateSubtotalFromItems(items);</code></pre>\n\n\n\n<p>Now, if we run our tests again, we can see we&#8217;re still passing! So next, let&#8217;s write a test for that individual function.</p>\n\n\n\n<p>Back inside of the <code>tests</code> directory, add a new folder called <code>lib</code> and inside create a new file called <code>orders.test.js</code>.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: Notice how I&#8217;m creating a directory tree similar to where the API function and abstracted functions live. It&#8217;s one way of organizing your tests to make it easier to know where to expect them.</p></blockquote>\n\n\n\n<p>Now inside of <code>tests/lib/orders.tests.js</code> let&#8217;s add our new test:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { calculateSubtotalFromItems } from '../../lib/orders';\n\ntest('returns calculated subtotal from items', () =&gt; {\n  const items = &#91;\n    {\n      id: 1,\n      price: 19.99,\n      quantity: 2\n    },\n    {\n      id: 2,\n      price: 43.49,\n      quantity: 1\n    }\n  ];\n\n  expect(calculateSubtotalFromItems(items)).toEqual(83.47);\n});</code></pre>\n\n\n\n<p>In this snippet, we can see some code that&#8217;s really similar to our other test. Here we&#8217;re:</p>\n\n\n\n<ul><li>Importing our <code>calculateSubtotalFromItems</code> function</li><li>Setting up a new test</li><li>Using the same items that we found in our last test</li><li>Passing those items to our function</li><li>Expecting that the value returned is the correct subtotal</li></ul>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Tip: when writing tests, it&#8217;s good to write multiple variations of the expect statement, especially when you find a bug, to make sure you&#8217;re adding as much coverage as you can!</p></blockquote>\n\n\n\n<p>And if we run our tests, we can see that we now have two passing tests!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"284\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-passing-tests.jpg?resize=640%2C284\" alt=\"Running Jest with two passing tests\" class=\"wp-image-652\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-passing-tests.jpg?resize=1024%2C455 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-passing-tests.jpg?resize=300%2C133 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-passing-tests.jpg?resize=768%2C341 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-passing-tests.jpg?resize=1536%2C682 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-passing-tests.jpg?w=1792 1792w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-passing-tests.jpg?w=1280 1280w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Two passing tests</figcaption></figure>\n\n\n\n<p>Similar to the last step, we can also test what happens when this fails.</p>\n\n\n\n<p>If we update our abstracted function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export function calculateSubtotalFromItems(items) {\n  return items.reduce((subtotal, { price, quantity }) =&gt; {\n    return subtotal + price;\n  }, 0);\n}</code></pre>\n\n\n\n<p>And run our tests:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"734\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-tests.jpg?resize=640%2C734\" alt=\"Running Jest with two failing tests\" class=\"wp-image-653\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-tests.jpg?resize=893%2C1024 893w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-tests.jpg?resize=262%2C300 262w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-tests.jpg?resize=768%2C881 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-tests.jpg?resize=1340%2C1536 1340w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-tests.jpg?w=1786 1786w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/jest-failing-tests.jpg?w=1280 1280w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption><meta charset=\"utf-8\">Two failing tests</figcaption></figure>\n\n\n\n<p>We can see that we now have two failing tests, but because our abstracted function is failing, we now know exactly where to start looking when trying to resolve the bug!</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-next-jest/commit/ebf0eefe356bccea3d19acfe7b4e17389733916a\">Follow along with the commit!</a></p>\n\n\n\n<h2>What else can we do?</h2>\n\n\n\n<h3>Write tests for React components</h3>\n\n\n\n<p>While this tutorial doesn&#8217;t cover writing tests for React, we can use Jest along with other testing tools to make sure we&#8217;re providing coverage everywhere.</p>\n\n\n\n<p>Check out <a href=\"https://testing-library.com/docs/react-testing-library/intro/\">React Testing Library</a>!</p>\n\n\n\n<h3>Write integration tests</h3>\n\n\n\n<p>You can also write even stronger tests by testing the application inside of the browser itself.</p>\n\n\n\n<p>To do so, we can use tools like <a href=\"https://www.cypress.io/\">Cypress</a> and <a href=\"https://playwright.dev/\">Playwright</a> which will test both the front end code but also that it&#8217;s working correctly with the API.</p>\n\n\n\n<h3>Write visual tests</h3>\n\n\n\n<p>We can also take this all to another level with visual testing, which compares screenshots of the application, providing broad coverage for what the people visiting your app actually see.</p>\n\n\n\n<p>Check out my <a href=\"https://spacejelly.dev/posts/how-to-run-visual-regression-testing-on-a-next-js-app-with-cypress-and-applitools/\">tutorial here on spacejelly.dev</a> to get started!</p>\n",
    "title": "How to Test Serverless Functions with Jest & Next.js API Routes",
    "slug": "how-to-test-serverless-functions-with-jest-next-js-api-routes"
  },
  {
    "id": "cG9zdDo2MjU=",
    "content": "\n<p>NextAuth.js makes adding authentication with providers like Twitter easy, but that doesn&#8217;t mean we automatically have access to use those providers&#8217; APIs. How can we take advantage of the active session to interact with APIs like Twitter&#8217;s?</p>\n\n\n\n<!--more-->\n\n\n\n<h2>What is NextAuth.js?</h2>\n\n\n\n<p>NextAuth.js is an all-in-one solution for adding authentication to a Next.js application.</p>\n\n\n\n<p>If you followed along with my previous tutorial <a href=\"https://spacejelly.dev/posts/how-to-authenticate-next-js-apps-with-twitter-nextauth-js/#step-2-creating-a-twitter-app-and-configuring-consumer-and-client-keys\">How to Authenticate Next.js Apps with Twitter &amp; NextAuth.js</a>, we learned how we can use it to allow visitors to our applications to log in and authenticate so we can validate they&#8217;re who they say they are.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: we&#8217;re going to start off from that last tutorial, so if this is your first time using NextAuth.js, it might be a good idea to follow along there first!</p></blockquote>\n\n\n\n<h2>How can we use the Twitter API with NextAuth.js?</h2>\n\n\n\n<p>The cool thing about NextAuth.js is it makes logging in to 3rd party providers pretty easy. Because Twitter is one of those, we can allow our visitors to log into their own Twitter account where we can then use that authenticated session to interact with the Twitter API.</p>\n\n\n\n<p>That means, we can do things like allow our visitors to compose tweets, make search requests, and even update their profile.</p>\n\n\n\n<h2>What are we going to build?</h2>\n\n\n\n<p>We&#8217;re going to pick up where we left off at the end of my <a href=\"https://spacejelly.dev/posts/how-to-authenticate-next-js-apps-with-twitter-nextauth-js/\">NextAuth.js introduction tutorial</a> where were able to allow people to log in to our application with Twitter.</p>\n\n\n\n<p>Because we allowed them to log in with twitter, we can now take advantage of the Twitter API, using it to make requests straight to Twitter for getting information and interacting with Twitter itself.</p>\n\n\n\n<p>To do that, we&#8217;ll need to update what information NextAuth stores when creating a session so that we can obtain the Twitter auth tokens, then use those values inside of a serverless function to make our requests.</p>\n\n\n\n<p>If you followed along with the last tutorial, you can feel free to skip Step 0, otherwise, the first thing we&#8217;ll do is create a new application using the exact code from that walkthrough.</p>\n\n\n\n<h2>Step 0: Creating a new NextAuth.js authenticated Next.js app</h2>\n\n\n\n<p>We&#8217;re going to start off with an existing application that has NextAuth.js installed.</p>\n\n\n\n<p>To do that, we&#8217;re going to use the demo from my <a href=\"https://spacejelly.dev/posts/how-to-authenticate-next-js-apps-with-twitter-nextauth-js/\">previous NextAuth.js tutorial</a>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn create next-app my-nextauth-twitter -e https://github.com/colbyfayock/my-auth-app\n# or\nnpx create-next-app my-nextauth-twitter -e https://github.com/colbyfayock/my-auth-app</code></pre>\n\n\n\n<p>This will create a new project inside of the directory <code>my-nextauth-twitter</code>. Feel free to update that value to whatever you&#8217;d like to name this project.</p>\n\n\n\n<p>Next, navigate to that directory:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd my-nextauth-twitter</code></pre>\n\n\n\n<p>Before we start up our server, we need to add environment variables so that we can give NextAuth permission to interact with Twitter.</p>\n\n\n\n<p>Inside the root of the project, create a new file <code>.env.local</code> and add the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>TWITTER_CONSUMER_KEY=\"&#91;Your Twitter API Key]\"\nTWITTER_CONSUMER_SECRET=\"&#91;Your Twitter API Secret]\"\nNEXTAUTH_URL=\"http://localhost:3000/\"</code></pre>\n\n\n\n<p>The Twitter keys will come from you creating a new app inside of the Twitter Developer portal. While I won&#8217;t go through how to do that here, you can find <a href=\"https://spacejelly.dev/posts/how-to-authenticate-next-js-apps-with-twitter-nextauth-js/#step-2-creating-a-twitter-app-and-configuring-consumer-and-client-keys\">step by step instructions</a> over at my last tutorial.</p>\n\n\n\n<p>The <code>NEXTAUTH_URL</code> value will be wherever the application will be available. As we develop locally, you&#8217;ll want to use <code>http://localhost:3000</code>, but when deployed, you would use the URL your application is available at.</p>\n\n\n\n<p>But now, you can start up the development server:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn dev\n# or\nnpx run dev</code></pre>\n\n\n\n<p>Where you&#8217;ll see a simple new application that has a login link and if you click it and follow the prompts to log into your Twitter account, we&#8217;ll have a new authenticated session!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"194\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/log-in-with-twitter.jpg?resize=640%2C194\" alt=\"New Next.js app showing logged into Twitter account\" class=\"wp-image-628\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/log-in-with-twitter-scaled.jpg?resize=1024%2C310 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/log-in-with-twitter-scaled.jpg?resize=300%2C91 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/log-in-with-twitter-scaled.jpg?resize=768%2C232 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/log-in-with-twitter-scaled.jpg?resize=1536%2C465 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/log-in-with-twitter-scaled.jpg?resize=2048%2C620 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/log-in-with-twitter-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/log-in-with-twitter-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>New app with authenticated Twitter session</figcaption></figure>\n\n\n\n<h2>Step 1: Accessing Twitter oAuth tokens in a NextAuth.js session</h2>\n\n\n\n<p>By default, NextAuth.js doesn&#8217;t expose oAuth tokens when accessing a session via a 3rd party provider. This helps to prevent accidental leakage when dealing with sensitive values that could be used to compromise someone&#8217;s account.</p>\n\n\n\n<p>So to start, we want to make those tokens accessible so that we can then use them to make requests to the Twitter API.</p>\n\n\n\n<p>In NextAuth.js, we can define <a href=\"https://next-auth.js.org/configuration/callbacks\">callbacks</a> which allow us to tap into the authentication events and customize what gets returned.</p>\n\n\n\n<p>To start, open up <code>/pages/api/auth/[...nextauth].js</code> and add the following to the top level configuration object:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export default NextAuth({\n  ...\n  callbacks: {\n    async jwt(token, user, account = {}, profile, isNewUser) {\n      if ( account.provider &amp;&amp; !token&#91;account.provider] ) {\n        token&#91;account.provider] = {};\n      }\n\n      if ( account.accessToken ) {\n        token&#91;account.provider].accessToken = account.accessToken;\n      }\n\n      if ( account.refreshToken ) {\n        token&#91;account.provider].refreshToken = account.refreshToken;\n      }\n\n      return token;\n    },\n  }\n});</code></pre>\n\n\n\n<p>Here, we&#8217;re telling NextAuth that when we return our token object from the jwt function, we also want to include the account&#8217;s Access Token and Refresh Token.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Tip: learn more about what JWT means and stands for at <a href=\"https://jwt.io/\">jwt.io</a>.</p></blockquote>\n\n\n\n<p>Particularly, we want to store those tokens with the provider that we&#8217;re working with. While we&#8217;re only going to be working with Twitter in our instance, we want to make sure we avoid any collisions with different authenticated sessions.</p>\n\n\n\n<p>With the code above, we won&#8217;t immediately be able to see anything actually happen, as the data that we currently have available in the client is the session which does not include those tokens.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: Keep in mind, we don&#8217;t want to expose the tokens on the session as it could lead to security issues.</p></blockquote>\n\n\n\n<p>But next, we&#8217;ll learn how we can access those values inside of a serverless function where we can use those tokens to make requests to the Twitter API.</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-nextauth-twitter/commit/42715af39519c7b73c6a138cf45bbf7463e1de85\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 2: Creating a new API endpoint to access a NextAuth.js authenticated Twitter session</h2>\n\n\n\n<p>In order to make requests on behalf of our logged in visitor to the Twitter API, we&#8217;re going to create a serverless function that uses the session&#8217;s tokens to make that request and return it back to our application.</p>\n\n\n\n<p>To do this, we&#8217;re going to start off with creating the base for our search endpoint.</p>\n\n\n\n<p>Back in our code, first create a new folder under <code>pages/api</code> called <code>twitter</code> and inside that create a new file called <code>search.js</code>.</p>\n\n\n\n<p>Inside <code>pages/api/twitter/search.js</code> add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export default async (req, res) =&gt; {\n  try {\n    return res.status(200).json({\n      status: 'Ok',\n      data: &#91;]\n    });\n  } catch(e) {\n    return res.status(400).json({\n      status: e.message\n    });\n  }\n}</code></pre>\n\n\n\n<p>In the above, we&#8217;re defining an asynchronous function that will serve as our serverless function handler.</p>\n\n\n\n<p>Inside, we&#8217;re preparing a try/catch block in order to manage our API endpoint&#8217;s responses so that we can either return our search data or return an error if we receive one.</p>\n\n\n\n<p>Once we save this, we should be able to access this directly in our browser by visiting <a href=\"http://localhost:3000/api/twitter/search\">http://localhost:3000/api/twitter/search</a>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"status\":\"Ok\",\"data\":&#91;]}</code></pre>\n\n\n\n<p>We can see that we&#8217;re getting a response of &#8220;Ok&#8221; along with an empty array. From here, we&#8217;ll start finding our user&#8217;s session and using it to make a request!</p>\n\n\n\n<p>To start, we want to grab both our visitor&#8217;s session as well as their tokens that we attached in Step 1. We can use the <a href=\"https://next-auth.js.org/getting-started/client#getsession\">getSession</a> and <a href=\"https://next-auth.js.org/tutorials/securing-pages-and-api-routes#using-gettoken\">getToken</a> methods provided by NextAuth.js to help us do that.</p>\n\n\n\n<p>At the top of our <code>search.js</code> file, add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { getSession } from 'next-auth/client'\nimport { getToken } from 'next-auth/jwt';</code></pre>\n\n\n\n<p>Then at the top of the async function we defined, add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const session = await getSession({ req });\nconst token = await getToken({ req });</code></pre>\n\n\n\n<p>While we won&#8217;t be able to see any of the information contained in those values when accessing the endpoint in the browser, if we add console logs, refresh the page in the browser, then look at our terminal, we should be able to see what&#8217;s inside.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const session = await getSession({ req });\nconst token = await getToken({ req });\n\nconsole.log('session', session);\nconsole.log('token', token);</code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"56\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/null-session-token.jpg?resize=640%2C56\" alt=\"Terminal showing null token and session\" class=\"wp-image-629\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/null-session-token.jpg?resize=1024%2C90 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/null-session-token.jpg?resize=300%2C26 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/null-session-token.jpg?resize=768%2C68 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/null-session-token.jpg?resize=1536%2C135 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/null-session-token.jpg?w=1792 1792w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/null-session-token.jpg?w=1280 1280w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>null session and token from endpoint</figcaption></figure>\n\n\n\n<p>Currently we get nothing! It&#8217;s because we don&#8217;t have an active session available to access that information.</p>\n\n\n\n<p>Now, if before hitting the endpoint in your browser you logged in with Twitter, you might have notice that not only do you not see those console log statements, we get an internal sever error!</p>\n\n\n\n<p>When using the getToken with an active session, NextAuth.js requires us to use their <a href=\"https://next-auth.js.org/configuration/options#secret\">App Secret</a> option. It&#8217;s essentially a random string that we&#8217;ll use to communicate with NextAuth.js to make sure we are who we say we are.</p>\n\n\n\n<p>To start, back inside of <code>pages/api/auth/[...nextauth].js</code> we need to add a new property after our callbacks.</p>\n\n\n\n<p>Instead of supplying a string directly to this property, we&#8217;re going to use an environment variable as we don&#8217;t want to store sensitive values like that in our code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export default NextAuth({\n  ...\n  secret: process.env.NEXTAUTH_SECRET\n});</code></pre>\n\n\n\n<p>That means, inside of <code>.env.local</code>, we want to define that value:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>NEXTAUTH_SECRET=\"mySecretValue\"</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: make sure to update this value to your own custom string. You can generate a randomized value like you would with a secure password!</p></blockquote>\n\n\n\n<p>Now back inside of our search API in <code>pages/api/twitter/search.js</code>, we can use our secret. Update the <code>token</code> constant statement to:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const token = await getToken({\n  req,\n  secret: process.env.NEXTAUTH_SECRET\n});</code></pre>\n\n\n\n<p>Before we see if this works, make sure to restart your development server, as any time we make changes to environment variables, we need to restart the process.</p>\n\n\n\n<p>But now, if you log in to your Twitter account from the application then refresh the endpoint in the browser, we should now see our tokens and session in our terminal!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"571\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/active-auth-twitter-session-token.jpg?resize=640%2C571\" alt=\"Terminal showing active token and session\" class=\"wp-image-630\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/active-auth-twitter-session-token.jpg?resize=1024%2C913 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/active-auth-twitter-session-token.jpg?resize=300%2C268 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/active-auth-twitter-session-token.jpg?resize=768%2C685 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/active-auth-twitter-session-token.jpg?resize=1536%2C1370 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/active-auth-twitter-session-token.jpg?w=1792 1792w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/active-auth-twitter-session-token.jpg?w=1280 1280w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Logging the session and tokens in the terminal</figcaption></figure>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-nextauth-twitter/commit/e1b150621a1a3236bcecdedb01bc58fd7b228414\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 3: Making a search request to the Twitter API using a NextAuth.js authenticated session</h2>\n\n\n\n<p>Before we get started working with the Twitter API, let&#8217;s take a step back into our React application quick.</p>\n\n\n\n<p>In order to actually use our search endpoint, we&#8217;re going to want to send a query to that endpoint and see those results. While we could use a tool like <a href=\"https://www.postman.com/\">Postman</a> to test that, let&#8217;s add a quick search UI to our application.</p>\n\n\n\n<p>To start, we&#8217;re going to use React state to manage our search results. At the top of <code>pages/index.js</code> import React&#8217;s <code>useState</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { useState } from 'react';</code></pre>\n\n\n\n<p>Next, add the following above the component return statement:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const &#91;statuses, setStatuses] = useState();\n\nasync function handleOnSearchSubmit(e) {\n  e.preventDefault();\n\n  const formData = new FormData(e.currentTarget);\n  const query = formData.get('query');\n\n  const results = await fetch('/api/twitter/search', {\n    method: 'POST',\n    body: JSON.stringify({\n      query\n    })\n  }).then(res =&gt; res.json());\n\n  setStatuses(results.data);\n}</code></pre>\n\n\n\n<p>Then, somewhere inside of the component return statement, add the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form onSubmit={handleOnSearchSubmit}&gt;\n  &lt;h2&gt;Search&lt;/h2&gt;\n  &lt;input type=\"search\" name=\"query\" /&gt;\n  &lt;button&gt;Search&lt;/button&gt;\n&lt;/form&gt;\n\n{statuses &amp;&amp; (\n  &lt;ul&gt;\n    { statuses.map(({ id, text, user }) =&gt; {\n      return (\n        &lt;li key={id}&gt;\n          &lt;p&gt;{ text }&lt;/p&gt;\n          &lt;p&gt;By { user.name } ({ user.screen_name })&lt;/p&gt;\n        &lt;/li&gt;\n      );\n    })}\n  &lt;/ul&gt;\n)}</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: if you want to follow along, I&#8217;m replacing the content inside of the grid <code>div</code> with our new form.</p></blockquote>\n\n\n\n<p>In these several snippets of code, we&#8217;re:</p>\n\n\n\n<ul><li>Creating a new React state which we&#8217;ll use to store our search results</li><li>We&#8217;re creating a function that will trigger any time we submit a form</li><li>In that function, we&#8217;re first using our form to grab the query form field value</li><li>With that value, we make a request to our endpoint by sending a payload with our query value</li><li>When that request finishes, we set our results React state</li><li>And finally we added a form that will allow us to trigger a search request and display a list of our results</li></ul>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"193\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-search-form.jpg?resize=640%2C193\" alt=\"App with search form\" class=\"wp-image-631\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-search-form-scaled.jpg?resize=1024%2C309 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-search-form-scaled.jpg?resize=300%2C90 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-search-form-scaled.jpg?resize=768%2C231 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-search-form-scaled.jpg?resize=1536%2C463 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-search-form-scaled.jpg?resize=2048%2C617 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-search-form-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-search-form-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Search form in app</figcaption></figure>\n\n\n\n<p>At this point, if we try to submit the form, nothing will happen, as we&#8217;re not using the value, so let&#8217;s head back to the app and do something with it.</p>\n\n\n\n<p>To start, let&#8217;s grab that query value.</p>\n\n\n\n<p>Back inside of <code>pages/api/twitter/search.js</code> at the top of the function add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const body = JSON.parse(req.body);\nconst { query } = body;</code></pre>\n\n\n\n<p>Here, we&#8217;re attempting to parse the body that we&#8217;re sending to the endpoint so that we can read it as JSON, where once we have it as an object, we can destructure our query value.</p>\n\n\n\n<p>If we add a console log below and try to submit a search test again:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>console.log(query);</code></pre>\n\n\n\n<p>We should see that value in our terminal!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"86\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/terminal-query-value.jpg?resize=640%2C86\" alt=\"Terminal showing search query value\" class=\"wp-image-632\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/terminal-query-value.jpg?resize=1024%2C138 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/terminal-query-value.jpg?resize=300%2C41 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/terminal-query-value.jpg?resize=768%2C104 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/terminal-query-value.jpg?resize=1536%2C207 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/terminal-query-value.jpg?w=1792 1792w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/terminal-query-value.jpg?w=1280 1280w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Search query value logged in terminal</figcaption></figure>\n\n\n\n<p>Now we can use that value to interact with the Twitter API.</p>\n\n\n\n<p>In order to do that, we could interact directly with the API, or we could use a handy library that makes it easy for us.</p>\n\n\n\n<p>We&#8217;re going to use the npm library <a href=\"https://www.npmjs.com/package/twitter-lite\">twitter-lite</a>.</p>\n\n\n\n<p>Inside of your terminal, we can install it by running:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn add twitter-lite</code></pre>\n\n\n\n<p>Once complete, you can start back up your development server.</p>\n\n\n\n<p>Inside <code>pages/api/twitter/search.js</code> we want to first import that library, so at the top, add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import Twitter from 'twitter-lite';</code></pre>\n\n\n\n<p>And now inside our function, under our session and token constants, add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const client = new Twitter({\n  subdomain: 'api',\n  consumer_key: process.env.TWITTER_CONSUMER_KEY,\n  consumer_secret: process.env.TWITTER_CONSUMER_SECRET,\n  access_token_key: token.twitter.accessToken,\n  access_token_secret: token.twitter.refreshToken\n});</code></pre>\n\n\n\n<p>This will create a new client using our existing environment variables along with the Access Token and Refresh Token we&#8217;re getting freom our NextAuth.js session which will allow use to make requests directly to Twitter.</p>\n\n\n\n<p>So next, inside of our try/catch block, we can add our request:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>try {\n  const results = await client.get('search/tweets', {\n    q: query\n  });\n  return res.status(200).json({\n    status: 'Ok',\n    data: results.statuses\n  });\n} catch(e) {\n  ...</code></pre>\n\n\n\n<p>Now, if we go back to our application in the browser and try to submit another search, we can see that we now get a list of results right in our UI!</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: if you&#8217;re following along, you&#8217;ll notice it pushes all the content around which makes it hard to see. Feel free to update the CSS styles or remove the <code>container</code> class from the Home component&#8217;s parent div which will make it easier to see!</p></blockquote>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"328\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-showing-twitter-search-results.jpg?resize=640%2C328\" alt=\"App with search form and results\" class=\"wp-image-633\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-showing-twitter-search-results-scaled.jpg?resize=1024%2C524 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-showing-twitter-search-results-scaled.jpg?resize=300%2C154 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-showing-twitter-search-results-scaled.jpg?resize=768%2C393 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-showing-twitter-search-results-scaled.jpg?resize=1536%2C786 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-showing-twitter-search-results-scaled.jpg?resize=2048%2C1049 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-showing-twitter-search-results-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/08/app-showing-twitter-search-results-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Twitter search results for &#8220;colby fayock&#8221;</figcaption></figure>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-nextauth-twitter/commit/8f3d54d1210ab5949125e381c12fcb9a30ef39d8\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 4: Composing and posting a Tweet in a serverless function using Twitter Lite</h2>\n\n\n\n<p>We can take this a step further! Let&#8217;s set up a form so someone can compose and post a Tweet from our application.</p>\n\n\n\n<p>To start off, we&#8217;re going to simply duplicate our existing search endpoint as a lot of what we&#8217;re going to be doing is exactly the same.</p>\n\n\n\n<p>First, make a copy of <code>pages/api/twitter/search.js</code> and name it <code>pages/api/twitter/tweet.js</code>.</p>\n\n\n\n<p>We have 3 main differences between this endpoint and our original:</p>\n\n\n\n<ul><li>We want to change the name <code>query</code> to <code>status</code></li><li>We want to POST to the <code>statuses/update</code> endpoint</li><li>We want to change our response, as we won&#8217;t be returning a list of statuses</li></ul>\n\n\n\n<p>So let&#8217;s first update the variable we&#8217;ll be parsing:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const { status } = body;</code></pre>\n\n\n\n<p>Then update the request:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const results = await client.post('statuses/update', {\n  status\n});</code></pre>\n\n\n\n<p>And finally update the return statement:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>return res.status(200).json({\n  status: 'Ok'\n});</code></pre>\n\n\n\n<p>Because we&#8217;re not requesting any data, we don&#8217;t need to return anything, we just need to know that the request worked.</p>\n\n\n\n<p>Now similar to Step 3, let&#8217;s add some UI to test this out.</p>\n\n\n\n<p>First, we can add a new form above our Search form:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form onSubmit={handleOnTweetSubmit}&gt;\n  &lt;h2&gt;Tweet&lt;/h2&gt;\n  &lt;textarea name=\"status\" /&gt;\n  &lt;button&gt;Tweet&lt;/button&gt;\n&lt;/form&gt;</code></pre>\n\n\n\n<p>And to make sure we are actually doing something on form submission, let&#8217;s add a function above the component return statement:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>async function handleOnTweetSubmit(e) {\n  e.preventDefault();\n\n  const formData = new FormData(e.currentTarget);\n  const status = formData.get('status');\n\n  const results = await fetch('/api/twitter/tweet', {\n    method: 'POST',\n    body: JSON.stringify({\n      status\n    })\n  }).then(res =&gt; res.json());\n\n  alert('Success!')\n}</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: using the alert function to send a message probably isn&#8217;t the best UX, but we&#8217;re just using it here to make sure it works!</p></blockquote>\n\n\n\n<p>Once saved, head back over to the app, write a Tweet, and submit the form, and we can see that our Tweet gets posted on our account!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"286\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/successful-tweet-from-form.jpg?resize=640%2C286\" alt=\"Success alert after posting new Tweet from form\" class=\"wp-image-634\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/successful-tweet-from-form-scaled.jpg?resize=1024%2C457 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/successful-tweet-from-form-scaled.jpg?resize=300%2C134 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/successful-tweet-from-form-scaled.jpg?resize=768%2C343 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/successful-tweet-from-form-scaled.jpg?resize=1536%2C686 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/successful-tweet-from-form-scaled.jpg?resize=2048%2C915 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/successful-tweet-from-form-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/08/successful-tweet-from-form-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Sending a test Tweet from the app</figcaption></figure>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-nextauth-twitter/commit/aa051b5a058ebae8e78c526a5cdfd1996b5b5a2c\">Follow along with the commit!</a></p>\n\n\n\n<h2>What else can we do?</h2>\n\n\n\n<h3>Add the ability to post media with a Tweet</h3>\n\n\n\n<p>When posting a Tweet, we can&#8217;t simply attach an image or video. Instead, we need to create a new media object through Twitter and attach that to the Tweet.</p>\n\n\n\n<p>Learn how to <a href=\"https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/overview\">upload media with the Twitter API</a>.</p>\n\n\n\n<h3>Other Twitter endpoints</h3>\n\n\n\n<p>The cool thing is we can extend this to really any endpoint available within the Twitter API via Twitter Lite. It gives us a lot of options for what we can do with our applications.</p>\n\n\n\n<p>Check out <a href=\"https://developer.twitter.com/en/docs/twitter-api/v1\">Twitter API v1.1</a> and the <a href=\"https://github.com/draftbit/twitter-lite\">Twitter Lite documentation</a> for more ideas!</p>\n\n\n\n<h3>Other provider APIs</h3>\n\n\n\n<p>We can take this concept and use it for other NextAuth.js providers, such as making requests to the GitHub or Spotify APIs.</p>\n\n\n\n<p>Check out the available <a href=\"https://next-auth.js.org/configuration/providers\">NextAuth.js providers</a>.</p>\n",
    "title": "How to Make Twitter API Requests with NextAuth.js Session Tokens",
    "slug": "how-to-make-twitter-api-requests-with-nextauth-js-session-tokens"
  },
  {
    "id": "cG9zdDo2MTA=",
    "content": "\n<p>The web (mostly) revolves around interactions, where people might be trying to accomplish a task or check in on something. As developers, we need a way to hook into these interactions regardless of the tools we use. While React gives us a lot of help with this out-of-the-box, how can we break free to leverage the full APIs of browsers?</p>\n\n\n\n<!--more-->\n\n\n\n<h2>What are Event Listeners in the browser?</h2>\n\n\n\n<p>Most of those interactions trigger &#8220;events&#8221; where in JavaScript, we have the ability to listen for those events, and subsequently do <em>something</em> whenever we detect that one of those events occurred.</p>\n\n\n\n<p>A super common event is listening for a click. Maybe you have a button that you want to do something special. Or maybe you&#8217;re listening for the content of an input to change. When that happens, you could be validating that input to make sure it&#8217;s well, valid.</p>\n\n\n\n<p>To do this in JavaScript, we generally select the element we want to listen &#8220;on&#8221; and what event we want to listen for. While it <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events\">involves much more than that</a>, generally that listener could look like:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>document.querySelector('#my-button').addEventListener('click', () =&gt; {});\ndocument.querySelector('#my-other-button').addEventListener('mouseover', () =&gt; {});\nwindow.addEventListener('resize', () =&gt; {});</code></pre>\n\n\n\n<h2>How do Event Listeners work in React?</h2>\n\n\n\n<p>The issue is, while React <a href=\"https://reactjs.org/docs/events.html\">supports a variety of events natively</a>, sometimes it just can&#8217;t accomplish your goal, and you need to find a way to listen for the events manually.</p>\n\n\n\n<p>Luckily, we have a variety of tools that can help us manage our events without completely breaking free of React.</p>\n\n\n\n<p>For finding direct access to DOM nodes, we can take advantage of <a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">refs</a> that let us use APIs native to the browser right with that element.</p>\n\n\n\n<p>Or the <a href=\"https://reactjs.org/docs/hooks-effect.html\">useEffect hook</a>, which will allow us to run some code after the component renders inside of the browser, allowing us to add our event listeners and such that might not make sense in the React lifecycle.</p>\n\n\n\n<h2>What are we going to build?</h2>\n\n\n\n<p>In this walkthrough, we&#8217;re going to learn how to create browser event listeners while working inside of a React app.</p>\n\n\n\n<p>To do that, we&#8217;ll start off with a basic Next.js app that I put together just to get up and running with an example of search with autocomplete using The Star Wars API (SWAPI).</p>\n\n\n\n<p>Once the project is set up, we&#8217;ll dig into how we can hook into native browser events to do things like focus on a search input on page load and listen to keyboard events to navigate a list of autocomplete suggestions.</p>\n\n\n\n<h2>Step 0: Starting a new React app with a Next.js demo project</h2>\n\n\n\n<p>Let&#8217;s get started by creating our application!</p>\n\n\n\n<p>We&#8217;re going to use this <a href=\"https://github.com/colbyfayock/my-swapi-search\">demo application</a> which includes an example of adding autocomplete to a search input for the Star Wars API.</p>\n\n\n\n<p>To get that up and running, in your terminal run:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn create next-app -e https://github.com/colbyfayock/my-swapi-search my-search-events\n# or\nnpm create-next-app -e https://github.com/colbyfayock/my-swapi-search my-search-events</code></pre>\n\n\n\n<p>This will go through and clone the starter project and install all of the dependencies.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: feel free to change <code>my-search-events</code> to the directory and project name of your choice!</p></blockquote>\n\n\n\n<p>Once everything is installed, navigate to that new directory:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd my-search-events</code></pre>\n\n\n\n<p>Then, start up the new project by running:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn dev\n# or\nnpm run dev</code></pre>\n\n\n\n<p>Which will start up a local development server at <a href=\"http://localhost:3000/\">http://localhost:3000</a> where you can now access your new Next.js app!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"271\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/swapi-search-events-app.jpg?resize=640%2C271\" alt=\"Web app with title SWAPI People Search and search input\" class=\"wp-image-611\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/swapi-search-events-app-scaled.jpg?resize=1024%2C434 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/swapi-search-events-app-scaled.jpg?resize=300%2C127 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/swapi-search-events-app-scaled.jpg?resize=768%2C325 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/swapi-search-events-app-scaled.jpg?resize=1536%2C651 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/swapi-search-events-app-scaled.jpg?resize=2048%2C867 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/swapi-search-events-app-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/swapi-search-events-app-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>SWAPI People Search application</figcaption></figure>\n\n\n\n<h2>Step 1: Automatically focusing on a search input on page load in React</h2>\n\n\n\n<p>For our first example, we&#8217;re going to directly interact with DOM nodes from inside of React.</p>\n\n\n\n<p>To do that, we&#8217;ll use <a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">refs</a>, which is a sort of &#8220;escape hatch&#8221; provided by React to let us connect to the elements we need to work with.</p>\n\n\n\n<p>At the top of <code>pages/index.js</code> update the React import statement to include <code>useRef</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { useState, useRef } from 'react';</code></pre>\n\n\n\n<p>We then want to create a new ref. At the top of the component in the same <code>index.js</code> file, add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const inputRef = useRef();</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: if you&#8217;re following along with the SWAPI example, it&#8217;s a good idea to put the ref below <code>hasResults</code> to avoid ordering issues later.</p></blockquote>\n\n\n\n<p>Then we&#8217;ll want to associate our ref with the element.</p>\n\n\n\n<p>Scroll down to the form on the page, where inside there will be an input with the name of &#8220;query&#8221;.</p>\n\n\n\n<p>On that input, we&#8217;ll add our ref:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;input ref={inputRef}</code></pre>\n\n\n\n<p>At this point, <strong>after React renders for the first time</strong>, you&#8217;ll then have access to that input&#8217;s node right from inside of React.</p>\n\n\n\n<p>This is an important distinction, as you&#8217;ll notice it won&#8217;t be available if you try to access it during that first render.</p>\n\n\n\n<p>But that means, in order to access it, we&#8217;ll need to treat it like an effect, where we&#8217;ll use the <code>useEffect</code> hook.</p>\n\n\n\n<p>To start, we&#8217;ll import <code>useEffect</code> by updating our import statement again:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { useState, useRef, useEffect } from 'react';</code></pre>\n\n\n\n<p>Next, after our <code>inputRef</code> statement, add the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>useEffect(() =&gt; {\n  console.log(inputRef.current);\n}, &#91;]);</code></pre>\n\n\n\n<p>This will run the function inside of the <code>useEffect</code> hook once after the first render of the component. It will only run once because we&#8217;re passing in an empty array, which tells React it should run, but it doesn&#8217;t have any dependencies we want to listen to changes on.</p>\n\n\n\n<p>If we look inside of our browser and look at the dev tools, we should now see that we&#8217;re logging out our input element.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"233\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/chrom-devtools-showing-input.jpg?resize=640%2C233\" alt=\"Hovering over input element in chrome devtools showing in browser\" class=\"wp-image-612\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/chrom-devtools-showing-input-scaled.jpg?resize=1024%2C373 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/chrom-devtools-showing-input-scaled.jpg?resize=300%2C109 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/chrom-devtools-showing-input-scaled.jpg?resize=768%2C280 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/chrom-devtools-showing-input-scaled.jpg?resize=1536%2C559 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/chrom-devtools-showing-input-scaled.jpg?resize=2048%2C746 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/chrom-devtools-showing-input-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/chrom-devtools-showing-input-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Dev tools showing an input logged to the console</figcaption></figure>\n\n\n\n<p>That means, we have access to our native DOM APIs!</p>\n\n\n\n<p>So now, instead of the <code>console.log</code> statement, add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>inputRef.current.focus();</code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"186\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-input-focused.jpg?resize=640%2C186\" alt=\"Focused search input\" class=\"wp-image-613\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-input-focused-scaled.jpg?resize=1024%2C298 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-input-focused-scaled.jpg?resize=300%2C87 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-input-focused-scaled.jpg?resize=768%2C223 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-input-focused-scaled.jpg?resize=1536%2C446 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-input-focused-scaled.jpg?resize=2048%2C595 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-input-focused-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-input-focused-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Focused search input</figcaption></figure>\n\n\n\n<p>And if you reload the page, as soon is it loads, the input will be focused!</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-search-events/commit/c49d6fd86afa2fd791d13078f3e7e6dcaf4fb2e9\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 2: Listening for keyboard events in React</h2>\n\n\n\n<p>Taking this a step further, we may want to broadly listen for events, such as someone using a keyboard or resizing their browser window, where we wouldn&#8217;t have access to a ref that would make sense in that case.</p>\n\n\n\n<p>Similar to Step 1, we can still take advantage of <code>useEffect</code> to run things in the browser, such as adding event listeners.</p>\n\n\n\n<p>Under the <code>useEffect</code> from Step 1, add the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>useEffect(() =&gt; {\n  document.body.addEventListener('keydown', onKeyDown);\n}, &#91;]);\n\nfunction onKeyDown(event) {\n  console.log(event);\n}</code></pre>\n\n\n\n<p>In the above, we&#8217;re adding a new event listener so that whenever someone uses their keyboard, it fires that new function. We&#8217;re also logging the event so we can take a look at what that looks like.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"248\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/swapi-search-autocomplete-web-console-event-log.jpg?resize=640%2C248\" alt=\"Web console showing keyboard event from search autocomplete\" class=\"wp-image-614\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/swapi-search-autocomplete-web-console-event-log-scaled.jpg?resize=1024%2C396 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/swapi-search-autocomplete-web-console-event-log-scaled.jpg?resize=300%2C116 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/swapi-search-autocomplete-web-console-event-log-scaled.jpg?resize=768%2C297 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/swapi-search-autocomplete-web-console-event-log-scaled.jpg?resize=1536%2C593 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/swapi-search-autocomplete-web-console-event-log-scaled.jpg?resize=2048%2C791 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/swapi-search-autocomplete-web-console-event-log-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/swapi-search-autocomplete-web-console-event-log-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Keyboard event logged to the web console</figcaption></figure>\n\n\n\n<p>One thing we need to consider when adding event listeners in React is also making sure we remove them when we&#8217;re finished with them.</p>\n\n\n\n<p>When using the <code>useEffect</code> hook, we&#8217;re adding that event listener when the component mounts, but when it unmounts, such as if you navigate to a different page, that event listener is still hanging out waiting for events.</p>\n\n\n\n<p>So to clean that up, we can return a new function from our <code>useEffect</code> function which removes that event listener:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>useEffect(() =&gt; {\n  document.body.addEventListener('keydown', onKeyDown);\n  return () =&gt; {\n    document.body.removeEventListener('keydown', onKeyDown);\n  }\n}, &#91;]);</code></pre>\n\n\n\n<p>But if you notice inside of the event being logged to the console, we can even see what key was pushed, meaning, we can listen specifically for the up and down arrows, which we&#8217;ll do in the next step.</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-search-events/commit/3c900e1bd58e9e644c6f3e3176bcc34a2654d6ab\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 3: Firing code when triggered by specific keys</h2>\n\n\n\n<p>Inside of the event that we&#8217;re logging to the console, we&#8217;ll see that there&#8217;s a property called <code>key</code> that will tell us exactly what we press.</p>\n\n\n\n<p>In our case, we want to listen for two events:</p>\n\n\n\n<ul><li>ArrowUp</li><li>ArrowDown</li></ul>\n\n\n\n<p>Which both do what they sound like.</p>\n\n\n\n<p>To start off, let&#8217;s first determine when one of those keys were pressed.</p>\n\n\n\n<p>Inside of the <code>onKeyDown</code> function, add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>function onKeyDown(event) {\n  const isUp = event.key === 'ArrowUp';\n  const isDown = event.key === 'ArrowDown';\n\n  if ( isUp ) {\n    console.log('Going up!')\n  }\n\n  if ( isDown ) {\n    console.log('Going down!')\n  }\n}</code></pre>\n\n\n\n<p>We&#8217;re checking out our event&#8217;s key to see if it matches one of those values, and assigning a constant to make it easier to read.</p>\n\n\n\n<p>If we now open up our browser and try to press up or down, we should now see our message!</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"640\" height=\"181\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/keyboard-events-log-up-down.gif?resize=640%2C181\" alt=\"Web console showing up and down messages from keyboard events\" class=\"wp-image-619\" data-recalc-dims=\"1\"/><figcaption>Detecting up and down arrow keys</figcaption></figure>\n\n\n\n<p>Now one issue with this, is this can happen at any time. If we refresh the page and push up or down, it logs out that statement. We only want this to happen if we actually have search results.</p>\n\n\n\n<p>To fix this, let&#8217;s head back to our <code>useEffect</code> from Step 2. We&#8217;re currently passing an empty array (<code>[]</code>) as the dependencies to our effect, but we can also pass in a variable, which will tell React that whenever that changes in a new render, we want to also fire the effect hook.</p>\n\n\n\n<p>We also already have an existing <code>hasResults</code> variable which we can use as this dependency.</p>\n\n\n\n<p>Update the instance of <code>useEffect</code> to the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>useEffect(() =&gt; {\n  if ( hasResults ) {\n    document.body.addEventListener('keydown', onKeyDown);\n  } else {\n    document.body.removeEventListener('keydown', onKeyDown);\n  }\n  return () =&gt; {\n    document.body.removeEventListener('keydown', onKeyDown);\n  }\n}, &#91;hasResults]);</code></pre>\n\n\n\n<p>If you notice we have a few changes:</p>\n\n\n\n<ul><li>We&#8217;re adding our <code>hasResults</code> variable as a dependency</li><li>Before adding our event listener, we make sure we have results</li><li>If we don&#8217;t have results we now remove the event listener</li></ul>\n\n\n\n<p>We&#8217;re adding that additional removal of the event listener as yet another way to clean up our resources when we&#8217;re not using them. While this is a simple example, the more listeners you have, the more resources the browser you&#8217;ll use, which will impact performance.</p>\n\n\n\n<p>But now, you&#8217;ll see that we will no longer see our &#8220;Going up!&#8221; and &#8220;Going down!&#8221; messages unless we specifically focused on the input and started typing a search that yields a result.</p>\n\n\n\n<p>Next, we&#8217;ll learn how to use these events to actually navigate a list of results.</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-search-events/commit/c2c669a05a8feae281755f95c83197348a11ce28\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 4: Using arrow keys to navigate through a list of search results</h2>\n\n\n\n<p>Now that we can determine exactly what keys are pressed, we can now use that information to let our visitors navigate results.</p>\n\n\n\n<p>To do that, we&#8217;re going to take advantage of the focus state in the browser. It&#8217;s the same state that you&#8217;ll see if you use the tab key to navigate around the application.</p>\n\n\n\n<p>We can actually find out programmatically what element is focused. If you open up your developer tools, click into the search input, then simply run the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>document.activeElement</code></pre>\n\n\n\n<p>You&#8217;ll see that it shows the search input!</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: when clicking away from the input to the developer tools to run the command, it will appear as if the browser has lost focus, but that&#8217;s only because you are now focused on the console.</p></blockquote>\n\n\n\n<p>So to start, whenever we have results, we&#8217;re focused on the input, and someone presses down, let&#8217;s focus on the first element.</p>\n\n\n\n<p>To start, let&#8217;s check to see if our input is focused. Under the <code>isUp</code> and <code>isDown</code> add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const inputIsFocused = document.activeElement === inputRef.current;</code></pre>\n\n\n\n<p>We&#8217;re able to use the same <code>inputRef</code> as earlier to check if our active element is in fact our input.</p>\n\n\n\n<p>Before we can focus on one of our elements, we also need to have access to those elements. We&#8217;ll use a similar method to our input by adding a ref.</p>\n\n\n\n<p>Under our <code>inputRef</code> at the top of the component add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const resultsRef = useRef();</code></pre>\n\n\n\n<p>Then on the unordered list (<code>ul</code>) with a class of <code>people</code> add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul ref={resultsRef}</code></pre>\n\n\n\n<p>We can&#8217;t predict how many results we&#8217;ll have, so it&#8217;s not reasonable to try to add a ref to each one. Instead, we can add a ref to the parent that includes all of the results, which we can use along with the index to grab that result.</p>\n\n\n\n<p>Back inside of <code>onKeyDown</code>, we want to access these results.</p>\n\n\n\n<p>Under our constants at the top of the function like <code>inputIsFocused</code> add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const resultsItems = Array.from(resultsRef.current.children)</code></pre>\n\n\n\n<p>When accessing our unordered list, we can use the <code>children</code> property to get all elements nested inside that element. This will return a Node list.</p>\n\n\n\n<p>Then, to have an easier way to access our elements programmatically, we&#8217;ll transform that into a standard array by wrapping it in <code>Array.from</code>.</p>\n\n\n\n<p>But now, inside of the <code>isDown</code> if statement, add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if ( isDown ) {\n  console.log('Going down!')\n  resultsItems&#91;0].querySelector('a').focus();\n}</code></pre>\n\n\n\n<p>We&#8217;re selecting the first item of the results, looking for the anchor tag which we need to find to add the correct focus, then using the <code>focus</code> method to add our focus.</p>\n\n\n\n<p>If we open up our browser, type a few characters for some results (like <code>sky</code>) and hit down, we should see we highlight our first result!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"175\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-autocomplete-highlighted-result.jpg?resize=640%2C175\" alt=\"Search autocomplete with first result highlighted\" class=\"wp-image-615\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-autocomplete-highlighted-result-scaled.jpg?resize=1024%2C280 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-autocomplete-highlighted-result-scaled.jpg?resize=300%2C82 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-autocomplete-highlighted-result-scaled.jpg?resize=768%2C210 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-autocomplete-highlighted-result-scaled.jpg?resize=1536%2C421 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-autocomplete-highlighted-result-scaled.jpg?resize=2048%2C561 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-autocomplete-highlighted-result-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-autocomplete-highlighted-result-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Highlighted first search result</figcaption></figure>\n\n\n\n<p>Now if we try to hit down again, nothing will happen, but now we can take this a step further.</p>\n\n\n\n<p>We only want to select the first result if we&#8217;re actively focused on our input, so let&#8217;s update to a new if statement:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if ( inputIsFocused ) {\n  resultsItems&#91;0].querySelector('a').focus();\n}</code></pre>\n\n\n\n<p>Once we hit that first item, we want to look for the next item to use to focus. To do that, we need to find its index.</p>\n\n\n\n<p>Up above our if statements and below <code>resultsItems</code>, add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const activeResultIndex = resultsItems.findIndex(child =&gt; {\n  return child.querySelector('a') === document.activeElement;\n});</code></pre>\n\n\n\n<p>Here, we&#8217;re looking through all of our results, looking for each of their anchor tags, and seeing if they are the active element. Similar to how we checked if the input was focused before!</p>\n\n\n\n<p>This will give us a number value 0 or greater if it&#8217;s found and -1 if it&#8217;s not found, which will be the index of the item in the array.</p>\n\n\n\n<p>Now, let&#8217;s add an <code>if else</code> statement after our new <code>if</code> statment:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if ( inputIsFocused ) {\n  resultsItems&#91;0].querySelector('a').focus();\n} else if ( resultsItems&#91;activeResultIndex - 1] ) {\n  resultsItems&#91;activeResultIndex - 1].querySelector('a').focus();\n}</code></pre>\n\n\n\n<p>We&#8217;re using our index, checking if the <strong>next</strong> index exists (essentially not -1), and if it does exist, using it to update what we&#8217;re focused on.</p>\n\n\n\n<p>If we head back over to the browser, find some kind of search that shows a few results (like <code>sk</code>) and hit down multiple times, we can see that it now goes through the list!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"213\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-autocomplete-last-result-highlighted.jpg?resize=640%2C213\" alt=\"Search autocomplete with last result highlighted\" class=\"wp-image-616\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-autocomplete-last-result-highlighted-scaled.jpg?resize=1024%2C340 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-autocomplete-last-result-highlighted-scaled.jpg?resize=300%2C100 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-autocomplete-last-result-highlighted-scaled.jpg?resize=768%2C255 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-autocomplete-last-result-highlighted-scaled.jpg?resize=1536%2C511 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-autocomplete-last-result-highlighted-scaled.jpg?resize=2048%2C681 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-autocomplete-last-result-highlighted-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-autocomplete-last-result-highlighted-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Last result highlighted from focus state</figcaption></figure>\n\n\n\n<p>But if you try to hit down after that, you&#8217;ll notice again, it does nothing. We need to make sure it loops back to our input.</p>\n\n\n\n<p>Now we can add an <code>else</code> statement and if none of our other conditional statements match, we&#8217;ll make sure to go right back to the input.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if ( inputIsFocused ) {\n  resultsItems&#91;0].querySelector('a').focus();\n} else if ( resultsItems&#91;activeResultIndex + 1] ) {\n  resultsItems&#91;activeResultIndex + 1].querySelector('a').focus();\n} else {\n  inputRef.current.focus();\n}</code></pre>\n\n\n\n<p>We&#8217;re using the same thing from Step 1 to focus back on our input.</p>\n\n\n\n<p>And now, we can keep hitting down as many times as we want, and it cycles through our results back to the search input!</p>\n\n\n\n<p>Finally, we&#8217;re only listening to the down arrow, we want to do the same for the up arrow.</p>\n\n\n\n<p>Luckily, the logic is basically the same, so let&#8217;s update that to:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if ( isUp ) {\n  console.log('Going up!');\n  if ( inputIsFocused ) {\n    resultsItems&#91;resultsItems.length - 1].querySelector('a').focus();\n  } else if ( resultsItems&#91;activeResultIndex - 1] ) {\n    resultsItems&#91;activeResultIndex - 1].querySelector('a').focus();\n  } else {\n    inputRef.current.focus();\n  }\n}</code></pre>\n\n\n\n<p>There are two key differences in the above.</p>\n\n\n\n<p>First, if our input is focused, we don&#8217;t want to go to the first item, we want to go to the last, so we use the length of the array and subtract one, to get that last item to focus on.</p>\n\n\n\n<p>Additionally, we don&#8217;t want to find the next item in our list, we want to find the previous, so we subtract 1 from our active result index instead of adding 1.</p>\n\n\n\n<p>But now, if you reload the browser, you can go both up and down with your arrow keys, cycling through all of the results!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"219\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/search-autocomplete-keyboard-navigation.gif?resize=640%2C219\" alt=\"Search autocomplete using arrow keys to navigate results\" class=\"wp-image-617\" data-recalc-dims=\"1\"/><figcaption>Navigating up and down in the results</figcaption></figure>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-search-events/commit/b17093c7becce491667a5bfa56c40c7998725bcc\">Follow along with the commit!</a></p>\n\n\n\n<h2>What can we do next?</h2>\n\n\n\n<h3>Clear results when hitting escape</h3>\n\n\n\n<p>You can use the same method to listen for the Escape key. A result from hitting escape is whatever interaction is active, it cancels out.</p>\n\n\n\n<p>Listen for the Escape key and both clear the results and input on the event.</p>\n\n\n\n<h3>Other event listeners</h3>\n\n\n\n<p>We can use this same method to listen to other events like when resizing a browser.</p>\n\n\n\n<p>Add an event listener for the resize event on the browser window to see how that works for building responsive functionality.</p>\n",
    "title": "How to Use Browser Event Listeners in React for Search and Autocomplete",
    "slug": "how-to-use-browser-event-listeners-in-react-for-search-autocomplete-in-javascript"
  },
  {
    "id": "cG9zdDo1NzY=",
    "content": "\n<p>WordPress and JavaScript-based frameworks like Next.js and Gatsby make powerful combos, delivering a great CMS editing experience with a fast and performant front end, but if we&#8217;re using WordPress headlessly, we don&#8217;t automatically have a mechanism to trigger a new deploy. How can we take advantage of web hooks to make sure our websites are always up to date?</p>\n\n\n\n<!--more-->\n\n\n\n<h2>What are WordPress hooks?</h2>\n\n\n\n<p><a href=\"https://developer.wordpress.org/plugins/hooks/\">Hooks</a> are a fundamental part of how <a href=\"https://wordpress.org/\">WordPress</a> works. It provides an entry point for developers to listen for actions or events and trigger another process when those occur.</p>\n\n\n\n<p>When using WordPress headlessly as a content management system (CMS), we&#8217;re primarily interested in listening to events related to content. That could be if a new post is created, update, or even deleted.</p>\n\n\n\n<p>By listening to those content-related hooks, we can trigger new deployments wherever our front end is deployed, to make sure any time content is changed, we&#8217;re keeping our website fresh with updates.</p>\n\n\n\n<h2>What are Netlify build hooks?</h2>\n\n\n\n<p>In this example, we&#8217;re using Netlify for where our front end will be deployed.</p>\n\n\n\n<p>Netlify, like other providers, provides the ability to create <a href=\"https://docs.netlify.com/configure-builds/build-hooks/\">build hooks</a> where when receiving a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST\">POST</a> request, will trigger a new build and deployment.</p>\n\n\n\n<p>We can do this on really any branch we want, as long as we&#8217;ve deployed that branch to Netlify before, but the most common use case is the production branch, commonly <code>main</code>.</p>\n\n\n\n<h2>How can we use WordPress and Netlify hooks together?</h2>\n\n\n\n<p>You might see where this is going, but we can take advantage of hooks from both our CMS and from our hosting provider to trigger a new deployment any time our content changes.</p>\n\n\n\n<p>Particularly, we&#8217;re going to use the free <a href=\"https://wordpress.org/plugins/wp-webhooks/\">WP Webhooks</a> plugin which will allow us to custom tailor what events we want to use to trigger a new deployment along with the endpoint we want to trigger, which we can create in Netlify.</p>\n\n\n\n<h2>What are we going to build?</h2>\n\n\n\n<p>We&#8217;re going to start off by spinning up a new WordPress-powered Next.js application and deploying it &#8220;as is&#8221; to Netlify. The only pre-requisite here is that you already have a basic WordPress instance that&#8217;s ready to power your project.</p>\n\n\n\n<p>Our goal here isn&#8217;t to build the site itself, but learn how to trigger new deployments when content changes, to make sure our project is always kept fresh on production. If you already have a similar project, feel free to skip Step 0.</p>\n\n\n\n<p>Once we have our site, we&#8217;ll learn how to deploy our website to Netlify, create a new build hook in Netlify, and learn how to trigger that hook automatically using WordPress.</p>\n\n\n\n<h2>Step 0: Starting a new Next.js project with Next.js WordPress Starter and deploying it to Netlify</h2>\n\n\n\n<p>We’ll get our project started by spinning up a new Next.js project with my <a href=\"https://github.com/colbyfayock/next-wordpress-starter\">Next.js WordPress Starter</a>.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: we won&#8217;t go deep into detail for how to get this up and running, but you can follow along with an in-depth tutorial with <a href=\"https://spacejelly.dev/posts/how-to-create-a-headless-wordpress-blog-with-next-js-wordpress-starter/\">How to Create a Headless WordPress Blog with Next.js WordPress Starter</a></p></blockquote>\n\n\n\n<p>In order for this to work, you&#8217;ll need to install the <a href=\"https://wordpress.org/plugins/wp-graphql/\">WPGraphQL plugin</a> which you can find right inside of the Plugins marketplace in your WordPress instance.</p>\n\n\n\n<p>Then in your terminal, run:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn create next-app -e https://github.com/colbyfayock/next-wordpress-starter my-wp-app\n# or\nnpx create-next-app -e https://github.com/colbyfayock/next-wordpress-starter my-wp-app</code></pre>\n\n\n\n<p>This will go through and clone the starter project and install all of the dependencies.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: feel free to change <code>my-wp-app</code> to the directory and project name of your choice!</p></blockquote>\n\n\n\n<p>Once everything is installed, navigate to that new directory:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd my-wp-app</code></pre>\n\n\n\n<p>And before we try to start off the project, create a new file in the root of the project called <code>.env.local</code> with the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>WORDPRESS_GRAPHQL_ENDPOINT=\"https://yourhost.com/graphql\"</code></pre>\n\n\n\n<p>You’ll want to replace <a href=\"http://yourhost.com/graphql\"><code>http://yourhost.com/graphql</code></a> with your WordPress instance’s GraphQL endpoint. After installing WPGraphQL, the endpoint is available at <code>/graphql</code> by default.</p>\n\n\n\n<p>Now, you can start up the new project by running:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn dev\n# or\nnpm run dev</code></pre>\n\n\n\n<p>Which will start up a local development server at <a href=\"http://localhost:3000/\">http://localhost:3000</a> where you can now access your new Next.js WordPress project!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"281\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/nextjs-wordpress-starter-space-jelly.jpg?resize=640%2C281\" alt=\"Next.js WordPress Starter using spacejelly.dev as content\" class=\"wp-image-580\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/nextjs-wordpress-starter-space-jelly-scaled.jpg?resize=1024%2C450 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/nextjs-wordpress-starter-space-jelly-scaled.jpg?resize=300%2C132 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/nextjs-wordpress-starter-space-jelly-scaled.jpg?resize=768%2C337 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/nextjs-wordpress-starter-space-jelly-scaled.jpg?resize=1536%2C675 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/nextjs-wordpress-starter-space-jelly-scaled.jpg?resize=2048%2C899 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/nextjs-wordpress-starter-space-jelly-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/nextjs-wordpress-starter-space-jelly-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Next.js WordPress site using spacejelly.dev</figcaption></figure>\n\n\n\n<h2>Step 1: Deploying a WordPress-powered Next.js application to Netlify</h2>\n\n\n\n<p>Now that we have our project, we need to get it to Netlify before we can learn how to trigger new builds.</p>\n\n\n\n<p>This should be relatively painless if you&#8217;re familiar with GitHub already and how to create a new repository.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: Netlify also has alternative ways to deploy like the Netlify CLI, but using GitHub is a great way to get a lot of other features like automatic deployments when pushing new code and automatic deploy previews for new pull requests.</p></blockquote>\n\n\n\n<p>The first step is connecting your application to a new Git repository. While Netlify supports a variety of Git providers, I&#8217;m going to use GitHub here, but feel free to use your favorite if supported.</p>\n\n\n\n<p>If you&#8217;re not familiar with creating a new repository, <a href=\"https://docs.github.com/en/github/importing-your-projects-to-github/importing-source-code-to-github/adding-an-existing-project-to-github-using-the-command-line\">GitHub has a great guide</a>, but as soon as you create your repository, GitHub gives you a list of commands you can run to get started. Because Next.js already is initialized with Git, it&#8217;s pretty straightforward to get it connected!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"221\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-app-github-repository.jpg?resize=640%2C221\" alt=\"New repository on GitHub for my-wp-app\" class=\"wp-image-582\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-app-github-repository-scaled.jpg?resize=1024%2C353 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-app-github-repository-scaled.jpg?resize=300%2C104 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-app-github-repository-scaled.jpg?resize=768%2C265 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-app-github-repository-scaled.jpg?resize=1536%2C530 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-app-github-repository-scaled.jpg?resize=2048%2C707 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-app-github-repository-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-app-github-repository-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>New GitHub repository</figcaption></figure>\n\n\n\n<p>But once we&#8217;re set up in GitHub, the next step is to connect our repository to Netlify.</p>\n\n\n\n<p>If this is your first time using Netlify, now&#8217;s the time to sign up for a free account.</p>\n\n\n\n<p>Once in Netlify, we want to select <strong>New Site from Git</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"223\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-create-new-site.jpg?resize=640%2C223\" alt=\"Netlify New site from Git button\" class=\"wp-image-583\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-create-new-site-scaled.jpg?resize=1024%2C357 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-create-new-site-scaled.jpg?resize=300%2C105 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-create-new-site-scaled.jpg?resize=768%2C268 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-create-new-site-scaled.jpg?resize=1536%2C535 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-create-new-site-scaled.jpg?resize=2048%2C714 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-create-new-site-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-create-new-site-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Creating a new Netlify site</figcaption></figure>\n\n\n\n<p>On the next page, you&#8217;ll be asked to select your Netlify site from your Git provider.</p>\n\n\n\n<p>If you&#8217;re following along with me, you&#8217;ll want to select GitHub, otherwise, select your provider here.</p>\n\n\n\n<p>Netlify will use oAuth to connect to your GitHub account, where once connected, it will show you a list of repositories that you&#8217;ve given permission to access.</p>\n\n\n\n<p>Here we can find our repository and select it.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"258\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-finding-repository.jpg?resize=640%2C258\" alt=\"Searching for my-wp-app in Netlify\" class=\"wp-image-584\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-finding-repository-scaled.jpg?resize=1024%2C413 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-finding-repository-scaled.jpg?resize=300%2C121 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-finding-repository-scaled.jpg?resize=768%2C310 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-finding-repository-scaled.jpg?resize=1536%2C619 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-finding-repository-scaled.jpg?resize=2048%2C825 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-finding-repository-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-finding-repository-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Selecting GitHub repository in Netlify</figcaption></figure>\n\n\n\n<p>The next page is where we can set up our configuration for our Netlify build.</p>\n\n\n\n<p>The cool thing is Netlify will autodetect a lot of this for you, where if you&#8217;re using the Next.js Starter from Step 0, we can leave the Build Command as <code>yarn build</code> and our Publish Directory as <code>out</code>.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: if these are different for you, make sure to update them! The <code>out</code> directory should be where the project is ultimately exported to.</p></blockquote>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"236\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-settings.jpg?resize=640%2C236\" alt=\"Build settings in new Netlify deploy\" class=\"wp-image-585\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-settings-scaled.jpg?resize=1024%2C377 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-settings-scaled.jpg?resize=300%2C111 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-settings-scaled.jpg?resize=768%2C283 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-settings-scaled.jpg?resize=1536%2C566 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-settings-scaled.jpg?resize=2048%2C754 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-settings-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-settings-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Netlify build settings</figcaption></figure>\n\n\n\n<p>Now before you click Deploy, we have one more step.</p>\n\n\n\n<p>Click the <strong>Show advanced</strong> button where we&#8217;ll want to add a new environment variable that includes our <code>WORDPRESS_GRAPHQL_ENDPOINT</code> just like we added in Step 0.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"196\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-environment-variable-wordpress-graphql-api.jpg?resize=640%2C196\" alt=\"WORDPRESS_GRAPHQL_ENDPOINT environment variable in Netlify build\" class=\"wp-image-586\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-environment-variable-wordpress-graphql-api-scaled.jpg?resize=1024%2C313 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-environment-variable-wordpress-graphql-api-scaled.jpg?resize=300%2C92 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-environment-variable-wordpress-graphql-api-scaled.jpg?resize=768%2C235 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-environment-variable-wordpress-graphql-api-scaled.jpg?resize=1536%2C470 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-environment-variable-wordpress-graphql-api-scaled.jpg?resize=2048%2C626 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-environment-variable-wordpress-graphql-api-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-environment-variable-wordpress-graphql-api-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Creating an environment variable for our WordPress GraphQL endpoint</figcaption></figure>\n\n\n\n<p>And now you can hit <strong>Deploy site</strong>!</p>\n\n\n\n<p>At this point, Netlify will spin up a new environment and kick off a build, where it will ultimately deploy our new project.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: Netlify gives the option to select a custom sub-domain name. Feel free to go into <strong>Domain settings</strong> while the site is getting deployed to customize yours!</p></blockquote>\n\n\n\n<p>But once it finishes, we should have our new site deployed to Netlify!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"221\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/deployed-netlify-app.jpg?resize=640%2C221\" alt=\"\" class=\"wp-image-587\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/deployed-netlify-app-scaled.jpg?resize=1024%2C353 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/deployed-netlify-app-scaled.jpg?resize=300%2C103 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/deployed-netlify-app-scaled.jpg?resize=768%2C264 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/deployed-netlify-app-scaled.jpg?resize=1536%2C529 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/deployed-netlify-app-scaled.jpg?resize=2048%2C705 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/deployed-netlify-app-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/deployed-netlify-app-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Finished deployment on Netlify</figcaption></figure>\n\n\n\n<p>And if you click the link and open it, you should now be able to see your new web project!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"257\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/nextjs-wordpress-starter-space-jelly-netlify.jpg?resize=640%2C257\" alt=\"Next.js WordPress Starter with spacejelly.dev content deployed to Netlify\" class=\"wp-image-588\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/nextjs-wordpress-starter-space-jelly-netlify-scaled.jpg?resize=1024%2C411 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/nextjs-wordpress-starter-space-jelly-netlify-scaled.jpg?resize=300%2C121 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/nextjs-wordpress-starter-space-jelly-netlify-scaled.jpg?resize=768%2C308 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/nextjs-wordpress-starter-space-jelly-netlify-scaled.jpg?resize=1536%2C617 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/nextjs-wordpress-starter-space-jelly-netlify-scaled.jpg?resize=2048%2C823 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/nextjs-wordpress-starter-space-jelly-netlify-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/nextjs-wordpress-starter-space-jelly-netlify-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Website deployed to Netlify</figcaption></figure>\n\n\n\n<h2>Step 2: Creating a build hook in Netlify to trigger new deployments</h2>\n\n\n\n<p>By default Netlify will always rebuild and deploy your project whenever you push changes to your main branch. What it doesn&#8217;t do, is automatically rebuild and deploy if your content changes.</p>\n\n\n\n<p>To automatically kick that off when our content changes, we can take advantage of Netlify build hooks, where Netlify provides a URL that when sent a POST request, will start that process.</p>\n\n\n\n<p>Head over in Netlify to <strong>Site Settings</strong>, <strong>Build &amp; deploy</strong>, then scroll down to <strong>Build hooks</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"161\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-hooks.jpg?resize=640%2C161\" alt=\"Build Hooks in Netlify\" class=\"wp-image-589\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-hooks-scaled.jpg?resize=1024%2C258 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-hooks-scaled.jpg?resize=300%2C76 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-hooks-scaled.jpg?resize=768%2C193 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-hooks-scaled.jpg?resize=1536%2C387 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-hooks-scaled.jpg?resize=2048%2C515 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-hooks-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-hooks-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Finding Build Hooks in Netlify</figcaption></figure>\n\n\n\n<p>Then click <strong>Add build hook</strong> which will give you two options: a name and a branch to build.</p>\n\n\n\n<p>While you can put whatever you want for the name, I&#8217;m going to go with &#8220;WordPress&#8221;. For the <strong>Branch to build</strong>, you&#8217;ll want to use whatever branch is your default branch, which if you&#8217;re following along with me, should be <strong>main</strong>. Then click <strong>Save</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"191\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-build-hook-netlify.jpg?resize=640%2C191\" alt=\"Creating WordPress build hook in Netlify\" class=\"wp-image-590\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-build-hook-netlify-scaled.jpg?resize=1024%2C305 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-build-hook-netlify-scaled.jpg?resize=300%2C89 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-build-hook-netlify-scaled.jpg?resize=768%2C229 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-build-hook-netlify-scaled.jpg?resize=1536%2C458 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-build-hook-netlify-scaled.jpg?resize=2048%2C611 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-build-hook-netlify-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-build-hook-netlify-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Adding a Build Hook in Netlify</figcaption></figure>\n\n\n\n<p>Netlify will now give you a unique URL, which will serve as your build hook!</p>\n\n\n\n<p>Now let&#8217;s test this out.</p>\n\n\n\n<p>If you click on that Build Hook, it will open a little panel where you should now see a <a href=\"https://curl.se/\">cURL</a> command.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"183\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-hook-curl.jpg?resize=640%2C183\" alt=\"Finding cURL command to test Netlify build hook\" class=\"wp-image-591\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-hook-curl-scaled.jpg?resize=1024%2C292 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-hook-curl-scaled.jpg?resize=300%2C86 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-hook-curl-scaled.jpg?resize=768%2C219 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-hook-curl-scaled.jpg?resize=1536%2C438 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-hook-curl-scaled.jpg?resize=2048%2C584 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-hook-curl-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-build-hook-curl-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Netlify Build Hook cURL command</figcaption></figure>\n\n\n\n<p>Copy that command, open up your terminal, and run it.</p>\n\n\n\n<p>If you head back over to your Site Overview or the Deploys section, you&#8217;ll now see that you triggered a new deployment of the site with that command!</p>\n\n\n\n<h2>Step 3: Installing and configuring the WP Webhooks plugin in WordPress</h2>\n\n\n\n<p>We have one end of the connection ready to go, where we can now programmatically trigger a website deploy. Now we need to set up WordPress to automatically trigger that hook!</p>\n\n\n\n<p>To start, head over to WordPress, navigate to Plugins, and click Add New, where we&#8217;re going to add the plugin <a href=\"https://wordpress.org/plugins/wp-webhooks/\">WP Webhooks</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"185\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-plugins-wp-webhooks.jpg?resize=640%2C185\" alt=\"WP Webhooks plugin in WordPress marketplace\" class=\"wp-image-592\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-plugins-wp-webhooks-scaled.jpg?resize=1024%2C296 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-plugins-wp-webhooks-scaled.jpg?resize=300%2C87 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-plugins-wp-webhooks-scaled.jpg?resize=768%2C222 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-plugins-wp-webhooks-scaled.jpg?resize=1536%2C444 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-plugins-wp-webhooks-scaled.jpg?resize=2048%2C592 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-plugins-wp-webhooks-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-plugins-wp-webhooks-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Installing WP Webhooks plugin</figcaption></figure>\n\n\n\n<p>Once installed and activated, you can find the WP Webhooks link under Settings in the left sidebar navigation.</p>\n\n\n\n<p>Once there, we want to navigate to Send Data, as ultimately, we want to send a request to Netlify telling them we want to rebuild our site.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"299\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-send-data.jpg?resize=640%2C299\" alt=\"Send Data section in WP Webhooks\" class=\"wp-image-593\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-send-data-scaled.jpg?resize=1024%2C478 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-send-data-scaled.jpg?resize=300%2C140 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-send-data-scaled.jpg?resize=768%2C358 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-send-data-scaled.jpg?resize=1536%2C717 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-send-data-scaled.jpg?resize=2048%2C955 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-send-data-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-send-data-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Send Data in WP Webhooks</figcaption></figure>\n\n\n\n<p>Now if we scroll down on this page, we&#8217;ll see a lot of options for different events that we can hook into, in order to trigger an action.</p>\n\n\n\n<p>For our use case, we only want to focus on content creation, particularly, we&#8217;re going to trigger our webhook any time any event occurs related to Posts.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: if your site supports dynamic content based on any of the other hooks, you can repeat these same steps for those events.</p></blockquote>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"266\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-post-created.jpg?resize=640%2C266\" alt=\"Post created hooks in WP Webhooks\" class=\"wp-image-594\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-post-created-scaled.jpg?resize=1024%2C425 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-post-created-scaled.jpg?resize=300%2C124 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-post-created-scaled.jpg?resize=768%2C318 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-post-created-scaled.jpg?resize=1536%2C637 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-post-created-scaled.jpg?resize=2048%2C849 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-post-created-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-post-created-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Post created hook in WordPress</figcaption></figure>\n\n\n\n<p>Starting from the top, select <strong>Post created</strong>, then click the <strong>Add Webhook URL</strong> button.</p>\n\n\n\n<p>Once you do, you should now see a dialogue that opened up asking for two things: <strong>Webhook Name</strong> and <strong>Webhook URL</strong>.</p>\n\n\n\n<p>Similar to before, you can name the Webhook anything you want, but I&#8217;m going to name mine Netlify.</p>\n\n\n\n<p>For the URL, you should use your unique Netlify Build Hook URL from Step 2.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"204\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-add-netlify-build-hook.jpg?resize=640%2C204\" alt=\"New webhook using Netlify build hook\" class=\"wp-image-595\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-add-netlify-build-hook-scaled.jpg?resize=1024%2C327 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-add-netlify-build-hook-scaled.jpg?resize=300%2C96 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-add-netlify-build-hook-scaled.jpg?resize=768%2C245 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-add-netlify-build-hook-scaled.jpg?resize=1536%2C490 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-add-netlify-build-hook-scaled.jpg?resize=2048%2C654 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-add-netlify-build-hook-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/wp-webhooks-add-netlify-build-hook-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Adding a new Webhook URL</figcaption></figure>\n\n\n\n<p>Then click <strong>Add for post_create</strong>.</p>\n\n\n\n<p>At this point, you should see a success message stating that your hook has been added. You should additionally now see your webhook listed in the UI.</p>\n\n\n\n<p>Repeat this same process for Post deleted, Post trashed, and Post updated to make sure we&#8217;re triggering a build on any content updates.</p>\n\n\n\n<p>Now let&#8217;s test this out!</p>\n\n\n\n<p>You have a few options for how to test this out. You can:</p>\n\n\n\n<ul><li>Add a new Post</li><li>Edit an existing Post</li><li>Add a new Page</li><li>Edit an existing Page</li></ul>\n\n\n\n<p>Any of these events should now trigger a new deploy in Netlify.</p>\n\n\n\n<p>But once you do, you should now see a new deployment kick off.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"173\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-new-build-from-wordpress.jpg?resize=640%2C173\" alt=\"New build in Netlify triggered by WordPress build hook\" class=\"wp-image-596\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-new-build-from-wordpress-scaled.jpg?resize=1024%2C277 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-new-build-from-wordpress-scaled.jpg?resize=300%2C81 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-new-build-from-wordpress-scaled.jpg?resize=768%2C207 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-new-build-from-wordpress-scaled.jpg?resize=1536%2C415 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-new-build-from-wordpress-scaled.jpg?resize=2048%2C553 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-new-build-from-wordpress-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/netlify-new-build-from-wordpress-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>New build in Netlify</figcaption></figure>\n\n\n\n<p>And once it&#8217;s finished, the site should now be updated with your new content!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"259\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-nextjs-new-test-post.jpg?resize=640%2C259\" alt=\"Test post that was deployed to Netlify after triggered by WP Webhooks\" class=\"wp-image-597\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-nextjs-new-test-post-scaled.jpg?resize=1024%2C415 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-nextjs-new-test-post-scaled.jpg?resize=300%2C122 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-nextjs-new-test-post-scaled.jpg?resize=768%2C311 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-nextjs-new-test-post-scaled.jpg?resize=1536%2C622 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-nextjs-new-test-post-scaled.jpg?resize=2048%2C830 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-nextjs-new-test-post-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/07/wordpress-nextjs-new-test-post-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>New test post triggered by WP Webhooks and Netlify</figcaption></figure>\n\n\n\n<p>Bonus: if you&#8217;re just posting a test post and you added the hook for Post delete, if you now remove that post, it should trigger another build and update your site again!</p>\n",
    "title": "How to Automate Deployments on Content Change in WordPress with WP Webhooks and Netlify",
    "slug": "how-to-automate-deployments-on-content-change-in-wordpress-with-wp-webhooks-and-netlify"
  },
  {
    "id": "cG9zdDo1NTc=",
    "content": "\n<p>As developers, we have a variety of code tasks that are all important steps to get to the end goal of delivering great apps. Linting for instance can help avoid bugs and save your team&#8217;s sanity for code style preferences. How can we take advantage of linting in our Next.js apps and even automate the task away?</p>\n\n\n\n<!--more-->\n\n\n\n<h2>What is linting?</h2>\n\n\n\n<p><a href=\"https://www.freecodecamp.org/news/what-is-linting-and-how-can-it-save-you-time/\">Linting</a> is the practice of checking code through automated static analysis for syntax errors and optionally code style issues.</p>\n\n\n\n<p>It typically comes in the form of a script, where running it, along with the rules that you configure, will look through all of the code you target trying to find any issues that might prevent your code from running or code that may eventually throw an error.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"108\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-errors-semistandard.jpg?resize=640%2C108\" alt=\"Terminal with linting errors\" class=\"wp-image-560\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-errors-semistandard.jpg?resize=1024%2C173 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-errors-semistandard.jpg?resize=300%2C51 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-errors-semistandard.jpg?resize=768%2C130 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-errors-semistandard.jpg?resize=1536%2C260 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-errors-semistandard.jpg?resize=2048%2C346 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-errors-semistandard.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-errors-semistandard.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Linting errors using <a href=\"https://github.com/standard/semistandard\">semistandard</a> configuration</figcaption></figure>\n\n\n\n<p>From a stylistic point of view, a common expression for why linting helps is the goal of &#8220;trying to make all of the code look like it was written by one person.&#8221; That goal can help teams spend less time arguing over formatting issues and more time focusing on solving problems.</p>\n\n\n\n<p>The most popular linting solution in the JavaScript world is ESLint, which gives you an easy-to-use command line tool for running static analysis on whatever files you&#8217;d like.</p>\n\n\n\n<h2>How does linting work with Next.js?</h2>\n\n\n\n<p><a href=\"https://nextjs.org/blog/next-11#conformance\">As of Next.js 11</a>, Next.js comes with ESLint out-of-the-box.</p>\n\n\n\n<p>By default, Next.js will run a <a href=\"https://github.com/vercel/next.js/tree/canary/packages/eslint-config-next\">predetermined set of linting rules</a> at build time that includes some of the common and generally accepted best practices for React, accessibility, and more.</p>\n\n\n\n<p>You can also run this manually by running the command via the Next.js CLI:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>next lint</code></pre>\n\n\n\n<p>Or using the npm script with:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn lint\n# or\nnpm run lint</code></pre>\n\n\n\n<p>Linting when it comes to Next.js is based around implementing a new model called <a href=\"https://web.dev/conformance/\">Conformance</a> that has been <a href=\"https://web.dev/introducing-aurora/\">crafted and spearheaded</a> by the Web Platforms team at Google.</p>\n\n\n\n<p>Conformance looks to better the web through solutions like linting along with <a href=\"https://web.dev/vitals/\">Core Web Vitals</a>, security, and accessibility. The more these types of tools are baked right into the tools developers use, the less time those developers have to spend worrying about them or having to implement them manually.</p>\n\n\n\n<h2>What are we going to build?</h2>\n\n\n\n<p>While ESLint is built into Next.js, it currently only runs at build time via <code>next build</code>.</p>\n\n\n\n<p>That means if you don&#8217;t manually run the command, you run the risk of linting throwing an error during the build process.</p>\n\n\n\n<p>While you could always re-run the build after fixing it, dealing with a failing CI / CD job wastes time and frankly can be frustrating while you&#8217;re stuck waiting for those builds to finish in the first place</p>\n\n\n\n<p>Before we solve this, we&#8217;re first going to take a look at how the linter works, what kinds of things it will catch, and how we can even add our own rules.</p>\n\n\n\n<p>Then we&#8217;re going to integrate <a href=\"https://typicode.github.io/husky/\">Husky</a>, a tool that helps us easily set up Git hooks, which we&#8217;ll configure to run before a commit.</p>\n\n\n\n<p>The cool thing is we can even tell ESLint to try to automatically fix all of the issues, so if it can, we won&#8217;t even get any errors, we&#8217;ll get committed code that&#8217;s automatically fixed for us!</p>\n\n\n\n<h2>Step 0: Creating a new Next.js app with Create Next app</h2>\n\n\n\n<p>Starting off, we’ll need a Next.js app. To do this, we’ll use <a href=\"https://nextjs.org/docs/api-reference/create-next-app\">Create Next App</a> which will scaffold a brand new project for us.</p>\n\n\n\n<p>In your terminal, run:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn create next-app my-next-eslint\n# or\nnpx create-next-app my-next-eslint</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: feel free to change <code>my-next-eslint</code> to whatever name you’d like for the project.</p></blockquote>\n\n\n\n<p>Once that finishes running, you can navigate into that directory and start your development server:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd my-next-eslint\nyarn dev # or npm run dev</code></pre>\n\n\n\n<p>And once loaded, you should now be able to open up your new app at <a href=\"http://localhost:3000/\">http://localhost:3000</a>!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"251\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/03/new-nextjs-app-1.jpg?resize=640%2C251\" alt=\"New Next.js App\" class=\"wp-image-285\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/03/new-nextjs-app-1-scaled.jpg?resize=1024%2C401 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/03/new-nextjs-app-1-scaled.jpg?resize=300%2C118 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/03/new-nextjs-app-1-scaled.jpg?resize=768%2C301 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/03/new-nextjs-app-1-scaled.jpg?resize=1536%2C602 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/03/new-nextjs-app-1-scaled.jpg?resize=2048%2C802 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/03/new-nextjs-app-1-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/03/new-nextjs-app-1-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>New Next.js app</figcaption></figure>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-next-eslint/commits/main\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 1: Running ESLint on a Next.js application</h2>\n\n\n\n<p>With Next.js, not only will linting run at build time, we additionally have the ability to run it manually.</p>\n\n\n\n<p>If you have the <a href=\"https://nextjs.org/docs/api-reference/cli\">Next.js CLI</a> you can do this by simply running:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>next lint</code></pre>\n\n\n\n<p>But when working with teams or publishing code publicly, it makes more sense to avoid requiring globally installed dependencies to generally make it easier for others to get started.</p>\n\n\n\n<p>Luckily, if using the Next.js default starter, it comes out of the box with an npm script to handle this, allowing you to run:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn lint\n# or\nnpm run lint</code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"122\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/eslint-no-errors-1024x195.jpg?resize=640%2C122\" alt=\"Terminal with no ESLint errors or warnings\" class=\"wp-image-561\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/eslint-no-errors.jpg?resize=1024%2C195 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/eslint-no-errors.jpg?resize=300%2C57 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/eslint-no-errors.jpg?resize=768%2C146 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/eslint-no-errors.jpg?resize=1536%2C293 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/eslint-no-errors.jpg?resize=2048%2C390 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/eslint-no-errors.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/eslint-no-errors.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Running ESLint with no errors</figcaption></figure>\n\n\n\n<p>At this point, the project comes out-of-the-box lint free, so we shouldn&#8217;t get any errors.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Tip: If you&#8217;re going the manual route or are working with a starter that doesn&#8217;t have the npm script, you can add <code>\"lint\": \"next lint\"</code> to your npm scripts inside of package.json!</p></blockquote>\n\n\n\n<p>To see how it would look if something failed, we can try to intentionally break something.</p>\n\n\n\n<p>Some of the rules that Next.js comes with by default are meant to help with accessibility. One of those rules requires that all images have an <code>alt</code> attribute.</p>\n\n\n\n<p>We can test this in action by finding the footer of inside of our homepage and remove the <code>alt</code> attribute from the Vercel logo.</p>\n\n\n\n<p>Inside <code>/pages/index.js</code> update the Image component to:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Image src=\"/vercel.svg\" width={72} height={16} /&gt;</code></pre>\n\n\n\n<p>While in practice, we wouldn&#8217;t want to actually remove this, let&#8217;s see what happens now if we run the lint command.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"245\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-lint-missing-image-alt.jpg?resize=640%2C245\" alt=\"Terminal with linting warning showing missing alt on image tag\" class=\"wp-image-562\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-lint-missing-image-alt.jpg?resize=1024%2C392 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-lint-missing-image-alt.jpg?resize=300%2C115 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-lint-missing-image-alt.jpg?resize=768%2C294 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-lint-missing-image-alt.jpg?resize=1536%2C588 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-lint-missing-image-alt.jpg?resize=2048%2C784 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-lint-missing-image-alt.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-lint-missing-image-alt.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Lint warning for not including an alt prop on an Image element</figcaption></figure>\n\n\n\n<p>Our linter is now warning us that we should have that alt attribute on our image.</p>\n\n\n\n<p>To get an idea of what rules are actually be enforce, we need to follow a bit of a trail.</p>\n\n\n\n<p>If you look inside of <code>.eslintrc</code>, we see a really small amount of configuration:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n  \"extends\": &#91;\"next\", \"next/core-web-vitals\"]\n}</code></pre>\n\n\n\n<p>Next.js is bundling all of its linting configurations inside of an npm package <a href=\"https://www.npmjs.com/package/eslint-config-next\">eslint-config-next</a>. We can additionally see that its including next/core-web-vitals, which comes from the same package.</p>\n\n\n\n<p>While this doesn&#8217;t explain much, we can get a list of all of the included rules <a href=\"https://nextjs.org/docs/basic-features/eslint#eslint-plugin\">right in the documentation</a>.</p>\n\n\n\n<p>Better yet, we can look right inside of the <a href=\"https://github.com/vercel/next.js/tree/canary/packages/eslint-config-next\">source code</a>, where we can see the exact configuration that&#8217;s being used for both the <a href=\"https://github.com/vercel/next.js/blob/canary/packages/eslint-config-next/index.js\">Next.js ESLint plugin</a> in addition to the <a href=\"https://github.com/vercel/next.js/blob/canary/packages/eslint-config-next/core-web-vitals.js\">Next.js Core Web Vitals</a>.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Tip: these bundled configurations will look pretty similar to how we&#8217;ll add our own custom configurations in the next step!</p></blockquote>\n\n\n\n<p>Next, we&#8217;ll learn how to customize these rules to fit out own workflows.</p>\n\n\n\n<h2>Step 2: Customizing Next.js ESLint rules</h2>\n\n\n\n<p>The great thing about the way that Next.js has implemented ESLint is they made it straightforward to configure the rules, just like we would if we were manually implementing ESLint ourselves.</p>\n\n\n\n<p>To try this out, let&#8217;s open up our <code>.eslintrc</code> file and update it to:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n  \"extends\": &#91;\"next\", \"next/core-web-vitals\"],\n  \"rules\": {\n    \"no-unused-vars\": \"error\"\n  }\n}</code></pre>\n\n\n\n<p>Then, at the top of the Home component inside of <code>pages/index.js</code> add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const test = true;</code></pre>\n\n\n\n<p>And finally in your terminal run the lint command.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"226\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/eslint-error-unused-variable.jpg?resize=640%2C226\" alt=\"Terminal with ESLint error for unused variable\" class=\"wp-image-563\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/eslint-error-unused-variable.jpg?resize=1024%2C362 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/eslint-error-unused-variable.jpg?resize=300%2C106 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/eslint-error-unused-variable.jpg?resize=768%2C272 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/eslint-error-unused-variable.jpg?resize=1536%2C544 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/eslint-error-unused-variable.jpg?resize=2048%2C725 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/eslint-error-unused-variable.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/eslint-error-unused-variable.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Linting error for unused variable</figcaption></figure>\n\n\n\n<p>Here we implemented the <a href=\"https://eslint.org/docs/rules/no-unused-vars\">no-unused-vars</a> rule. It works exactly like it sounds, it will let us know if we have any variables that are currently being unused. This is helpful to make sure we keep our code clean!</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: we added this rule as an error. You can decide which rules you&#8217;d like to warn developers about as opposed to throwing an error, which we&#8217;ll see later can help us enforce those rules.</p></blockquote>\n\n\n\n<p>Before moving to the next step, try to find a rule in the <a href=\"https://eslint.org/docs/rules/\">list of ESLint rules</a> that sounds interesting to you, add it to the config, and test what happens when you break the rule. If you&#8217;re unsure of what to pick, try <a href=\"https://eslint.org/docs/rules/no-console\">no-console</a>.</p>\n\n\n\n<p>One done, let&#8217;s find out how we can make our linter automatically run any time someone tries to commit.</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-next-eslint/commit/e9e173a716781ee0861f7798b035f2c3f14cf88f\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 3: Automatically linting during development</h2>\n\n\n\n<p>Linting is a great way to make sure you keep your code tidy, but it&#8217;s only helpful if you and your team remember to run it.</p>\n\n\n\n<p>Because Next.js automatically does so during build time, we know it will <em>eventually</em> run, but as we talked about earlier, during a build and potential deployment isn&#8217;t the ideal time to find out we have linting errors.</p>\n\n\n\n<p>In order to run our linter more regularly, we can take advantage of <a href=\"https://git-scm.com/docs/githooks\">Git hooks</a>. In particular, we&#8217;ll use Husky, a JavaScript-based tool, which will help us set up our Git hooks and make sure they&#8217;re running regularly.</p>\n\n\n\n<p>To start, let&#8217;s install Husky. In your terminal, run:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn add husky -D\n# or\nnpm install husky --save-dev</code></pre>\n\n\n\n<p>Next, in order to make sure that anyone who checks out our code is properly set up to run the same git hooks, we&#8217;ll add a &#8220;prepare&#8221; script, which will run after someone runs <code>npm install</code> among <a href=\"https://docs.npmjs.com/cli/v7/using-npm/scripts#life-cycle-scripts\">other stages of the npm lifecycle</a>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm set-script prepare \"husky install\"</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: you want to run this as npm, not yarn</p></blockquote>\n\n\n\n<p>Then we want to run this script once as we already installed our packages the first time:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn prepare\n# or\nnpm run prepare</code></pre>\n\n\n\n<p>You&#8217;ll now notice that inside of the project, there&#8217;s a new directory called <code>.husky</code>.</p>\n\n\n\n<p>By default, Git hooks are typically stored inside of <code>.git/hooks</code>, you can even see examples there, but Husky uses this separate directory to allow it to more easily maintain tracking and running the hooks on our behalf.</p>\n\n\n\n<p>And now finally, we&#8217;re going to add a Git hook. We&#8217;re going to do this in two stages to make it a bit easier for us to manage in the future.</p>\n\n\n\n<p>First, we&#8217;re going to set up a new npm script called &#8220;pre-commit&#8221; which will run our linting. That way, any time we want to change this, we can easily change it inside of our <code>package.json</code>.</p>\n\n\n\n<p>In your terminal, run:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm set-script pre-commit \"next lint\"</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: again, make sure to run this command as npm</p></blockquote>\n\n\n\n<p>Now we&#8217;ll actually set up the Git hook by running:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn husky add .husky/pre-commit \"yarn pre-commit\"\n# or\nnpx husky add .husky/pre-commit \"npm run pre-commit\"</code></pre>\n\n\n\n<p>If we now look inside of the <code>.husky</code> directory, we can see a new file called <code>pre-commit</code> which includes our <code>pre-commit</code> script invocation.</p>\n\n\n\n<p>Whenever the pre-comment event occurs (right before an actual commit), Husky will run that command via Git hook.</p>\n\n\n\n<p>Let&#8217;s now test that this works!</p>\n\n\n\n<p>We&#8217;ll want to use a linting rule that&#8217;s going to create an error. If you&#8217;ve been following along, we should now have a rule in <code>.eslintrc</code> that states that we want to throw an error if we have unused variables. We should also have an unused variable <code>test</code> at the top of <code>pages/index.js</code>.</p>\n\n\n\n<p>If neither of the above are true, try to set up a rule that will throw an error when running the lint command.</p>\n\n\n\n<p>But now once you do, try to commit the code.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"278\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-on-pre-commit-git-hook.jpg?resize=640%2C278\" alt=\"Terminal showing linting error ran during pre-commit\" class=\"wp-image-564\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-on-pre-commit-git-hook.jpg?resize=1024%2C445 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-on-pre-commit-git-hook.jpg?resize=300%2C130 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-on-pre-commit-git-hook.jpg?resize=768%2C334 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-on-pre-commit-git-hook.jpg?resize=1536%2C668 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-on-pre-commit-git-hook.jpg?resize=2048%2C891 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-on-pre-commit-git-hook.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-on-pre-commit-git-hook.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Commit fails because of a linting error</figcaption></figure>\n\n\n\n<p>We can see that our linter finds an error and ultimately fails with an exit code, meaning our commit stops in its tracks, and prevents it from getting applied.</p>\n\n\n\n<p>You can even see that&#8217;s the case by running:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>git log | cat</code></pre>\n\n\n\n<p>Where we can see our latest commits, which doesn&#8217;t include the one that failed!</p>\n\n\n\n<p>But now let&#8217;s run it again after removing the unused variable.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"140\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-on-pre-commit-git-hook-no-errors-1024x224.jpg?resize=640%2C140\" alt=\"Terminal with no linting errors ran during pre-commit\" class=\"wp-image-565\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-on-pre-commit-git-hook-no-errors.jpg?resize=1024%2C224 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-on-pre-commit-git-hook-no-errors.jpg?resize=300%2C66 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-on-pre-commit-git-hook-no-errors.jpg?resize=768%2C168 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-on-pre-commit-git-hook-no-errors.jpg?resize=1536%2C336 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-on-pre-commit-git-hook-no-errors.jpg?resize=2048%2C447 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-on-pre-commit-git-hook-no-errors.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-on-pre-commit-git-hook-no-errors.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Linting during commit with no errors</figcaption></figure>\n\n\n\n<p>We can see that our linter still runs when we commit, but this time, we have no errors!</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-next-eslint/commit/42b25513306ad453360d58e309b39f5afce347fb\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 4: Automatically fixing linting issues before commit</h2>\n\n\n\n<p>Finally, not only can we automate running the linter, we can also automate making the linter fix things for us!</p>\n\n\n\n<p>Now before we dig in, ESLint doesn&#8217;t support fixing every single rule. If you head over to the <a href=\"https://eslint.org/docs/rules/\">ESLint Rules page</a>, you can see all rules that support automated fixing (the ones with a wrench icon).</p>\n\n\n\n<p>But to see how this works, we can configure the <a href=\"https://eslint.org/docs/rules/indent\">indent</a> rule which supports automatically fixing.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: to test this out, I&#8217;m going to use 2 spaces as my indentation, which is what Next.js uses out-of-the-box. Feel free to configure this to whatever you prefer.</p></blockquote>\n\n\n\n<p>To automatically fix issues that are supported, all we need to do is include the <code>--fix</code> flag at the end of the linting command.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Warning: when running the automated fixing, the entire project or files you target may include a large amount of differences if you&#8217;re using linting rules that are different than the current state of the project. I recommend you try this on an example project before doing so on a real project, or at least save any existing changes before doing so.</p></blockquote>\n\n\n\n<p>Let&#8217;s test this out by first adding our indentation rule.</p>\n\n\n\n<p>Inside of <code>.eslintrc</code> under <code>rules</code> add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"indent\": &#91;\"error\", 2]</code></pre>\n\n\n\n<p>Then, mess up the indentation a little bit inside of <code>pages/index.js</code> such as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Head&gt;\n        &lt;title&gt;Create Next App&lt;/title&gt;\n          &lt;meta name=\"description\" content=\"Generated by create next app\" /&gt;\n                    &lt;link rel=\"icon\" href=\"/favicon.ico\" /&gt;\n      &lt;/Head&gt;</code></pre>\n\n\n\n<p>Now first run the lint command:</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-error-indentation.jpg?resize=640%2C244\" alt=\"Terminal showing linting errors due to indentation\" class=\"wp-image-566\" width=\"640\" height=\"244\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-error-indentation.jpg?resize=1024%2C391 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-error-indentation.jpg?resize=300%2C114 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-error-indentation.jpg?resize=768%2C293 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-error-indentation.jpg?resize=1536%2C586 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-error-indentation.jpg?resize=2048%2C781 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-error-indentation.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-error-indentation.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Linting error due to inconsistent indentation</figcaption></figure>\n\n\n\n<p>As expected, we get an error.</p>\n\n\n\n<p>Now run that same lint command, except this time, add <code>--fix</code> at the end:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn lint --fix\n# or\nnpm run lint --fix</code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"120\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/lint-fix-no-errors-1024x192.jpg?resize=640%2C120\" alt=\"Terminal showing no linting errors after automatically fixed\" class=\"wp-image-567\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/lint-fix-no-errors.jpg?resize=1024%2C192 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/lint-fix-no-errors.jpg?resize=300%2C56 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/lint-fix-no-errors.jpg?resize=768%2C144 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/lint-fix-no-errors.jpg?resize=1536%2C287 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/lint-fix-no-errors.jpg?resize=2048%2C383 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/lint-fix-no-errors.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/lint-fix-no-errors.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>No linting errors after ESLint fixed automatically</figcaption></figure>\n\n\n\n<p>We get no linting errors because ESLint fixed them automatically!</p>\n\n\n\n<p>But let&#8217;s take this another step.</p>\n\n\n\n<p>Similar to step 3, I don&#8217;t want to have to run this command manually any time I want to fix my linting issues, so let&#8217;s automate it.</p>\n\n\n\n<p>Inside package.json, update the <code>pre-commit</code> script to:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"pre-commit\": \"next lint --fix &amp;&amp; git add -A .\"</code></pre>\n\n\n\n<p>Then update some code in <code>/pages/index.js</code> to break the indentation rules again and try to commit those changes.</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img loading=\"lazy\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-automatically-fix-pre-commit.jpg?resize=640%2C139\" alt=\"Terminal showing no linting errors or warnings after automatically fixed indentation\" class=\"wp-image-568\" width=\"640\" height=\"139\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-automatically-fix-pre-commit.jpg?resize=1024%2C222 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-automatically-fix-pre-commit.jpg?resize=300%2C65 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-automatically-fix-pre-commit.jpg?resize=768%2C166 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-automatically-fix-pre-commit.jpg?resize=1536%2C333 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-automatically-fix-pre-commit.jpg?resize=2048%2C444 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-automatically-fix-pre-commit.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/linting-automatically-fix-pre-commit.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Automatically fixing indent issues during commit</figcaption></figure>\n\n\n\n<p>We can see that again, our linting issues were automatically fixed, the changes were added again, and we successfully committed!</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: we&#8217;re using <code>git add -A .</code> to add all of our files after fixing them with the linter. While this generally works, if you leave a bunch of files changed without planning on committing them, it may lead to accidental commits. I highly recommend you check out lint-staged as I note below.</p></blockquote>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-next-eslint/commit/76c7682f386204a28f13c16a914a51442e346c07\">Follow along with the commit!</a></p>\n\n\n\n<h2>What can we do next?</h2>\n\n\n\n<h3>Only run linting on files that were changed</h3>\n\n\n\n<p>When we run our linter, it&#8217;s running on all files. While generally this is fine, as our project grows, it starts to take longer to complete.</p>\n\n\n\n<p>Additionally, we may start to make changes to files that are out of scope of our current work, which makes code reviews difficult for the reviewer.</p>\n\n\n\n<p>We can use <a href=\"https://github.com/okonet/lint-staged\">lint-staged</a> along with our Husky Git hook which will allow us to pass the files that changed as an argument into our linter, that way it only runs on those files.</p>\n\n\n\n<p>It will additionally only save those files, avoiding accidentally adding new files to a commit that weren&#8217;t intended.</p>\n\n\n\n<h3>Customizing your ESLint config</h3>\n\n\n\n<p>There are a ton of rules and also a lot of other opinionated ESLint configs that you can use to extend your linting.</p>\n\n\n\n<p>For example, AirBnB makes their ESLint rules <a href=\"https://www.npmjs.com/package/eslint-config-airbnb\">available as a package</a> you can install and add to your configuration. There&#8217;s also packages like <a href=\"https://github.com/standard/eslint-config-semistandard\">semistandard</a> (semicolons ftw 👀) that provide highly opinionated, but easy to use configs.</p>\n\n\n\n<p>Explore what&#8217;s out there and play around, but remember, these are always things you can change as you go along, they don&#8217;t have to be perfect the first time you set it up.</p>\n\n\n\n<h3>Using Prettier as a formatter</h3>\n\n\n\n<p>A lot of people like using <a href=\"https://prettier.io/\">Prettier</a> for good reason for formatting code. The opinionated configuration is well-liked and it does a really great job at processing the formatting changes.</p>\n\n\n\n<p>The good news is you can use the <a href=\"https://github.com/prettier/eslint-config-prettier\">Prettier ESLint config</a> to make them work together side-by-side!</p>\n",
    "title": "How to Automate Code Linting in Next.js with ESLint & Husky Git Hooks",
    "slug": "how-to-automate-code-linting-in-next-js-with-eslint-husky-git-hooks"
  },
  {
    "id": "cG9zdDo1MDA=",
    "content": "\n<p>In a rapidly changing JavaScript-based world, it seems like there&#8217;s a new thing to learn every day, but not everything has clear promise in the value it&#8217;s able to bring to the dev community. Enter Astro, coming from the team that brought you Snowpack, with the ultimate goal of shipping less JavaScript.</p>\n\n\n\n<!--more-->\n\n\n\n<h2>What is Astro?</h2>\n\n\n\n<p><a href=\"https://astro.build/\">Astro</a> is a new JavaScrip-based static site builder that promises incredibly lean apps.</p>\n\n\n\n<p>It ships 0 bytes of JavaScript by default, only loading it on demand if even needed, all while being able to choose your own UI framework including React, Preact, Svelte, and Vue.</p>\n\n\n\n<p>While it’s still early in development, there’s already a lot of promising things that make Astro a cool tool to start thinking about.</p>\n\n\n\n<h2>Why do I want to build static sites?</h2>\n\n\n\n<p>If you’ve been around the web, you might have heard the term <a href=\"https://jamstackhandbook.com/\">Jamstack</a>. The idea is, we can ship static pages to the browser instead of rendering them on the server, requiring less time and resources from the visitor, ultimately providing a better experience.</p>\n\n\n\n<p>Astro takes this a step further where by default, not only is everything that’s built is static, it also tries to ship as little JavaScript as it can.</p>\n\n\n\n<p>Most static generators also include JavaScript to adding features and interactions in the browser, which are helpful and provide great experiences, but come at the cost of downloading extra stuff to provide those features.</p>\n\n\n\n<p>By shipping as much of our project as we can as static and on top of that with little to no JavaScript, we’re putting less work on our visitors allowing them to more quickly load our app and hopefully enjoy our work.</p>\n\n\n\n<h2>What to expect from this tutorial?</h2>\n\n\n\n<p>Astro is still in Beta so it might still have some rough edges, but practically speaking, the creator of the framework pretty much says if the production build works, you should be good to go.</p>\n\n\n\n<p>If you’re not using any features that require hydration from React, you’re not really using JavaScript in the client anyways, so the HTML and CSS should work as expected.</p>\n\n\n\n<p>But either way, make sure you’re doing your homework and test as much as you can if you’re planning on trying to use this in production.</p>\n\n\n\n<h2>What will we build?</h2>\n\n\n\n<p>We’re going to build a basic static site that gets compiled from a React-based application.</p>\n\n\n\n<p>We’ll fetch a little bit of data at the root of the project to show how the data flow works from Astro to React, but ultimately our main goal will be getting spun up with an app that can use React, where you can go off and play around with more of Astro&#8217;s features.</p>\n\n\n\n<p>One big thing to keep in mind before diving in, <strong>we’ll need node 14.15.1 or higher</strong> in order to run this project, as Astro uses <a href=\"https://nodejs.org/api/esm.html\">ESM</a> to run.</p>\n\n\n\n<h2>Step 0: Creating a new Astro project</h2>\n\n\n\n<p>To get started with a new Astro project, we’ll need to create the location where we want to install, initialize the project, and install dependencies.</p>\n\n\n\n<p>If you’re used to tools like Next.js or Gatsby that handle a lot of the initialization of a project, this will feel a <em>little</em> bit more manual, but it will ultimately get is to a similar starting point.</p>\n\n\n\n<p>Let’s start off by creating our directory and navigating to it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mkdir my-astro-app\ncd my-astro-app</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Tip: feel free to use whatever you&#8217;d like as the directory name!</p></blockquote>\n\n\n\n<p>Then we want to initialize our new project with Astro:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm init astro</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: as a reminder, we’ll need node v14.15.1+ to run this project. While you’ll be able to initialize the project, it won’t build. If you don’t already have it installed, now might be a good time to get <a href=\"https://github.com/nvm-sh/nvm\">nvm</a> running locally and create an .nvmrc file for the project.</p></blockquote>\n\n\n\n<p>When Astro first runs, it might ask you to install <code>create-astro</code> which you can confirm with <strong>“y”</strong>.</p>\n\n\n\n<p>It will also ask you to choose a template to start with, which for this tutorial, let’s use <strong>Starter Kit (Generic)</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"206\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-starting-template.jpg?resize=640%2C206\" alt=\"Starter Kit selected in Astro setup\" class=\"wp-image-501\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-starting-template.jpg?resize=1024%2C330 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-starting-template.jpg?resize=300%2C97 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-starting-template.jpg?resize=768%2C247 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-starting-template.jpg?resize=1536%2C494 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-starting-template.jpg?w=1790 1790w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-starting-template.jpg?w=1280 1280w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Selecting an Astro template</figcaption></figure>\n\n\n\n<p>Astro will then copy a bunch of starter files to your new project which we’ll use to start up our new project.</p>\n\n\n\n<p>Before we get there though, we need to install our dependencies.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install</code></pre>\n\n\n\n<p>Astro also gives you the commands to initialize a new Git repository, feel free to do that if you’re planning on saving this project, or similarly feel free to skip it if you’re just playing around.</p>\n\n\n\n<p>Then we can finally start our development server:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm start</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Tip: again make sure you&#8217;re running node 14.15.1+.</p></blockquote>\n\n\n\n<p>Astro, along with Snowpack, will do some prep work for the first time you started the project. It will then start a development server which defaults to <a href=\"http://localhost:3000/\">http://localhost:3000/</a>.</p>\n\n\n\n<p>If you open that up in your browser, you should now see a welcome message along with some helpful info about the project!</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img loading=\"lazy\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/new-astro-app.jpg?resize=640%2C296\" alt=\"Web app showing welcome Astro message\" class=\"wp-image-504\" width=\"640\" height=\"296\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/new-astro-app-scaled.jpg?resize=1024%2C474 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/new-astro-app-scaled.jpg?resize=300%2C139 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/new-astro-app-scaled.jpg?resize=768%2C355 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/new-astro-app-scaled.jpg?resize=1536%2C711 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/new-astro-app-scaled.jpg?resize=2048%2C948 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/new-astro-app-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/new-astro-app-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>New Astro project</figcaption></figure>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-astro-app/commit/eebbbebb25e9cec3cd0b6af0882b829868e13d79\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 1: Installing and configuring React to render with Astro</h2>\n\n\n\n<p>Astro supports a variety of different UI frameworks out-of-the-box including the popular ones like React, Preact, Svelte, and Vue without any additional configuration.</p>\n\n\n\n<p>The way it’s able to do that is by supporting plug-in-able “renderers”, which at their simplest are package of code who’s responsibility is to both transform related code to an HTML string and as well as take HTML and rehydrate it once it hits the client (like the browser).</p>\n\n\n\n<p>With that idea, Astro can actually support completely custom renderers, but we’re going to see how this works with the ever popular React (my personal favorite).</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Tip: you actually don&#8217;t need to even install a renderer manually if you plan on using one of the already including options like React! Astro supports those without any additional configuration. That means, feel free to skip this step unless you want to learn how to add and configure one.</p></blockquote>\n\n\n\n<p>To get started, we first need to install the React renderer along with React itself:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install @astrojs/renderer-react react react-dom -D</code></pre>\n\n\n\n<p>If you notice in the above, we’re specifying the <code>-D</code> flag, which means it&#8217;s a dev dependency. Because we&#8217;re not shipping React to the browser, we don&#8217;t need it in production.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: this doesn&#8217;t matter <em>as much</em> when working with apps where the output gets deployed instead of the package itself, but it&#8217;s good to get in the habit of organizing your dependencies that way.</p></blockquote>\n\n\n\n<p>Then, we want to open up the <code>astro.config.mjs</code> file at the root of our project, where somewhere in the configuration object, we want to add the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export default {\n  renderers: &#91;'@astrojs/renderer-react'],</code></pre>\n\n\n\n<p>And now, we can get started with React!</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-astro-app/commit/1ef5102aefb2cc0fa310ae24ee800a6564fec7e8\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 2: Creating a new React component in Astro</h2>\n\n\n\n<p>We’re going to start off simple, so create a new file <code>Button.jsx</code> inside of the <code>components</code> folder.</p>\n\n\n\n<p>Inside <code>src/components/Button.jsx</code> add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react';\n\nconst Button = ({ children }) =&gt; {\n  return (\n    &lt;button&gt;{ children }&lt;/button&gt;\n  )\n}\n\nexport default Button;</code></pre>\n\n\n\n<p>Here we’re simply wrapping a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\">button</a> HTML element in React.</p>\n\n\n\n<p>Now let’s try to use our button. Inside <code>src/pages/index.astro</code>, at the top of the file you should see an import statement for <code>Tour</code>. Right underneath that before the three dashes, add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import Button from '../components/Button.jsx';</code></pre>\n\n\n\n<p>Then, under the <code>&lt;h1&gt;</code> let&#8217;s add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Button&gt;Hello, Astro!&lt;/Button&gt;</code></pre>\n\n\n\n<p>And now if you open up your browser, you should see a new button!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"191\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-with-button.jpg?resize=640%2C191\" alt=\"Button with &quot;Hello, Astro!&quot; under welcome note\" class=\"wp-image-505\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-with-button-scaled.jpg?resize=1024%2C306 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-with-button-scaled.jpg?resize=300%2C90 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-with-button-scaled.jpg?resize=768%2C229 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-with-button-scaled.jpg?resize=1536%2C459 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-with-button-scaled.jpg?resize=2048%2C612 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-with-button-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-with-button-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Rendering a Button React component with Astro</figcaption></figure>\n\n\n\n<p>Now this might look like a pretty plain HTML button, and well it is, but the cool thing is if you open up your developer tools and look at the network requests, you’ll see that there is literally no JavaScript loaded.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"204\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-devtools-no-js.jpg?resize=640%2C204\" alt=\"Chrome dev tools Network tab showing no JavaScript files\" class=\"wp-image-506\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-devtools-no-js-scaled.jpg?resize=1024%2C327 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-devtools-no-js-scaled.jpg?resize=300%2C96 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-devtools-no-js-scaled.jpg?resize=768%2C245 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-devtools-no-js-scaled.jpg?resize=1536%2C491 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-devtools-no-js-scaled.jpg?resize=2048%2C654 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-devtools-no-js-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-devtools-no-js-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Developer tools showing Astro files loaded</figcaption></figure>\n\n\n\n<p>Like we mentioned earlier, Astro’s goal is to ship as little JavaScript as possible, which is 0 bytes by default. While we’re using React, Astro is rendering that React to a string and adding it to the resulting HTML, which gets sent to the browser.</p>\n\n\n\n<p>Now as you might start wondering, how can we get all the beautiful features of React like dynamic interactions in the browser without any JavaScript? We’ll find out in Step 4!</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-astro-app/commit/c59e0fe720f4cf89a4a369fa5ad570d85ae0309c\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 3: Using Astro to fetch and pass data to React components</h2>\n\n\n\n<p>Most real-world applications ultimately rely on data to provide some kind of dynamic experience.</p>\n\n\n\n<p>While we certainly could take advantage of client-side React to make a request and update the DOM, we can instead take advantage of Astro’s built-in ability to run JavaScript right inside of the page, where we can then pass that data as a prop to our React component, keeping it nice and static and pure HTML.</p>\n\n\n\n<p>Back inside of <code>src/pages/index.astro</code> at the top of the page, we have two sets of three dashes <code>---</code>. This area designates where we can run JavaScript, such as the two import statements.</p>\n\n\n\n<p>We can additionally fetch some data right inside of our designated JavaScript area, so right below our import statements, add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const characters = await fetch('https://finalspaceapi.com/api/v0/character?limit=5').then((res) =&gt; res.json());</code></pre>\n\n\n\n<p>In this little snippet, we’re using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">fetch API</a> which is baked into Astro to fetch some character data from the <a href=\"https://finalspaceapi.com/\">Final Space API</a>. Because Astro automatically wraps this code with <code>async</code>, we can run <code>await</code>, meaning we&#8217;re waiting for that fetch promise to fulfill, as well as the chained <code>then</code> which is transforming that response to json.</p>\n\n\n\n<p>What we end up with is an array stored in the constant <code>characters</code> which we can even test out by adding a console log statement right below it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>console.log('characters', characters);</code></pre>\n\n\n\n<p>As you might suspect, we’re not going to be able to see this in the browser, because we’re not shipping any JavaScript, but instead, we can look in our terminal, and we can see the beautiful output with all of our character data:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"286\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-terminal-log-data.jpg?resize=640%2C286\" alt=\"Terminal showing logged data from Astro app\" class=\"wp-image-507\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-terminal-log-data.jpg?resize=1024%2C457 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-terminal-log-data.jpg?resize=300%2C134 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-terminal-log-data.jpg?resize=768%2C342 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-terminal-log-data.jpg?resize=1536%2C685 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-terminal-log-data.jpg?w=1790 1790w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-terminal-log-data.jpg?w=1280 1280w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Character data in the terminal</figcaption></figure>\n\n\n\n<p>Now let’s use this data with some React!</p>\n\n\n\n<p>Let’s first create a new component with a file called <code>Characters.jsx</code> inside of <code>components</code> and add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React from 'react';\n\nconst Characters = ({ characters }) =&gt; {\n  return (\n    &lt;ul&gt;\n      {characters.map(character =&gt; {\n        return (\n          &lt;li key={character.id}&gt;\n            &lt;h3&gt;{ character.name }&lt;/h3&gt;\n            &lt;img width={150} src={character.img_url} alt={`Image of ${character.name}`} /&gt;\n          &lt;/li&gt;\n        )\n      })}\n    &lt;/ul&gt;\n  )\n}\n\nexport default Characters;</code></pre>\n\n\n\n<p>Back inside of <code>src/pages/index.astro</code> we can first import that new component:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import Characters from '../components/Characters.jsx';</code></pre>\n\n\n\n<p>Then we can add it somewhere on the page, where I’m going to add it right above the <code>&lt;Tour /&gt;</code> component:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Characters characters={characters} /&gt;</code></pre>\n\n\n\n<p>As we can see, we’re passing in our <code>characters</code> constant as a prop into our Characters component.</p>\n\n\n\n<p>Now if we refresh our browser, we can now see a list of our characters.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"303\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-list-of-characters.jpg?resize=640%2C303\" alt=\"List of Final Space characters inside Astro app\" class=\"wp-image-508\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-list-of-characters-scaled.jpg?resize=1024%2C485 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-list-of-characters-scaled.jpg?resize=300%2C142 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-list-of-characters-scaled.jpg?resize=768%2C364 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-list-of-characters-scaled.jpg?resize=1536%2C728 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-list-of-characters-scaled.jpg?resize=2048%2C970 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-list-of-characters-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-list-of-characters-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Final Space characters in a list</figcaption></figure>\n\n\n\n<p>And still, if you look in the developer tools Network tab, you’ll see absolutely no JavaScript!</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-astro-app/commit/edd39458761f461f491a00211b3291609f1cd22f\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 4: Hydrating React in the client with Astro</h2>\n\n\n\n<p>We can do a lot of powerful things by taking advantage of React as basically a templating language, where we&#8217;re putting together static HTML pages dynamically, but sometimes we need that little extra bit of client-side interactivity to really create a great user experience.</p>\n\n\n\n<p>The cool thing about Astro, is we have a few options for how we can opt different components in to being hydrated in the client, meaning, we don’t need to ship JavaScript for every single component, only the ones we want to make interactive.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: because we need React to make React happen, we&#8217;ll still be shipping the React bundle no matter if we include 1 or multiple components, so keep that in mind as you opt-in.</p></blockquote>\n\n\n\n<p>Astro has 4 different hydration states:</p>\n\n\n\n<ul><li>Default: renders only HTML (ex: <code>&lt;Component&gt;</code>)</li><li>Load: renders component on page load (ex: <code>&lt;Component:load /&gt;</code>)</li><li>Idle: uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback\">requestIdleCallback</a> to determine when to render (ex: <code>&lt;Component:idle /&gt;</code>)</li><li>Visible: uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\">IntersectionObserver</a> to determine when to render (ex: <code>&lt;Component:visible /&gt;</code>)</li></ul>\n\n\n\n<p>Between these 4 different methods, we can strategically make sure we’re only loading the JavaScript we need to, when we need to, to give our customers and visitors the best experience we can.</p>\n\n\n\n<p>We’ve already seen how the default works, shipping only HTML, but let’s see how the Load method works.</p>\n\n\n\n<p>First, let’s see exactly what happens when we try to use React features without it.</p>\n\n\n\n<p>Inside of <code>src/components/Button.jsx</code> let&#8217;s add a simple click handler:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>function handleOnClick() {\n  alert('Hello, Astro!');\n}\nreturn (\n  &lt;button onClick={handleOnClick}&gt;{ children }&lt;/button&gt;\n)</code></pre>\n\n\n\n<p>What we want to happen, is whenever someone clicks on the Button component, we want the browser to send an alert that says “Hello, Astro!”.</p>\n\n\n\n<p>If we open up the browser and try to click the button, nothing happens.</p>\n\n\n\n<p>This is expected, as when Astro builds our page, it’s rendering only the HTML and not shipping any JavaScript along with it, meaning no click handler and no alert.</p>\n\n\n\n<p>Now with this same code, we can take advantage of our hydration methods to tell Astro we want to be able to run JavaScript for that component.</p>\n\n\n\n<p>Inside of <code>src/pages/index.astro</code>, find the <code>&lt;Button&gt;</code> component that we added in Step 2, and update it to:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Button:load&gt;Hello, Astro!&lt;/Button:load&gt;</code></pre>\n\n\n\n<p>If we refresh the page and click the button, we can now see our alert!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"187\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-javascript-alert.jpg?resize=640%2C187\" alt=\"Web alert showing after clicking button in Astro app\" class=\"wp-image-509\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-javascript-alert-scaled.jpg?resize=1024%2C299 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-javascript-alert-scaled.jpg?resize=300%2C88 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-javascript-alert-scaled.jpg?resize=768%2C224 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-javascript-alert-scaled.jpg?resize=1536%2C449 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-javascript-alert-scaled.jpg?resize=2048%2C598 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-javascript-alert-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-app-javascript-alert-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Browser alert after clicking button</figcaption></figure>\n\n\n\n<p>If we look back inside of our Network tab, we can also now see that we’re loading JavaScript, particularly React along with the Button component bundle, along with some Astro files for development.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"231\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-devtools-javascript.jpg?resize=640%2C231\" alt=\"Chrome developer tools showing JavaScript loading from React Astro app\" class=\"wp-image-510\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-devtools-javascript-scaled.jpg?resize=1024%2C370 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-devtools-javascript-scaled.jpg?resize=300%2C108 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-devtools-javascript-scaled.jpg?resize=768%2C277 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-devtools-javascript-scaled.jpg?resize=1536%2C554 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-devtools-javascript-scaled.jpg?resize=2048%2C739 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-devtools-javascript-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-devtools-javascript-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Astro loading JavaScript for React and component</figcaption></figure>\n\n\n\n<p>Beyond us now having the ability to run JavaScript, we can also notice that those JavaScript files don’t load until the page itself has finished loading.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"246\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-javascript-on-page-load.jpg?resize=640%2C246\" alt=\"\" class=\"wp-image-511\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-javascript-on-page-load-scaled.jpg?resize=1024%2C393 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-javascript-on-page-load-scaled.jpg?resize=300%2C115 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-javascript-on-page-load-scaled.jpg?resize=768%2C295 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-javascript-on-page-load-scaled.jpg?resize=1536%2C590 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-javascript-on-page-load-scaled.jpg?resize=2048%2C786 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-javascript-on-page-load-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/astro-javascript-on-page-load-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Loading JavaScript after page finishes loading</figcaption></figure>\n\n\n\n<p>This similar concept applies with Idle and Visible, where with Idle, those files will only load once the browser is Idle and with Visible, the files will only load once that component is visible in the browser.</p>\n\n\n\n<p>How can this be helpful? Consider a static blog, where all of the articles can be rendered ahead of time, but you want some nice client-side comments for people to chat about the article. Traditionally, you would need to load that JavaScript along with the rest the page as soon as the page loads in the browser.</p>\n\n\n\n<p>If we use tools like <code>&lt;Component:visible /&gt;</code> we can instead wait until the visitor scrolls down to that section, avoiding any JavaScript downloading until they actually reach that part of the page!</p>\n\n\n\n<p>Overall, a big performance win when using these APIs strategically.</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-astro-app/commit/c1b02a1d6db4201a3468f46e7e7facb10d600c02\">Follow along with the commit!</a></p>\n\n\n\n<h2>My first thoughts on Astro</h2>\n\n\n\n<p>Most of my dev work and educational content lately has been revolving around Next.js, which is probably considered premium when it comes to JavaScript framework developer experience.</p>\n\n\n\n<p>Astro is still a bit rough in that part, where getting up and running isn’t quite as smooth as it is with Next.js, but again, it’s still in Beta, and what it offers instead is a lot of flexibility, so that you can get the same benefits no matter what UI framework you’d like to use.</p>\n\n\n\n<p>It’s great to see the performance wins though. I really enjoy writing with React so being able to do that and not ship JS with an easy-to-use framework is cool. I’ve done this manually with a custom webpack config before and while it worked, it was a pain to manage.</p>\n\n\n\n<p>It’ll be fun to see how things progress in the Astro world, both from the creators and what the community makes of it.</p>\n\n\n\n<h2>What can we do next?</h2>\n\n\n\n<h3>Deploy your new Astro app!</h3>\n\n\n\n<p>Running <code>npm run build</code> will output your Astro app into the <code>dist</code> folder by default, giving you static files that you can deploy anywhere you would normally deploy static apps like <a href=\"https://www.netlify.com/\">Netlify</a> or <a href=\"https://pages.cloudflare.com/\">Cloudflare Pages</a>.</p>\n\n\n\n<h3>Get Astro VS Code syntax highlighting</h3>\n\n\n\n<p>Install the <a href=\"https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode\">Astro</a> package in VS Code to get proper syntax highlighting for your <code>.astro</code> files.</p>\n\n\n\n<p>Make sure when searching and installing you use the package from the Astro author.</p>\n\n\n\n<h3>Play with other component loading methods</h3>\n\n\n\n<p>While we looked at how to load component JavaScript on page load, try using the Idle method if you don&#8217;t need the interactions immediately or try using Visible for components further on down the page.</p>\n\n\n\n<h3>Dig into the docs!</h3>\n\n\n\n<p>It’s still in Beta, so that means things might still be changing as well as new features being added from time to time.</p>\n\n\n\n<p>Play around with <a href=\"https://github.com/snowpackjs/astro#-guides\">the Docs</a> and find new things you can do to learn everything about Astro including using SCSS for styling and loading local files.</p>\n",
    "title": "How to Use Astro to Build React Apps without JavaScript",
    "slug": "how-to-use-astro-to-build-react-apps-without-javascript"
  },
  {
    "id": "cG9zdDo0NzE=",
    "content": "\n<p>WordPress is King CMS for a reason. It provides a great editing experience and is well known for those who consider themselves technical or not. But with a default installation, the content you can manage is a bit limited. How can we extend that with custom fields via ACF and use that data when querying WPGraphQL in our apps?</p>\n\n\n\n<!--more-->\n\n\n\n<h2>What are custom fields in WordPress?</h2>\n\n\n\n<p>WordPress at its core is a content management system (CMS), and part of the role of a CMS is to have the ability to store data related to the content you’re creating.</p>\n\n\n\n<p>When adding that data such as a title of a post or your featured image, you use fields to input and store that data.</p>\n\n\n\n<p>Custom fields extends this idea, where not only can we use the fields the WordPress provides out of the box, we can provide more fields on top that makes sense in the context of our application.</p>\n\n\n\n<h2>What is ACF?</h2>\n\n\n\n<p>ACF (Advanced Custom Fields) is a very popular plugin for WordPress that gives us that ability to extend the default input fields available.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"321\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/adding-new-field-group.jpg?resize=640%2C321\" alt=\"WordPress edit ACF Field Group\" class=\"wp-image-472\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/adding-new-field-group-scaled.jpg?resize=1024%2C514 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/adding-new-field-group-scaled.jpg?resize=300%2C151 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/adding-new-field-group-scaled.jpg?resize=768%2C386 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/adding-new-field-group-scaled.jpg?resize=1536%2C771 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/adding-new-field-group-scaled.jpg?resize=2048%2C1028 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/adding-new-field-group-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/adding-new-field-group-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Custom fields for Product Post Type</figcaption></figure>\n\n\n\n<p>After installing the ACF plugin, you have the ability to create new fields with a wide variety of input types. You can then select a set of rules to determine what type of content you’d like to apply those fields to, whether a very specific type of Post or if you use <a href=\"https://wordpress.org/support/article/post-types/\">custom post types</a>.</p>\n\n\n\n<p>The tricky thing is how can we access that custom field data when coupling it with a headless approach like WPGraphQL, which isn’t necessarily a solution supported by WordPress itself?</p>\n\n\n\n<h2>How can we use ACF with WPGraphQL?</h2>\n\n\n\n<p>Luckily the team that makes WPGraphQL has been hard at work supporting not only WPGraphQL, but a variety of plugins that help extend its GraphQL querying abilities beyond WordPress core and to popular plugins available in the WordPress ecosystem.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"281\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wpgraphql-acf.jpg?resize=640%2C281\" alt=\"WPGraphQL for Advanced Custom Fields\" class=\"wp-image-473\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wpgraphql-acf-scaled.jpg?resize=1024%2C449 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wpgraphql-acf-scaled.jpg?resize=300%2C131 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wpgraphql-acf-scaled.jpg?resize=768%2C337 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wpgraphql-acf-scaled.jpg?resize=1536%2C673 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wpgraphql-acf-scaled.jpg?resize=2048%2C898 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wpgraphql-acf-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wpgraphql-acf-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>WPGraphQL for Advanced Custom Fields</figcaption></figure>\n\n\n\n<p>Particularly, WPGraphQL supports a <a href=\"https://www.wpgraphql.com/acf/\">plugin for Advanced Custom Fields</a>.</p>\n\n\n\n<p>By installing this plugin, we can take full advantage of any of the custom fields we create for our content, pulling it in right along side any other WordPress data.</p>\n\n\n\n<h2>What are we going to build?</h2>\n\n\n\n<p>To get started, we’re going to use a very basic Next.js Starter that I created for bootstrapping a new project with basic WPGraphQL configurations.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: you’ll need to already have a WordPress instance with WPGraphQL available and ready to work with whether locally running or publicly available. You’ll also need to be able to install plugins or have someone else install them for you.</p></blockquote>\n\n\n\n<p>What this will allow us to do is skip over the basic installation process and move right into getting started with managing custom fields with WPGraphQL in WordPress.</p>\n\n\n\n<p>Once we have our basic project set up, we’ll walk through all of our plugins, how we can use those plugins to set up custom fields and use that data in our app.</p>\n\n\n\n<h2>Step 0: Starting a new Next.js project with Next.js WPGraphQL Basic Starter</h2>\n\n\n\n<p>We’ll get our project started by spinning up a new Next.js project with my <a href=\"https://github.com/colbyfayock/next-wpgraphql-basic-starter\">Next.js WPGraphQL Basic Starter</a>.</p>\n\n\n\n<p>If you already have a Next.js project with WPGraphQL, you could alternatively use that to walk through the tutorial.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Reminder: make sure your WordPress instance is available to query with <a href=\"https://www.wpgraphql.com/\">WPGraphQL</a> installed!</p></blockquote>\n\n\n\n<p>In your terminal, run:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn create next-app -e https://github.com/colbyfayock/next-wpgraphql-basic-starter my-wp-acf-app\n# or\nnpx create-next-app -e https://github.com/colbyfayock/next-wpgraphql-basic-starter my-wp-acf-app</code></pre>\n\n\n\n<p>This will go through and clone the starter project and install all of the dependencies.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: feel free to change <code>my-wp-acf-app</code> to the directory and project name of your choice!</p></blockquote>\n\n\n\n<p>Once everything is installed, navigate to that new directory:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd my-wp-acf-app</code></pre>\n\n\n\n<p>And before we try to start off the project, create a new file in the root of the project called <code>.env.local</code> with the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>WORDPRESS_GRAPHQL_ENDPOINT=\"https://yourhost.com/graphql\"</code></pre>\n\n\n\n<p>You’ll want to replace <a href=\"http://yourhost.com/graphql\"><code>http://yourhost.com/graphql</code></a> with your WordPress instance’s GraphQL endpoint. After installing WPGraphQL, the endpoint is available at <code>/graphql</code> by default.</p>\n\n\n\n<p>Now, you can start up the new project by running:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn dev\n# or\nnpm run dev</code></pre>\n\n\n\n<p>Which will start up a local development server at <a href=\"http://localhost:3000\">http://localhost:3000</a> where you can now access your new Next.js WordPress project!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"262\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/basic-nextjs-wpgraphql-site.jpg?resize=640%2C262\" alt=\"Space Jelly Demo WordPress Next.js site\" class=\"wp-image-474\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/basic-nextjs-wpgraphql-site-scaled.jpg?resize=1024%2C419 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/basic-nextjs-wpgraphql-site-scaled.jpg?resize=300%2C123 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/basic-nextjs-wpgraphql-site-scaled.jpg?resize=768%2C314 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/basic-nextjs-wpgraphql-site-scaled.jpg?resize=1536%2C629 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/basic-nextjs-wpgraphql-site-scaled.jpg?resize=2048%2C839 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/basic-nextjs-wpgraphql-site-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/basic-nextjs-wpgraphql-site-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>New Next.js headless WordPress site</figcaption></figure>\n\n\n\n<p>If you head over to the GraphiQL IDE provided by the WPGraphQL plugin, you can also see we can now query our data.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"238\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/graphql-query-wordpress.jpg?resize=640%2C238\" alt=\"Example GraphQL query using WPGraphQL in WordPRess\" class=\"wp-image-475\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/graphql-query-wordpress-scaled.jpg?resize=1024%2C381 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/graphql-query-wordpress-scaled.jpg?resize=300%2C112 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/graphql-query-wordpress-scaled.jpg?resize=768%2C286 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/graphql-query-wordpress-scaled.jpg?resize=1536%2C572 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/graphql-query-wordpress-scaled.jpg?resize=2048%2C763 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/graphql-query-wordpress-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/graphql-query-wordpress-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Querying WordPress post data in WPGraphQL</figcaption></figure>\n\n\n\n<p>And we’re ready to get started with our custom fields!</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-wp-acf-app/commit/737e40b1a920cf6cfb1c4ad3f18873ee55c95223\">Follow along with the first commit!</a></p>\n\n\n\n<h2>Step 1: Installing and configuring ACF to use with WordPress and WPGraphQL</h2>\n\n\n\n<p>To get started with ACF, the first thing we need to do is install the plugins for our WordPress instance.</p>\n\n\n\n<p>First up is ACF itself.</p>\n\n\n\n<p>Head over to <strong>Plugins</strong>, click <strong>Add New</strong>, and search for “advanced custom fields”.</p>\n\n\n\n<p>While there will be a bunch of results that come up, be sure to select the one that exactly says “Advanced Custom Fields”.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"246\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-acf-plugin.jpg?resize=640%2C246\" alt=\"Advanced Custom Fields plugin in WordPress dashboard\" class=\"wp-image-476\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-acf-plugin-scaled.jpg?resize=1024%2C394 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-acf-plugin-scaled.jpg?resize=300%2C115 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-acf-plugin-scaled.jpg?resize=768%2C295 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-acf-plugin-scaled.jpg?resize=1536%2C591 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-acf-plugin-scaled.jpg?resize=2048%2C788 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-acf-plugin-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-acf-plugin-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Advanced Custom Fields plugin in WordPress</figcaption></figure>\n\n\n\n<p>Click <strong>Install</strong> and once it’s complete, click <strong>Activate</strong>.</p>\n\n\n\n<p>This will give you the basic installation of ACF, where it will allow you to manage your custom fields, which we’ll learn how to do in the next step.</p>\n\n\n\n<p>Before we do that though, we need to set up our fields to be queryable, and to do that, we’ll install a second plugin to make it compatible with WPGraphQL.</p>\n\n\n\n<p>For this one, we’ll need to install the plugin manually, which includes one extra step.</p>\n\n\n\n<p>First, head over to the WPGraphQL ACF GitHub repo.</p>\n\n\n\n<p><a href=\"https://github.com/wp-graphql/wp-graphql-acf\">https://github.com/wp-graphql/wp-graphql-acf</a></p>\n\n\n\n<p>We’ll need to download the project into a ZIP folder, which we’ll upload to WordPress.</p>\n\n\n\n<p>If you already know how to do this, you should download it from the main branch which at the time of writing this is <code>master</code>.</p>\n\n\n\n<p>If you scroll down to the top of the README of the project, you’ll see a link for <strong>Installing from GitHub</strong> which you can click<strong>.</strong></p>\n\n\n\n<p>Under that section, you should see another link <strong>download the latest release zip file</strong> which when clicked, will download the ZIP for you.</p>\n\n\n\n<p>Alternatively you can click this link:</p>\n\n\n\n<p><a href=\"https://github.com/wp-graphql/wp-graphql-acf/archive/master.zip\">https://github.com/wp-graphql/wp-graphql-acf/archive/master.zip</a></p>\n\n\n\n<p>Next we want to upload it to WordPress.</p>\n\n\n\n<p>Head back over to WordPress and this time after you click <strong>Plugins</strong> and <strong>Add New</strong>, you want to click <strong>Upload Plugin</strong> at the top.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"213\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-upload-plugin.jpg?resize=640%2C213\" alt=\"Upload Plugin button highlighted in WordPress\" class=\"wp-image-479\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-upload-plugin-scaled.jpg?resize=1024%2C340 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-upload-plugin-scaled.jpg?resize=300%2C99 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-upload-plugin-scaled.jpg?resize=768%2C255 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-upload-plugin-scaled.jpg?resize=1536%2C509 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-upload-plugin-scaled.jpg?resize=2048%2C679 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-upload-plugin-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-upload-plugin-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Upload Plugin in WordPress</figcaption></figure>\n\n\n\n<p>It will open a file selector which you will then find that ZIP you just dowloaded and then click <strong>Install</strong>.</p>\n\n\n\n<p>If successful, you should now see an <strong>Activate Plugin</strong> button which you can go ahead and click.</p>\n\n\n\n<p>And now, if we head back over to Plugins, we should see our three plugins for setting up our custom fields!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"211\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-plugins-list.jpg?resize=640%2C211\" alt=\"List of installed plugins in WordPress\" class=\"wp-image-480\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-plugins-list-scaled.jpg?resize=1024%2C337 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-plugins-list-scaled.jpg?resize=300%2C99 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-plugins-list-scaled.jpg?resize=768%2C253 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-plugins-list-scaled.jpg?resize=1536%2C506 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-plugins-list-scaled.jpg?resize=2048%2C674 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-plugins-list-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-plugins-list-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Plugins in WordPress</figcaption></figure>\n\n\n\n<h2>Step 2: Creating new custom fields for WordPress posts</h2>\n\n\n\n<p>Now that we have ACF installed and ready to use, let’s try to create a new custom field and make sure we’re able to query it on our post data.</p>\n\n\n\n<p>Still inside of the WordPress dashboard, head over to the <strong>Custom Fields</strong> section in the left navigation.</p>\n\n\n\n<p>Here, you&#8217;ll see a page called Field Groups, which is where we&#8217;ll create our custom fields. Click Add New at the top.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"242\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-add-new-field-group.jpg?resize=640%2C242\" alt=\"Add New button highlighted in WordPress Advanced Custom Fields \" class=\"wp-image-481\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-add-new-field-group-scaled.jpg?resize=1024%2C387 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-add-new-field-group-scaled.jpg?resize=300%2C113 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-add-new-field-group-scaled.jpg?resize=768%2C290 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-add-new-field-group-scaled.jpg?resize=1536%2C580 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-add-new-field-group-scaled.jpg?resize=2048%2C773 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-add-new-field-group-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-add-new-field-group-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Adding a new Field Group in ACF</figcaption></figure>\n\n\n\n<p>Next, we can name our field group. For our example, I’m going to add a YouTube video that should be available on each post, so I’m going to name it “Video”.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Tip: The conventions that you use for naming your custom fields and properties is up to you, but try to remain consistent. If you have data specific for Products, maybe you name it “Product”, if it’s video metadata that could work on multiple post types like here, maybe name it “Video”.</p></blockquote>\n\n\n\n<p>Then we can add the fields for our video by clicking <strong>Add Field</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"201\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-acf-add-field.jpg?resize=640%2C201\" alt=\"Add Field button highlighted in ACF Field Group\" class=\"wp-image-482\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-acf-add-field-scaled.jpg?resize=1024%2C322 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-acf-add-field-scaled.jpg?resize=300%2C94 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-acf-add-field-scaled.jpg?resize=768%2C241 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-acf-add-field-scaled.jpg?resize=1536%2C483 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-acf-add-field-scaled.jpg?resize=2048%2C643 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-acf-add-field-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/wordpress-acf-add-field-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Adding a new field</figcaption></figure>\n\n\n\n<p>ACF will open up a dialogue with a bunch of fields for you to fill out. Let’s start off with the following:</p>\n\n\n\n<ul><li>Field Label: “Video URL”</li><li>Field Name: as soon as you click outside of Field Label, the Name will autofill. You can leave this as is or change it as you’d like</li><li>Field Type: “oEmbed” &#8211; using the dropdown, you can see there are a lot of field options, we’ll go with oEmbed since we ultimately want to embed a video</li><li>Show in GraphQL: “Yes” &#8211; this should be selected by default, but if it’s not, be sure to toggle it on</li></ul>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"290\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-edit-field.jpg?resize=640%2C290\" alt=\"Video URL fields in ACF\" class=\"wp-image-483\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-edit-field-scaled.jpg?resize=1024%2C464 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-edit-field-scaled.jpg?resize=300%2C136 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-edit-field-scaled.jpg?resize=768%2C348 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-edit-field-scaled.jpg?resize=1536%2C696 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-edit-field-scaled.jpg?resize=2048%2C928 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-edit-field-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-edit-field-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Video field properties</figcaption></figure>\n\n\n\n<p>The rest of the field properties you don’t have to worry about for now unless you’d like to further customize your field.</p>\n\n\n\n<p>If you’d like to add any other fields, feel free to do so by clicking the <strong>Add Field</strong> button again. I&#8217;m going to add an additional field for Video Source where I can put where the video came from (like YouTube or Vimeo).</p>\n\n\n\n<p>Now we want to make sure that we apply our custom field group to the right post “type”.</p>\n\n\n\n<p>Scroll down to the Location box and you’ll see that we have a set of rules. These rules will let you tell WordPress where exactly you’d like these fields to be applied to.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"94\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-field-group-location.jpg?resize=640%2C94\" alt=\"ACF Field Group location Post Type equal to Post\" class=\"wp-image-484\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-field-group-location-scaled.jpg?resize=1024%2C151 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-field-group-location-scaled.jpg?resize=300%2C44 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-field-group-location-scaled.jpg?resize=768%2C113 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-field-group-location-scaled.jpg?resize=1536%2C226 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-field-group-location-scaled.jpg?resize=2048%2C302 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-field-group-location-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-field-group-location-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Location rules for post type</figcaption></figure>\n\n\n\n<p>In our case, we’re adding a video to our blog posts, so the default selection of “If Post Type is equal to Post” is exactly what we want, but if you’re adding this to a custom post type or something advanced, you’d want to set the rules here.</p>\n\n\n\n<p>And finally, this parts important, we want to make sure that this field group will show up in your GrpaphQL query.</p>\n\n\n\n<p>Scroll to the bottom and toggle the <strong>Show in GraphQL</strong> option to <strong>Yes</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"133\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-show-in-graphql.jpg?resize=640%2C133\" alt=\"Button to show Field Group in GraphQL\" class=\"wp-image-485\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-show-in-graphql-scaled.jpg?resize=1024%2C212 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-show-in-graphql-scaled.jpg?resize=300%2C62 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-show-in-graphql-scaled.jpg?resize=768%2C159 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-show-in-graphql-scaled.jpg?resize=1536%2C317 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-show-in-graphql-scaled.jpg?resize=2048%2C423 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-show-in-graphql-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/acf-show-in-graphql-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Show field group in GraphQL</figcaption></figure>\n\n\n\n<p>Similar to other options, you can customize how this field appears, but it adds a default, which is a lowercase version of the field group name “video”, which will work fine for our purposes.</p>\n\n\n\n<p>Now we can scroll back up to the top and click the Publish button on the top right side of the page!</p>\n\n\n\n<p>Next, let’s add some data.</p>\n\n\n\n<p>Head over to the Posts section in the WordPress dashboard and select any post, this could even be your Hello World post.</p>\n\n\n\n<p>Scroll to the very bottom of your post and at the bottom, you should now see a group of fields called Video along with our URL and Source fields!</p>\n\n\n\n<p>Find your favorite video (or use your favorite <a href=\"https://www.youtube.com/colbyfayock\">from my catalog</a>) and add the URL along with the Video Source.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"309\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/post-video-url-embed-1024x495.jpg?resize=640%2C309\" alt=\"Video URL with YouTube link embedded in post\" class=\"wp-image-486\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/post-video-url-embed-scaled.jpg?resize=1024%2C495 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/post-video-url-embed-scaled.jpg?resize=300%2C145 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/post-video-url-embed-scaled.jpg?resize=768%2C371 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/post-video-url-embed-scaled.jpg?resize=1536%2C742 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/post-video-url-embed-scaled.jpg?resize=2048%2C989 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/post-video-url-embed-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/post-video-url-embed-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Adding a video to the Post</figcaption></figure>\n\n\n\n<p>You’ll even see that when you add the URL, because we used oEmbed as our field type, it tries to treat the video as an embeddable piece of content, which helps us later!</p>\n\n\n\n<p>Then hit <strong>Update</strong> on top right of the editor page.</p>\n\n\n\n<p>With our new field group, let’s try to query it in our data.</p>\n\n\n\n<p>Head back over to the GraphiQL IDE inside of the GraphQL tab.</p>\n\n\n\n<p>We’ll want to modify our post query to include our video data. You can either do that by using the Explorer and finding the <code>video</code> property under <code>posts</code>, or you can use the following query:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>query MyQuery {\n  posts {\n    edges {\n      node {\n        title\n        uri\n        video {\n          videoSource\n          videoUrl\n        }\n      }\n    }\n  }\n}</code></pre>\n\n\n\n<p>And if we run that query, we can see our post data along with our video data!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"148\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/video-data-in-graphql.jpg?resize=640%2C148\" alt=\"Video data inside post GraphQL query\" class=\"wp-image-487\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/video-data-in-graphql-scaled.jpg?resize=1024%2C237 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/video-data-in-graphql-scaled.jpg?resize=300%2C69 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/video-data-in-graphql-scaled.jpg?resize=768%2C177 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/video-data-in-graphql-scaled.jpg?resize=1536%2C355 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/video-data-in-graphql-scaled.jpg?resize=2048%2C473 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/video-data-in-graphql-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/video-data-in-graphql-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Post and video data</figcaption></figure>\n\n\n\n<p>And in the next step we’ll learn how to add that data to our query and add it to our page!</p>\n\n\n\n<h2>Step 3: Querying custom field data with WPGraphQL</h2>\n\n\n\n<p>In Step 0, we started off our project by using a Next.js Starter that already has the ability to query WordPress with WPGraphQL.</p>\n\n\n\n<p>That Starter includes a basic homepage, but it also includes a dynamic Post page, which will create a new route for every post, along with grabbing the data to appear on the page.</p>\n\n\n\n<p>So in this step, we’ll extend the query we already have, use that data to find our video embed details, and add it to our page.</p>\n\n\n\n<p>To start open back up the code in your editor and navigate to <code>src/pages/posts/[postSlug].js</code>. If we scroll to the bottom of the page, we&#8217;ll see the function <code>getStaticProps</code> which inside includes some basic data about our post including the id, content, title, and slug.</p>\n\n\n\n<p>We can easily add our new video data to make that information immediately available to our page just like the query in GraphiQL:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>postBy(slug: $slug) {\n  id\n  content\n  title\n  slug\n  video {\n    videoSource\n    videoUrl\n  }\n}</code></pre>\n\n\n\n<p>Let’s also add this data as a new prop to make it easier to access in our page. In the return statement for <code>getStaticProps</code> add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>return {\n  props: {\n    post,\n    site,\n    video: {\n      ...post.video\n    }\n  }\n}</code></pre>\n\n\n\n<p>We can even now use that data right inside of our page.</p>\n\n\n\n<p>At the top of the Post page component, first add <code>video</code> as a new prop:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export default function Post({ post, site, video }) {</code></pre>\n\n\n\n<p>Then, add the following below the title:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{video &amp;&amp; (\n  &lt;figure&gt;\n    &lt;figcaption&gt;From { video.videoSource }&lt;/figcaption&gt;\n  &lt;/figure&gt;\n)}</code></pre>\n\n\n\n<p>We’re first checking if we have a video, and if it does, we’re adding a new <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure\">figure</a> element with a caption including the source of our video.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"177\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-wordpress-acf-data.jpg?resize=640%2C177\" alt=\"Video source highlighted on page of NExt.js app\" class=\"wp-image-488\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-wordpress-acf-data-scaled.jpg?resize=1024%2C283 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-wordpress-acf-data-scaled.jpg?resize=300%2C83 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-wordpress-acf-data-scaled.jpg?resize=768%2C212 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-wordpress-acf-data-scaled.jpg?resize=1536%2C425 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-wordpress-acf-data-scaled.jpg?resize=2048%2C566 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-wordpress-acf-data-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-wordpress-acf-data-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Video Source on page</figcaption></figure>\n\n\n\n<p>But we want to see the video, so next let’s add that.</p>\n\n\n\n<p>If you noticed inside of our query, when we look up our video URL, we only see a URL, but when we set up our field, we used oEmbed.</p>\n\n\n\n<p>While you might have expected to receive the embeddable URL, what we’re actually going to do is query YouTube’s <a href=\"https://oembed.com/\">oEmbed</a> service, which will automatically give all of that information for us.</p>\n\n\n\n<p>So back inside of <code>getStaticProps</code>, we can add some logic in order to do this. First add a request to get the oEmbed data:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let oEmbed;\n\nif ( post.video ) {\n  if ( post.video.videoSource === 'YouTube') {\n    oEmbed = await fetch(`https://www.youtube.com/oembed?url=${post.video.videoUrl}`)\n    oEmbed = await oEmbed.json();\n  }\n}</code></pre>\n\n\n\n<p>Then we can add that oEmbed variable to our return statement under the video prop.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>video: {\n  ...post.video,\n  oEmbed\n}</code></pre>\n\n\n\n<p>If we add a <code>console.log</code> to the top of the Page component, we can even see all of the data we get back with our oEmbed.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"250\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/chrome-dev-tools-post-data.jpg?resize=640%2C250\" alt=\"Post and video data in Chrome dev tools console\" class=\"wp-image-489\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/chrome-dev-tools-post-data-scaled.jpg?resize=1024%2C400 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/chrome-dev-tools-post-data-scaled.jpg?resize=300%2C117 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/chrome-dev-tools-post-data-scaled.jpg?resize=768%2C300 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/chrome-dev-tools-post-data-scaled.jpg?resize=1536%2C599 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/chrome-dev-tools-post-data-scaled.jpg?resize=2048%2C799 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/chrome-dev-tools-post-data-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/chrome-dev-tools-post-data-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>oEmbed data for post video</figcaption></figure>\n\n\n\n<p>As we can see we get the properly <code>html</code> which is exactly what we&#8217;ll use to add this video to the page.</p>\n\n\n\n<p>Let’s update our code snippet:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{video &amp;&amp; (\n  &lt;figure&gt;\n    &lt;div dangerouslySetInnerHTML={{\n      __html: video.oEmbed.html\n    }} /&gt;\n    &lt;figcaption&gt;From { video.videoSource }&lt;/figcaption&gt;\n  &lt;/figure&gt;\n)}</code></pre>\n\n\n\n<p>Here we’re adding a new div, where we can set the HTML of that div to our oEmbed HTML, which embeds our video as an iFrame.</p>\n\n\n\n<p>If we now reload the page, we can see our video!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"206\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/youtube-video-embed-wordpress-post-data.jpg?resize=640%2C206\" alt=\"YouTube video embedded from WordPress source in app\" class=\"wp-image-490\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/youtube-video-embed-wordpress-post-data-scaled.jpg?resize=1024%2C329 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/youtube-video-embed-wordpress-post-data-scaled.jpg?resize=300%2C96 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/youtube-video-embed-wordpress-post-data-scaled.jpg?resize=768%2C247 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/youtube-video-embed-wordpress-post-data-scaled.jpg?resize=1536%2C494 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/youtube-video-embed-wordpress-post-data-scaled.jpg?resize=2048%2C658 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/youtube-video-embed-wordpress-post-data-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/06/youtube-video-embed-wordpress-post-data-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>YouTube video on post page</figcaption></figure>\n\n\n\n<p>Though it’s a little small by default from the YouTube response, but we can fix that with a little CSS!</p>\n\n\n\n<p>At the bottom of <code>src/styles/global.css</code> add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>figure {\n  width: 100%;\n  text-align: center;\n}\n\nfigure iframe {\n  aspect-ratio: 200 / 113;\n  width: 100%;\n  max-width: 400px;\n  height: auto;\n}</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: when building your own page, you’d likely want to add a class to your video component and add the styles to a module specific to your page or component.</p></blockquote>\n\n\n\n<p>In our CSS, we’re first making sure our figure can expand as large as it wants, but when on our iFrame, we’re saying we want it to have an aspect-ratio equivalent to the size of our video that resizes with the page, but only gets to a max size of 400px wide.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio\">aspect-ratio</a> is a newer CSS property that has limited browser support. Make sure to do your homework when using it or use the <a href=\"https://css-tricks.com/aspect-ratio-boxes/\">padding trick</a>.</p></blockquote>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"231\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-youtube-video-embed-1024x370.jpg?resize=640%2C231\" alt=\"YouTube video centered and bigger on app page\" class=\"wp-image-491\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-youtube-video-embed-scaled.jpg?resize=1024%2C370 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-youtube-video-embed-scaled.jpg?resize=300%2C108 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-youtube-video-embed-scaled.jpg?resize=768%2C277 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-youtube-video-embed-scaled.jpg?resize=1536%2C555 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-youtube-video-embed-scaled.jpg?resize=2048%2C740 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-youtube-video-embed-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/06/nextjs-youtube-video-embed-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Bigger video on post page</figcaption></figure>\n\n\n\n<p>As we can see, our video expands to a bigger size making it easier to see!</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-wp-acf-app/commit/37bd168897adb9aaa8e5ecb20385654c6f95c7fc\">Follow along with this commit!</a></p>\n\n\n\n<h2>What else can we do?</h2>\n\n\n\n<h3>Add more fields!</h3>\n\n\n\n<p>Whether you’re adding a video, managing a product, or some complex content strategy, ACF gives a lot of options for different fields we can add and how they’re applied to the UI.</p>\n\n\n\n<p>Take some time to explore the options available and use them to your advantage.</p>\n\n\n\n<h3>Support more types of oEmbed</h3>\n\n\n\n<p>YouTube isn’t the only service that supports oEmbed. Take advantage of the specification and support other services which will make your CMS more flexible for editors.</p>\n\n\n\n<p><a href=\"https://oembed.com/providers.json\">https://oembed.com/providers.json</a></p>\n",
    "title": "How to Add Custom Fields in Headless WordPress with ACF & WPGraphQL",
    "slug": "how-to-add-custom-fields-in-headless-wordpress-with-acf-wpgraphql"
  },
  {
    "id": "cG9zdDo0Mjc=",
    "content": "\n<p>Part of what makes the web a great place is the ability for developers to personalize content and app experiences to the person using it. How can we add authentication to a Next.js app to tailor those experiences for our visitors?</p>\n\n\n\n<!--more-->\n\n\n\n<h2>What is authentication?</h2>\n\n\n\n<p>Authentication is the process of identifying a person or entity and making sure they are who they claim to be. While this is typically a person, it can also be something like a bot account or an organization.</p>\n\n\n\n<p>This is commonly seen as a login form when visiting a website or application, where you provide your credentials to a service, and that service verifies they’re correct.</p>\n\n\n\n<h2>What are the challenges of authentication with Next.js?</h2>\n\n\n\n<p>The challenges of authentication aren’t inherent to Next.js, but rather the technology, of being able to provide a way to securely and accurately verify people’s identifies.</p>\n\n\n\n<p>There are a lot of implications around this, as incorrectly identifying someone can allow people to access others&#8217; accounts and poor security can lead to leaks of sensitive data.</p>\n\n\n\n<p>In terms of a JavaScript application, implementing a solution has it’s challenges as well. You want something that will be able to communicate across different services (like a client, API, or server) while remaining secure.</p>\n\n\n\n<p>It’s a little simpler when those requests are serverside, as you can hide sensitive data in the request, but you still want to provide a dynamic experience in the browser.</p>\n\n\n\n<h2>What is NextAuth.js?</h2>\n\n\n\n<p>That’s where <a href=\"https://next-auth.js.org/\">NextAuth.js</a> comes in as an all-in-one solution that provides a variety of authentication layers for Next.js apps.</p>\n\n\n\n<p>At the core of it, NextAuth.js takes advantage of Next.js serverless functions to provide an authentication API. To persist sessions and user authentication state, it stores a JWT as an <a href=\"https://owasp.org/www-community/HttpOnly\">HttpOnly cookie</a> which is then able to make the authenticated requests until it expires or is refreshed.</p>\n\n\n\n<p>The cool thing is it comes packed with a variety of authentication providers out of the box, including popular ones like Twitter, Google, and GitHub, where all you need to do is provide your API keys, and people can start logging in. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"234\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-sign-in.jpg?resize=640%2C234\" alt=\"Sign In with Twitter\" class=\"wp-image-442\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-sign-in-scaled.jpg?resize=1024%2C374 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-sign-in-scaled.jpg?resize=300%2C109 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-sign-in-scaled.jpg?resize=768%2C280 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-sign-in-scaled.jpg?resize=1536%2C561 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-sign-in-scaled.jpg?resize=2048%2C747 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-sign-in-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-sign-in-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Twitter sign in</figcaption></figure>\n\n\n\n<p>You can even provide your own database through adapters if you’d like to manage more complex session state than what’s out of the box.</p>\n\n\n\n<p>To interface with NextAuth, they provide a easy-to-use API that can work both on the client, inside of <code>getServerSideProps</code>, as well as inside other serverless functions, making it it a super flexible way to manage and access session state.</p>\n\n\n\n<h2>What are we going to build?</h2>\n\n\n\n<p>We’re going to take advantage of the NextAuth.js API to add Twitter login to our Next.js app.</p>\n\n\n\n<p>We’ll start off from scratch using <a href=\"https://nextjs.org/docs/api-reference/create-next-app\">Create Next App</a>, learn how to install NextAuth.js, set up and configure a Twitter app, and use Twitter as a Provider for authenticating visitors to our app.</p>\n\n\n\n<p>To start, we’ll set up the app to fetch the user session clientside, but also see how we can move it into <code>getServerSideProps</code> along with the tradeoffs between the two options.</p>\n\n\n\n<h2>Step 0: Creating a new Next.js app with Create Next App</h2>\n\n\n\n<p>We’re going to start off with a new Next.js app using <a href=\"https://nextjs.org/docs/api-reference/create-next-app\">Create Next App</a>.</p>\n\n\n\n<p>Inside of your terminal, run:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn create next-app my-auth-app\n# or\nnpx create-next-app my-auth-app</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: feel free to use a different value than <code>my-auth-app</code> as your project name!</p></blockquote>\n\n\n\n<p>Once installation has finished, you can navigate to that directory and start up your development server:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd my-auth-app\n\nyarn dev\n# or\nnpm run dev</code></pre>\n\n\n\n<p>And once loaded, you should now be able to open up your new app at <a href=\"http://localhost:3000/\">http://localhost:3000</a>!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"251\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/03/new-nextjs-app-1.jpg?resize=640%2C251\" alt=\"New Next.js App\" class=\"wp-image-285\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/03/new-nextjs-app-1-scaled.jpg?resize=1024%2C401 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/03/new-nextjs-app-1-scaled.jpg?resize=300%2C118 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/03/new-nextjs-app-1-scaled.jpg?resize=768%2C301 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/03/new-nextjs-app-1-scaled.jpg?resize=1536%2C602 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/03/new-nextjs-app-1-scaled.jpg?resize=2048%2C802 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/03/new-nextjs-app-1-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/03/new-nextjs-app-1-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Next Next.js app</figcaption></figure>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-auth-app/commit/4693433ab31dae7e06385349c3efedc2278ae778\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 1: Installing and configuring NextAuth.js</h2>\n\n\n\n<p>Getting started with NextAuth.js, we’ll first want to install it as a dependency to our project:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn add next-auth\n# or\nnpm install next-auth --save</code></pre>\n\n\n\n<p>If you remember from earlier, NextAuth.js leans on serverless functions to provide authentication functionality. So the first thing we need to do is create a new function.</p>\n\n\n\n<p>Create a new folder called <code>auth</code> inside of <code>pages/api</code>, and inside create a new file called <code>[…nextauth].js</code>.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Tip: the brackets <code>[</code> define our API route as a parameter (or variable) and the <code>...</code> tells Next.js that there can be more than one parameter, or as Next.js calls it, a <a href=\"https://nextjs.org/docs/routing/dynamic-routes#catch-all-routes\">catch-all route</a>. This means we&#8217;ll be able to hit both <code>/api/auth/session</code> and <code>/api/auth/callback/twitter</code> and both endpoints will resolve to that function.</p></blockquote>\n\n\n\n<p>Inside <code>pages/api/auth/[…nextauth].js</code>, add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\n\nexport default NextAuth({\n  providers: &#91;\n    Providers.Twitter({\n      clientId: process.env.TWITTER_CONSUMER_KEY,\n      clientSecret: process.env.TWITTER_CONSUMER_SECRET\n    })\n  ]\n});</code></pre>\n\n\n\n<p>Here’s a breakdown of what’s happening:</p>\n\n\n\n<ul><li>We&#8217;re importing the main NextAuth module as well as a Providers module that will allow us to set up an authentication provider</li><li>We export a default invocation of NextAuth which will scaffold all of the API code and configuration we need to support our various authentication API routes</li><li>Inside of NextAuth we add a configuration, where we’re creating a new array of providers, particularly passing in a Twitter provider</li><li>That Twitter Provider takes 2 configuration properties, a <code>clientId</code> and <code>clientSecret</code>, which point to environment variables we&#8217;ll se up next</li></ul>\n\n\n\n<p>If we try to load the app, nothing will happen at this point, as we’re not trying to hit that endpoint, but even if we were, we haven’t configured Twitter.</p>\n\n\n\n<p>So next, let’s define our environment variables. These will allow us to store sensitive values, such as API keys, that will be injected into the environment at run time. It helps prevent those values from being stored in public locations that could compromise them.</p>\n\n\n\n<p>Create a new file at the root of the project called <code>.env.local</code> and inside add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>TWITTER_CONSUMER_KEY=\"key\"\nTWITTER_CONSUMER_SECRET=\"secret\"\nNEXTAUTH_URL=\"http://localhost:3000/\"</code></pre>\n\n\n\n<p>Here were defining 2 Twitter environment variables and a URL that we’ll use for NextAuth. We’ll get the Twitter environment variables in the next step, but the NextAuth URL will ultimately be where your authentication service will connect to, where in our case, we’re working locally, so we can use our test environment.</p>\n\n\n\n<p>When we spin up our Next.js server, we&#8217;ll have access to those values through <code>process.env</code> where like we saw earlier, we can use it like:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>process.env.TWITTER_CONSUMER_KEY</code></pre>\n\n\n\n<p>But similar to earlier, if you try to load the app, nothing will happen. Next we’ll walk through creating a Twitter app, grabbing the credentials, configuring them in our environment, then finally using NextAuth to log in.</p>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-auth-app/commit/86f9ed2bf1adc66989914ca28695f009ec8b8d28\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 2: Creating a Twitter app and configuring Consumer and Client keys</h2>\n\n\n\n<p>In order to allow people to log in with Twitter, we have to create and register an application with Twitter.</p>\n\n\n\n<p>Head over to <a href=\"https://developer.twitter.com/\">developer.twitter.com</a> where you can sign in to the Developer Portal with a new or existing Twitter account, which we&#8217;ll use to create our app.</p>\n\n\n\n<p>Once inside, we want to create a new Standalone App. to do that, navigate to Projects &amp; Apps, then Overview, and once there, click the <strong>Create App</strong> button.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"324\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-developer-portal-new-app.jpg?resize=640%2C324\" alt=\"Twitter Portal Create App button\" class=\"wp-image-428\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-developer-portal-new-app-scaled.jpg?resize=1024%2C519 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-developer-portal-new-app-scaled.jpg?resize=300%2C152 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-developer-portal-new-app-scaled.jpg?resize=768%2C390 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-developer-portal-new-app-scaled.jpg?resize=1536%2C779 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-developer-portal-new-app-scaled.jpg?resize=2048%2C1039 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-developer-portal-new-app-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-developer-portal-new-app-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Creating a new Twitter App</figcaption></figure>\n\n\n\n<p>Next, Twitter will ask you to give your app a name. This can be anything, but it needs to be unique. I’m going to use “Space Jelly App”.</p>\n\n\n\n<p>On the next screen, Twitter will provide you with your API keys. These are sensitive values that shouldn’t be shared with anyone unless you’re working with a team. Make sure to save them in a safe place, as we’ll use them shortly in our application.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: you won&#8217;t be able to see these keys again, but if you happen to lose them, you can regenerate them under Keys &amp; Tokens. Regenerating them however will invalidate the previous keys, requiring you to update them anywhere they were used.</p></blockquote>\n\n\n\n<p>Once you have your keys saved, hit App Settings, where we’re now in our App’s dashboard. Feel free to update the name, description, or even add an icon, but those aren’t important to our walkthrough.</p>\n\n\n\n<p>We instead need to update two things, the app permissions and authentication settings.</p>\n\n\n\n<p>Under <strong>App permissions</strong> select <strong>Edit</strong>, where we want to change the available permissions to <strong>Read and Write</strong>. Then click Save.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"209\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-read-write-permissions.jpg?resize=640%2C209\" alt=\"Twitter App app permissions\" class=\"wp-image-431\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-read-write-permissions-scaled.jpg?resize=1024%2C335 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-read-write-permissions-scaled.jpg?resize=300%2C98 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-read-write-permissions-scaled.jpg?resize=768%2C252 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-read-write-permissions-scaled.jpg?resize=1536%2C503 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-read-write-permissions-scaled.jpg?resize=2048%2C671 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-read-write-permissions-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-read-write-permissions-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Read and write app permissions for the Twitter API</figcaption></figure>\n\n\n\n<p>We also want to navigate to <strong>Authentication settings</strong> back on our App dashboard, where here, we want to do a few things.</p>\n\n\n\n<p>First, we want to enable both <strong>3-legged OAuth</strong> and <strong>Request email address from users</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"234\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-authentication-settings.jpg?resize=640%2C234\" alt=\"Twitter App authentication settings\" class=\"wp-image-432\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-authentication-settings-scaled.jpg?resize=1024%2C375 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-authentication-settings-scaled.jpg?resize=300%2C110 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-authentication-settings-scaled.jpg?resize=768%2C281 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-authentication-settings-scaled.jpg?resize=1536%2C562 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-authentication-settings-scaled.jpg?resize=2048%2C750 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-authentication-settings-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-authentication-settings-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Updating authentication settings for the Twitter API</figcaption></figure>\n\n\n\n<p>We also want to configure a few URLs for our application.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"363\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-configuration-1.jpg?resize=640%2C363\" alt=\"URL configuration for a Twitter App\" class=\"wp-image-447\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-configuration-1-scaled.jpg?resize=1024%2C580 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-configuration-1-scaled.jpg?resize=300%2C170 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-configuration-1-scaled.jpg?resize=768%2C435 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-configuration-1-scaled.jpg?resize=1536%2C870 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-configuration-1-scaled.jpg?resize=2048%2C1160 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-configuration-1-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/twitter-app-configuration-1-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Authentication URL configuration for Twitter API</figcaption></figure>\n\n\n\n<p>Here’s a breakdown of what we need:</p>\n\n\n\n<ul><li><strong>Callback URLs</strong>: this will be what our auth service will use to communicate with Twitter when authenticating. When developing locally, it should be the address of your server. When on production, it should be your public-facing URL (Ex: http://localhost:3000/api/auth/callback/twitter)</li><li><strong>Website URL:</strong> this should be the website where your application will ultimately live</li><li><strong>Terms of Service, Privacy Policy:</strong> these 2 pages should live on your website, or somewhere public, that gives your application users information about what you will do with their information for your app</li></ul>\n\n\n\n<p>Once those are all filled out and saved, we&#8217;re ready to get back to our app.</p>\n\n\n\n<p>Now that we have our API keys, we want to add them to our application.</p>\n\n\n\n<p>Back inside of our <code>.env.local</code> file, update the values of the following API keys:</p>\n\n\n\n<ul><li><code>TWITTER_CONSUMER_KEY</code> &#8211; API Key (or Consumer Key)</li><li><code>TWITTER_CONSUMER_SECRET</code> &#8211; API Secret (or Consumer Secret)</li></ul>\n\n\n\n<p>At this point, we’re ready to start integrating authentication into our app!</p>\n\n\n\n<h2>Step 3: Adding clientside Twitter login to Next.js with NextAuth.js</h2>\n\n\n\n<p>There’s two main components of integrating NextAuth into our application:</p>\n\n\n\n<ul><li>The NextAuth <code>Provider</code> which allows our application to globally access the session via React Context</li><li>The NextAuth client API including <code>signIn</code>, <code>signOut</code>, and <code>useSession</code> which will allow us to perform the actions they describe as well as gain access to the information of our user&#8217;s session</li></ul>\n\n\n\n<p>To start, let’s add our NextAuth Provider. Inside of <code>pages/_app.js</code> first import the <code>Provider</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Provider } from 'next-auth/client';</code></pre>\n\n\n\n<p>Then we need to wrap our existing <code>&lt;Component</code>. Update the <code>MyApp</code> component to the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>function MyApp({ Component, pageProps }) {\n  return (\n    &lt;Provider session={pageProps.session}&gt;\n      &lt;Component {...pageProps} /&gt;\n    &lt;/Provider&gt;\n  );\n}</code></pre>\n\n\n\n<p>Here we’re wrapping our Component and we’re additionally passing our session as a prop to that provider.</p>\n\n\n\n<p>With NextAuth globally set up, we can now use the client API.</p>\n\n\n\n<p>Inside of <code>pages/index.js</code> first import the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { signIn, signOut, useSession, } from 'next-auth/client';</code></pre>\n\n\n\n<p>Then we can use the <code>useSession</code> hook to grab our session data:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export default function Home() {\n  const &#91;session] = useSession();</code></pre>\n\n\n\n<p>Before we can check on a user’s session though, we need to be able to give someone the ability to log in.</p>\n\n\n\n<p>Still inside <code>pages/index.js</code> let&#8217;s replace the description paragraph at the top of the main content with:</p>\n\n\n\n<p>And now if we open and reload our app in the browser, we can see that see that we’re not logged in, but we have a <strong>Sign In</strong> button.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"196\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-app-not-signed-in.jpg?resize=640%2C196\" alt=\"Next.js App not signed in\" class=\"wp-image-434\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-app-not-signed-in-scaled.jpg?resize=1024%2C313 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-app-not-signed-in-scaled.jpg?resize=300%2C92 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-app-not-signed-in-scaled.jpg?resize=768%2C235 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-app-not-signed-in-scaled.jpg?resize=1536%2C470 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-app-not-signed-in-scaled.jpg?resize=2048%2C627 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-app-not-signed-in-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-app-not-signed-in-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Next.js app with login button</figcaption></figure>\n\n\n\n<p>If we go ahead and click that button, we get taken to a screen that includes another button, where we’ll now be able to log in with our provider, in our case Twitter.</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/05/sign-in-with-twitter.jpg?resize=640%2C195\" alt=\"Sign in with Twitter button\" class=\"wp-image-435\" width=\"640\" height=\"195\" srcset=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/05/sign-in-with-twitter-scaled.jpg?resize=1024%2C313 1024w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/05/sign-in-with-twitter-scaled.jpg?resize=300%2C92 300w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/05/sign-in-with-twitter-scaled.jpg?resize=768%2C235 768w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/05/sign-in-with-twitter-scaled.jpg?resize=1536%2C470 1536w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/05/sign-in-with-twitter-scaled.jpg?resize=2048%2C626 2048w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/05/sign-in-with-twitter-scaled.jpg?w=1280 1280w, https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/05/sign-in-with-twitter-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Sign in with Twitter</figcaption></figure>\n\n\n\n<p>Once you do, you’ll be taken to a new screen that will allow you to sign in and authorize your Twitter Account with the app you created in Step 2.</p>\n\n\n\n<p>One you do, you’ll be taken back to your Next.js application, where you should now see your Twitter account’s email stating that it’s “Signed in”!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"193\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-app-signed-in.jpg?resize=640%2C193\" alt=\"Next.js app signed into Twitter account\" class=\"wp-image-436\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-app-signed-in-scaled.jpg?resize=1024%2C308 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-app-signed-in-scaled.jpg?resize=300%2C90 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-app-signed-in-scaled.jpg?resize=768%2C231 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-app-signed-in-scaled.jpg?resize=1536%2C462 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-app-signed-in-scaled.jpg?resize=2048%2C616 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-app-signed-in-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-app-signed-in-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Signed in with Twitter email</figcaption></figure>\n\n\n\n<p>To see how this is working, let’s look inside of the <code>session</code> variable. Right below our <code>useSession</code> hook, let&#8217;s add a <code>console.log</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const &#91;session] = useSession();\nconsole.log('session', session)</code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"140\" src=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/05/chrome-dev-tools-session-data.jpg?resize=640%2C140\" alt=\"Chrome Dev Tools session data\" class=\"wp-image-437\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/chrome-dev-tools-session-data-scaled.jpg?resize=1024%2C224 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/chrome-dev-tools-session-data-scaled.jpg?resize=300%2C66 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/chrome-dev-tools-session-data-scaled.jpg?resize=768%2C168 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/chrome-dev-tools-session-data-scaled.jpg?resize=1536%2C336 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/chrome-dev-tools-session-data-scaled.jpg?resize=2048%2C449 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/chrome-dev-tools-session-data-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/chrome-dev-tools-session-data-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Session data in Chrome dev tools</figcaption></figure>\n\n\n\n<p>We can see that we have access to our Twitter account’s name, email, and even the avatar.</p>\n\n\n\n<p>That means, we can update our UI to welcome the Twitter account instead of to Next.js, like:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1 className={styles.title}&gt;\n  Welcome { session ? session.user.name : 'to Next.js' }\n&lt;/h1&gt;</code></pre>\n\n\n\n<p>And if we look in the browser, we can now see our welcome message!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"145\" src=\"https://i0.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-personalized-welcome-message.jpg?resize=640%2C145\" alt=\"Personalized welcome message\" class=\"wp-image-438\" srcset=\"https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-personalized-welcome-message-scaled.jpg?resize=1024%2C232 1024w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-personalized-welcome-message-scaled.jpg?resize=300%2C68 300w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-personalized-welcome-message-scaled.jpg?resize=768%2C174 768w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-personalized-welcome-message-scaled.jpg?resize=1536%2C347 1536w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-personalized-welcome-message-scaled.jpg?resize=2048%2C463 2048w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-personalized-welcome-message-scaled.jpg?w=1280 1280w, https://i2.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-personalized-welcome-message-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Welcome Cosmo the Space Jellyfish</figcaption></figure>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-auth-app/commit/6b781506499bcb7e07a0b217242dc47b67fde429\">Follow along with the commit!</a></p>\n\n\n\n<h2>Step 4: Accessing a user’s session serverside in getServerSideProps with NextAuth</h2>\n\n\n\n<p>Finally, Step 3 shows us how to access that information clientside, which means we make a request to the API in the browser to access our session data.</p>\n\n\n\n<p>Loading information like that clientside has its advantages, where you can export the application completely static rather than requiring server rendering, but it also has it’s disadvantages, like the flicker on first load where it shows the unauthenticated information first.</p>\n\n\n\n<p>What if we wanted to load that information on the server?</p>\n\n\n\n<p>The great thing about NextAuth is we have access to that same information right inside of the Next.js <a href=\"https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering\">getServerSideProps</a> function.</p>\n\n\n\n<p>To see how this works, first let’s first add <code>getSession</code> to our import statement in <code>pages/index.js</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { signIn, signOut, useSession, getSession } from 'next-auth/client';</code></pre>\n\n\n\n<p>Then at the bottom of the page, add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export async function getServerSideProps(context) {\n  const session = await getSession(context);\n  return {\n    props: {\n      session\n    }\n  }\n}</code></pre>\n\n\n\n<p>In the above, we’re:</p>\n\n\n\n<ul><li>Creating a nsesew async <code>getServerSideProps</code> function</li><li>We’re using our <code>getSession</code> function to make a request for our session</li><li>We pass that function our app <code>context</code> which comes as an argument from <code>getServerSideProps</code></li><li>Then we finally return that session information as a new prop</li></ul>\n\n\n\n<p>Now that we have our new prop, we need to define that prop in our home component.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export default function Home({ session }) {\n  // const &#91;session] = useSession();</code></pre>\n\n\n\n<p>Here, we’re adding <code>session</code> as a prop and we&#8217;re additionally commenting out our <code>useSession</code> hook because we&#8217;re already getting our session information serverside.</p>\n\n\n\n<p>But now if we reload the page, we should see exactly what we saw after Step 3, where we now see our logged in user information from Twitter, which was all loaded serverside!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"145\" src=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-personalized-welcome-message-1.jpg?resize=640%2C145\" alt=\"\" class=\"wp-image-439\" srcset=\"https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-personalized-welcome-message-1-scaled.jpg?resize=1024%2C232 1024w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-personalized-welcome-message-1-scaled.jpg?resize=300%2C68 300w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-personalized-welcome-message-1-scaled.jpg?resize=768%2C174 768w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-personalized-welcome-message-1-scaled.jpg?resize=1536%2C347 1536w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-personalized-welcome-message-1-scaled.jpg?resize=2048%2C463 2048w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-personalized-welcome-message-1-scaled.jpg?w=1280 1280w, https://i1.wp.com/54.145.245.231/wp-content/uploads/2021/05/nextjs-personalized-welcome-message-1-scaled.jpg?w=1920 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /><figcaption>Cosmo’s Twitter information loaded serverside</figcaption></figure>\n\n\n\n<p><a href=\"https://github.com/colbyfayock/my-auth-app/commit/4f261c2f5e70d2e8cec8d8123a49b6067f23a7d4\">Follow along with the commit!</a></p>\n\n\n\n<h2>What&#8217;s next?</h2>\n\n\n\n<h3>Deploy the app to production!</h3>\n\n\n\n<p>Deploying the application should be pretty straightforward whether you’re using Vercel or Netlify.</p>\n\n\n\n<p>Both options work with Next.js out of the box, allowing you to deploy the serverless functions.</p>\n\n\n\n<p>There will be two things you’ll need to do to make it work in production though:</p>\n\n\n\n<ul><li>Add the environment variables from <code>.env.local</code> to your environment</li><li>Update the callback URL in your Twitter developer portal to your production URL</li></ul>\n\n\n\n<p>Once those things are set up you should be ready to log in live on the web!</p>\n\n\n\n<h3>Using a database to store user information related to the app</h3>\n\n\n\n<p>Part of the benefit of building an application with login capabilities is the ability to store account information to personalize someone’s experience.</p>\n\n\n\n<p>Maybe you’re creating a course or some sort of profile, regardless, setting up a database with the NextAuth adapters allow you to easily interface and store that information.</p>\n\n\n\n<h3>Adding more authentication providers like GitHub and Google</h3>\n\n\n\n<p>The great thing with NextAuth is it gives you the ability to work with a lot of auth providers out of the box.</p>\n\n\n\n<p>Check out the full list over at NextAuth.</p>\n\n\n\n<p><a href=\"https://next-auth.js.org/configuration/providers\">Providers | NextAuth.js</a></p>\n",
    "title": "How to Authenticate Next.js Apps with Twitter & NextAuth.js",
    "slug": "how-to-authenticate-next-js-apps-with-twitter-nextauth-js"
  }
]